{
  "article_entry_uid_sdks-use-them-or-not": {
    "date": "2024-09-29T12:05:48Z",
    "title": "SDKs are everywhere. But should you use them?",
    "canonical_url": "https://timbenniks.dev/writing/sdks-use-them-or-not",
    "description": "Explore the significance of Software Development Toolkits (SDKs) in modern development, their advantages, and when you might want to skip them. From enhancing productivity to integrating complex functionalities seamlessly, the right SDK can accelerate your projects. But what about GraphQL-based systems or the flexibility of headless architectures? Dive into the pros and cons to make an informed decision.",
    "url": "/writing/sdks-use-them-or-not",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1727615642/website/sdks.png",
    "reading_time": "5:30 min read",
    "uid": "article_entry_uid_sdks-use-them-or-not",
    "locale": "en-us",
    "tags": [
      "SDK",
      "DXP",
      "API",
      "composable"
    ],
    "created_at": "2024-09-29T12:05:48Z",
    "updated_at": "2024-09-29T12:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Developers are constantly seeking ways to streamline their workflow and enhance the functionality of their applications. One key tool at their disposal is the Software Development Toolkit (SDK), which plays an important role in interfacing with headless software systems. Let's explore the significance of SDKs and how they can benefit your development process.</p><h2 id=\"understanding-sdks-and-apis\">Understanding SDKs and APIs</h2><p>Headless software, particularly in the SaaS realm, relies heavily on Application Programming Interfaces (APIs) to operate. APIs are the backbone that allows developers to write code that communicates with the software, sending and receiving data as needed. Most modern systems show about 80 to 100% feature coverage through their APIs, mirroring the capabilities found in their user interfaces.</p><h2 id=\"direct-api-communication\">Direct API Communication</h2><p>With a robust and open API, developers can interact directly with the SaaS system's API layer from their front-end codebase. This approach can be sufficient for many, providing complete control and the ability to tailor the interaction to specific needs.</p><h2 id=\"the-role-of-sdks\">The Role of SDKs</h2><p>However, another layer of abstraction can simplify this interaction: SDKs. Product teams craft these software packages to make their offerings more accessible to developers. They come packed with convenience features such as authentication, content requests, and content modification methods.</p><p>By leveraging an SDK, developers can bypass the intricacies of API structures and achieve rapid development. This leads to a quicker time to market and potentially smoother integration with the SaaS product.</p><p>SDKs are designed with ease of use in mind, handling complex tasks such as visual building or personalization. They encapsulate the necessary logic, so developers don't need to gather pieces of information to feed into the API from different places in their app.</p><p>A well-crafted SDK doesn't lock you into a rigid framework. Many offer plugin architectures, allowing for customization and extension to meet unique project requirements.</p><p>Parallel to SDKs, Command-Line Interfaces (CLIs) offer similar benefits but operate within the command-line environment. They provide shortcuts for tasks that would otherwise require custom code to interact with APIs.</p><h2 id=\"graphql-based-systems-a-case-for-no-sdk\">GraphQL-Based Systems: A Case for No SDK</h2><p>While SDKs offer numerous advantages, it’s important to note that SaaS systems without SDKs can also be highly successful. For instance, GraphQL-based systems are designed to be queried flexibly, negating the need for a traditional SDK.</p><p>With GraphQL, developers can construct complex queries that fetch the data they need in a single request, optimizing performance and reducing overhead. This flexibility allows developers to directly interact with the API in a natural and efficient way, often mitigating the perceived need for an additional SDK layer.</p><h2 id=\"headless-architectures-flexibility-at-a-cost\">Headless Architectures: Flexibility at a Cost</h2><p>Headless architectures are inherently flexible, allowing developers to leverage this flexibility in myriad ways. For example, they might opt to add middleware layers or proxy servers to manage their interactions with the SaaS provider. Such middleware can be beneficial as it allows developers to introduce their caching layers, optimize API requests, and implement additional security measures.</p><p>However, this flexibility comes at a cost. SaaS providers might introduce new features like visual building that depend more heavily on the SDK. In these cases, bypassing the SDK means missing out on these advanced capabilities. Therefore, while headless systems empower developers to tailor their setups extensively, sticking with the SaaS provider's SDK offers the maximum feature set and ensures compatibility with future updates.</p><h2 id=\"the-race-to-the-middle-composable-dxp-and-sdk-importance\">The race to the middle: composable DXP and SDK importance</h2><p>The landscape of digital experience platforms (DXP) is evolving, with a noticeable shift toward composable architectures. In this race to the middle, traditional monolithic systems are increasingly incorporating REST APIs to offer more modular functionalities, while modern headless-only platforms are adding services designed to be more user-friendly for developers and non-developers alike.</p><p>SDKs play an important role in composable DXP by simplifying the integration of these additional features and services, making it easier to build comprehensive digital experiences. Unlike APIs that solely handle data retrieval and modification, SDKs encapsulate a broader set of functionalities essential for a robust DXP. These include advanced features such as personalization, visual building tools, and content editing capabilities. By providing pre-built methods and workflows, SDKs lower the barrier to entry, allowing developers to implement complex interactions with greater ease and speed. They streamline the process of integrating various modular components, ensuring a cohesive and seamless development experience. As a result, SDKs empower developers to focus more on crafting rich digital experiences rather than getting bogged down by intricate API configurations and manual data handling.</p><h2 id=\"contentstack\">Contentstack</h2><p>Take Contentstack as an example. While developers can choose to engage directly with their APIs, the SDK can significantly accelerate the development process. It provides guardrails, ensuring a faster time to market and more robust integrations, particularly for features like timeline, visual editing and personalization, or creating custom apps for content editors to use.</p><p>When Contentstack rolls out new features, SDK users can simply update their SDK version to access these enhancements, bypassing the need to delve into new API documentation.</p><h2 id=\"conclusion\">Conclusion</h2><p>SaaS offerings, especially those like Contentstack, maintain high API coverage for all their system features. This gives developers the choice to either craft their custom solutions or adopt an SDK for greater convenience and speed.</p><p>It is also crucial to recognize that some systems, such as those based on GraphQL, are specifically designed to deliver such flexibility that an SDK becomes redundant. These systems illustrate that the absence of an SDK does not limit the potential for complexity and efficiency within your application.</p><p>The inherent flexibility of headless architectures empowers developers to innovate with middleware layers or proxy servers, adding custom caching and optimization. However, this can sometimes mean forgoing unique features heavily dependent on the provider’s SDK. Generally, adhering to the SaaS provider's SDK ensures you maximize these sophisticated features and enjoy seamless updates.</p><p>Whether you're looking to do your own thing or prefer the streamlined approach of an SDK, the options are there to fit your development style and accelerate your journey to market. Choose the path that best aligns with your development goals and watch your projects thrive.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "understanding-sdks-and-apis",
          "text": "Understanding SDKs and APIs"
        }
      },
      {
        "toc": {
          "html_id": "direct-api-communication",
          "text": "Direct API Communication"
        }
      },
      {
        "toc": {
          "html_id": "the-role-of-sdks",
          "text": "The Role of SDKs"
        }
      },
      {
        "toc": {
          "html_id": "graphql-based-systems-a-case-for-no-sdk",
          "text": "GraphQL-Based Systems: A Case for No SDK"
        }
      },
      {
        "toc": {
          "html_id": "headless-architectures-flexibility-at-a-cost",
          "text": "Headless Architectures: Flexibility at a Cost"
        }
      },
      {
        "toc": {
          "html_id": "the-race-to-the-middle-composable-dxp-and-sdk-importance",
          "text": "The race to the middle: composable DXP and SDK importance"
        }
      },
      {
        "toc": {
          "html_id": "contentstack",
          "text": "Contentstack"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-09-29T12:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_different-approaches-to-visual-editing": {
    "date": "2024-07-25T10:32:48Z",
    "title": "The different approaches to visual editing in headless CMS",
    "canonical_url": "https://timbenniks.dev/writing/choosing-the-right-visual-editor",
    "description": "This article compares different approaches to visual editing in headless CMS platforms, outlining the benefits and tradeoffs of options ranging from basic previews to full WYSIWYG editors.",
    "url": "/writing/different-approaches-to-visual-editing",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1721896213/website/cms_visual_editing_approaches.png",
    "reading_time": "7 min read",
    "uid": "article_entry_uid_different-approaches-to-visual-editing",
    "locale": "en-us",
    "tags": [
      "composable",
      "headless",
      "visual editing",
      "CMS"
    ],
    "created_at": "2024-07-25T10:32:48Z",
    "updated_at": "2024-07-25T10:32:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>This article outlines the benefits and potential downsides of different ways to edit content visually. Headless CMSs are starting to add visual components, from side-by-side previews to WYSIWYG inline editing and a lot in between. Some pure players, like Builder.io and Uniform, decided to start visually and work their way back to CMS-like functionality.</p><p>Now that all marketing is identical, it’s really hard to choose. In this article, I will explain the different approaches to help you make an informed decision.</p><p>Beware, the market changes fast. The vendors mentioned in this video might have changed their offerings since writing this.</p><h2 id=\"tldr-take-the-questionnaire\">TL;DR? Take the questionnaire</h2><p>This questionnaire will help to figure out what you need in terms of visual editing in your CMS. If you want to know how to all works, read the rest of the article below.</p><questionnaire></questionnaire><h2 id=\"the-four-categories-of-visual-editing-in-cms\">The four categories of visual editing in CMS</h2><p>Regarding CMS, the editing experience can vary greatly depending on the platform and the user's specific needs. Let's dive into the different categories of CMS editing experiences, their pros and cons, and some examples of platforms that fit into each category.</p><h3 id=\"category-1-visual-preview\">Category 1: Visual Preview</h3><p>In this category, the CMS form fields and the website are displayed side by side. You can see your website update in real-time as you fill out the form.</p><h4 id=\"notes\">Notes</h4><ul><li><strong>For instant updates</strong>: Requires a front-end SDK.</li><li><strong>For updates on save</strong>: Common in CMSs with strict schema validation rules. Can be done without SDK.</li><li><strong>Preview links</strong>: Some CMSs provide links to a specific build of the front end that queries the draft API, opening in a new tab.</li></ul><h4 id=\"pros\">Pros</h4><ul><li>Ideal for editing domain data.</li><li>Similar to traditional CMS editing but with a potentially better view of the content being edited.</li></ul><h4 id=\"cons\">Cons</h4><ul><li>Can be pretty abstract.</li><li>Editing is not visually driven.</li></ul><h4 id=\"vendor-examples\">Vendor examples</h4><p>Hygraph, Directus, Amplience, Strapi, Contentstack</p><h3 id=\"category-2-contextual-live-editing\">Category 2: Contextual Live Editing</h3><p>This category allows you to click on an element on your site, triggering a sidebar with a CMS form for editing. Sometimes, this redirects you to your CMS interface in a new tab.</p><h4 id=\"notes-1\">Notes</h4><ul><li><strong>Requirements</strong>: A front-end SDK, Vercel’s Stega data, or HTML annotations.</li></ul><h4 id=\"pros-1\">Pros</h4><ul><li>Clicking on an element in the preview website opens the corresponding CMS form for editing.</li><li>A significant improvement over side-by-side previews.</li></ul><h4 id=\"cons-1\">Cons</h4><ul><li>Feels like a WYSIWYG, but isn't.</li><li>Developers may need to put in extra effort to implement design-like features.</li></ul><h4 id=\"vendor-examples-1\">Vendor examples</h4><p>Sanity, Storyblok, kontent.ai</p><h3 id=\"category-3-almost-wysiwyg\">Category 3: Almost WYSIWYG</h3><p>This category offers block-based visual editing, providing a more structured, pattern-like approach. It is based on a design system.</p><h4 id=\"notes-2\">Notes</h4><ul><li><strong>Requirements</strong>:  A front-end SDK.</li><li><strong>Additional Features</strong>: Some platforms offer external API data managing, mapping, and editing. Also seen are personalization and sitemap management.</li></ul><h4 id=\"pros-2\">Pros</h4><ul><li>Native features for WYSIWYG-style editing with guardrails to stay within the design system specifications.</li></ul><h4 id=\"cons-2\">Cons</h4><ul><li>Some vendors have complex setups.</li><li>Others are easier to implement but require a bigger buy-in as they handle external data ingestion and mapping.</li></ul><h4 id=\"vendor-examples-2\">Vendor examples</h4><p>Uniform, Contentful Studio, Sitecore XM, builder.io, Plasmic, Netlify Create</p><h3 id=\"category-4-full-wysiwyg\">Category 4: Full WYSIWYG</h3><p>In this category, you design like a designer, and a website is created. All CSS properties, animations, and other design elements are available.</p><h4 id=\"notes-3\">Notes</h4><ul><li>The platform controls your codebase and hosting.</li></ul><h4 id=\"pros-3\">Pros</h4><ul><li>Easy to get started; anyone can design something.</li></ul><h4 id=\"cons-3\">Cons</h4><ul><li>Hard to scale.</li><li>A mix of design data vs. domain data.</li><li>Content not reusable.</li><li>Code and hosting are provided by the platform.</li></ul><h4 id=\"vendor-examples-3\">Vendor examples</h4><p>Wix, Weweb, Webflow, Squarespace</p><p>Each of these categories offers unique features and caters to different needs. Whether you prioritize real-time updates, contextual editing, structured design systems, or full design freedom, there's likely a CMS that fits your requirements.</p><h2 id=\"which-category-is-good-for-your-brand\">Which category is good for your brand?</h2><p>There is a balance to be found based on your needs for data cleanliness, longevity of data, and how many channels you work in versus content editor experience and ease of use in terms of publishing.</p><p>Let’s discuss the difference between <em>domain content</em> and <em>design content</em> and why it is so important in choosing visual editing vendors.</p><h3 id=\"domain-content\">Domain content</h3><p><strong>Definition:</strong> Domain content refers to structured, clean, and semantic data that defines the core information and properties of a specific domain (e.g., products, users, articles) without concern for its presentation. Domain content sits at the brand's core and can be reused in many different contexts.</p><p><strong>Examples:</strong><br>\nEvents websites like Eventbrite that store information including:</p><ul><li>Event name</li><li>Location</li><li>Dates</li><li>Attendees</li><li>Organizing company</li></ul><p><strong>Characteristics:</strong></p><ul><li>Strict data-focused schema definitions (no fields for presentation features)</li><li>Focuses on the \"what\" (content and information)</li><li>Reusable across different channels and platforms</li><li>Maintains longevity and integrity over time</li></ul><p><strong>Real-world:</strong> You don’t expect payment providers to have data about credit cards that explain how big the logo of a certain credit card is shown on a user's checkout screen. That's the job of the designer and the front-end implementation. Credit card information is used worldwide in different places, and it does not care about how something looks; it is the domain data of the credit card.</p><h3 id=\"design-content\">Design Content</h3><p><strong>Definition:</strong> Design content refers to the specific instructions, order, and styles for presenting domain data in a front-end application.</p><p><strong>Examples:</strong><br>\nPresentation styles, such as:</p><ul><li>The product title should be a &#x3C;h1> tag in red color</li><li>Only display the product title and image on mobile devices, hiding the description</li><li>Adding animations or specific font styles to the text</li></ul><p>Layout instructions, including:</p><ul><li>Grid configurations</li><li>Component alignments</li><li>Display rules for different screen sizes</li></ul><p><strong>Characteristics:</strong></p><ul><li>Focuses on the \"how\" (visual representation and styling)</li><li>Tends to be more volatile and subject to frequent changes</li><li>Tightly coupled with the current design and presentation logic</li></ul><p><strong>Real-world:</strong> A banner component with an image, a title, and a description might look different in different contexts. Sometimes you want an image, and sometimes you don’t. Selecting which banner variant you want to show is design content; the content (image, title, description) comes from a CMS and is domain content. The banner could be used in many places and look different each time.</p><h2 id=\"lets-choose-a-category-based-on-domain-content-versus-design-content\">Let’s choose a category based on domain content versus design content</h2><p>The less you mess with domain-specific content, the more reusable it is and the longer it lasts. If you start mixing your domain content with design content, you will be working yourself into a corner regarding data flexibility and governance down the line. What if you have a huge multi-tenant project, and someone in France decides to remove a checkbox they don't use, and everything is now broken on the US website?</p><p>However, focusing too much on the strictness of using only domain content will make it infinitely more complex for content editors who need to build a website with that content. Mixing domain content with design content could be your best bet to make everyone happy. Proper governance is a must here.</p><h2 id=\"concluding-it-depends\">Concluding: it depends.</h2><p>Different categories offer different benefits and drawbacks based on your company's approach to data management, your need for ever-changing pages, and your technical abilities.</p><p>There are factors other than how you want to manage your content, like how much complexity you want in your front-end channels (websites, apps, kiosks, etc). Some pure players like Uniform pride themselves on the saying: “more clicks, less code,” and they store a lot on the platform. Others, like Netlify Create, focus on code first and do not own any of your brands’ data. To learn more about that, I suggest you read: <a href=\"https://timbenniks.dev/writing/choosing-the-right-visual-editor\" rel=\"nofollow\">https://timbenniks.dev/writing/choosing-the-right-visual-editor</a></p><p>Rather than giving you twenty examples of use cases, take the questionnaire at the top of this article and see how you score.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "tldr-take-the-questionnaire",
          "text": "TL;DR? Take the questionnaire"
        }
      },
      {
        "toc": {
          "html_id": "the-four-categories-of-visual-editing-in-cms",
          "text": "The four categories of visual editing in CMS"
        }
      },
      {
        "toc": {
          "html_id": "which-category-is-good-for-your-brand",
          "text": "Which category is good for your brand?"
        }
      },
      {
        "toc": {
          "html_id": "lets-choose-a-category-based-on-domain-content-versus-design-content",
          "text": "Let’s choose a category based on domain content versus design content"
        }
      },
      {
        "toc": {
          "html_id": "concluding-it-depends",
          "text": "Concluding: it depends."
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-07-25T10:32:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_how-i-supercharched-my-websites-speed": {
    "date": "2024-07-01T13:05:48Z",
    "title": "How I supercharched my website's speed",
    "canonical_url": "https://timbenniks.dev/writing/how-i-supercharched-my-websites-speed",
    "description": "In this blog post, I want to share how I transformed my website into the fastest site I've ever built. I'll walk you through the steps, my unconventional decisions, and the tools I used to achieve this feat.",
    "url": "/writing/how-i-supercharched-my-websites-speed",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1719837465/website/fast-website-poster.jpg",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_how-i-supercharched-my-websites-speed",
    "locale": "en-us",
    "tags": [
      "performance",
      "webdev",
      "nuxt",
      "RUM"
    ],
    "created_at": "2024-07-01T13:05:48Z",
    "updated_at": "2024-07-01T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>In this blog post, I want to share how I transformed my website, <a href=\"https://timbenniks.dev\" rel=\"nofollow\">timbenniks.dev</a>, into the fastest site I've ever built. I'll walk you through the steps, my unconventional decisions, and the tools I used to achieve this feat.</p><p><img alt=\"Before and after\" class=\"fancy-image-alt\" loading=\"lazy\" provider=\"cloudinaryNative\" sizes=\"sm:100vw\" src=\"/website/performance-before-after-1.jpg\" width=\"1280\"></p><h2 id=\"choosing-the-right-framework\">Choosing the right framework</h2><p>I'm a Nuxt3 ambassador, so I used it for this project. However, all the tips and tricks below can also be used with other frameworks.</p><h4 id=\"want-to-see-this-as-a-video\">Want to see this as a video?</h4><youtube title=\"The fastest website I ever built\" videoid=\"F6WjICjSJO0\"></youtube><h3 id=\"how-to-use-a-meta-framework\">How to use a meta-framework</h3><p>Many developers stick to the frameworks' default settings, which contain many great features around best practices. However, I discovered I could significantly boost my site's performance by tweaking the settings and stripping away the unnecessary parts. Not doing this will land you in the solid 90% of awesomeness, but if you want to get close to 100%, you'll have to open Pandora's box.</p><h2 id=\"going-full-static\">Going full static</h2><p>Instead of following the current trend of using server components and ISR caching, I took a step back and went full static. This means all the pages on my site are pre-generated and served from a CDN edge near you, resulting in lightning-fast load times.</p><p>When hosting on platforms like Vercel or Netlify, using server components with ISR caching often involves running Nuxt 3 inside a serverless function, potentially introducing cold start times and some overhead. To be fair, I'm not entirely sure what forces are at play here, but my site's static render performed way better than the ISR cached version.</p><h2 id=\"optimizing-for-non-render-blocking\">Optimizing for non-render blocking</h2><p>The key to a fast website is ensuring the browser can display content as quickly as possible. Despite the advantages of <a href=\"https://www.youtube.com/watch?v=f5F7N2kc7hQ\" rel=\"nofollow\">HTTP 2.0 and multiplexing</a>, preloading too many files could still cause issues. For my site, Nuxt preloaded a combination of 25 `js` and `JSON` files and a few render-block CSS files. These all competed, making the <a href=\"https://web.dev/articles/optimize-lcp\" rel=\"nofollow\">LCP</a> higher than needed.</p><p>By using the <code class=\"\">features.noScripts</code> I saw a big speed improvement in the Nuxt config, which removes all JavaScript and payload files. However, you introduce some problems when turning off Nuxt's native goodness. No more JS on your website and no more preloading of links used in <code class=\"\">&#x3C;nuxt-link /></code> tags.</p><h2 id=\"preloading-with-speculation-rules\">Preloading with speculation rules</h2><p>Turning off scripts has a downside—you lose some of Nuxt's handy functionalities, like pre-rendering linked pages for faster subsequent page loads. To address this, I utilized a native browser feature called speculation rules, which allowed me to pre-render top-level URLs without relying on Nuxt's scripts.</p><pre class=\"language-html shiki shiki-themes github-dark\" code=\"<script type=&#x22;speculationrules&#x22;>\n{\n  &#x22;prerender&#x22;: [{\n    &#x22;urls&#x22;: [&#x22;/&#x22;, &#x22;/about&#x22;, &#x22;/videos&#x22;, &#x22;/writing&#x22;, &#x22;/speaking&#x22;, &#x22;/livestreams&#x22;, &#x22;/presskit&#x22;, &#x22;/alive-and-kicking&#x22;, &#x22;/uses&#x22;]\n   }]\n}\n</script>\n\" language=\"html\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#B392F0\"> type</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"speculationrules\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">{\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">  \"prerender\": [{\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">    \"urls\": [\"/\", \"/about\", \"/videos\", \"/writing\", \"/speaking\", \"/livestreams\", \"/presskit\", \"/alive-and-kicking\", \"/uses\"]\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">   }]\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p><img alt=\"Before and after\" class=\"fancy-image-alt\" loading=\"lazy\" provider=\"cloudinaryNative\" sizes=\"sm:100vw\" src=\"/website/preload-before-after.jpg\" width=\"1280\"></p><h2 id=\"simple-vanilla-javascript\">Simple vanilla JavaScript</h2><p>This website doesn't need much JavaScript, as it's just a portfolio site. I wrote a few lines of inline vanilla JavaScript to set up analytics, RUM score tracking, and toggle a mobile navigation CSS class. This approach is much more efficient than loading a full JavaScript framework for a few features. Note that Nuxt supports island architecture now, and use that if you need more JS than I do.</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"useHead({\n  script: [\n    {\n      innerHTML: &#x60;\n        document.querySelector(&#x27;.nav-toggle&#x27;).addEventListener(&#x27;click&#x27;, ()=> {\n          document.getElementById(&#x27;nav&#x27;).classList.toggle(&#x27;open&#x27;);\n          document.querySelector(&#x27;.nav-toggle&#x27;).classList.toggle(&#x27;open&#x27;);\n        });&#x60;,\n      tagPosition: &#x22;bodyClose&#x22;,\n    },\n    {\n      defer: true,\n      src: &#x22;/_vercel/speed-insights/script.js&#x22;,\n    },\n    {\n      defer: true,\n      src: &#x22;/_vercel/insights/script.js&#x22;,\n    },\n    {\n      innerHTML: &#x60;\n        window.si = window.si || function () { (window.siq = window.siq || []).push(arguments); };\n        window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };\n      &#x60;,\n    },\n  ],\n});\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#B392F0\">useHead</span><span style=\"--shiki-default:#E1E4E8\">({\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  script: [\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    {\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">      innerHTML: </span><span style=\"--shiki-default:#9ECBFF\">`\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#9ECBFF\">        document.querySelector('.nav-toggle').addEventListener('click', ()=> {\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#9ECBFF\">          document.getElementById('nav').classList.toggle('open');\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#9ECBFF\">          document.querySelector('.nav-toggle').classList.toggle('open');\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#9ECBFF\">        });`</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">      tagPosition: </span><span style=\"--shiki-default:#9ECBFF\">\"bodyClose\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">    {\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">      defer: </span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">      src: </span><span style=\"--shiki-default:#9ECBFF\">\"/_vercel/speed-insights/script.js\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">    {\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">      defer: </span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">      src: </span><span style=\"--shiki-default:#9ECBFF\">\"/_vercel/insights/script.js\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">    {\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">      innerHTML: </span><span style=\"--shiki-default:#9ECBFF\">`\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#9ECBFF\">        window.si = window.si || function () { (window.siq = window.siq || []).push(arguments); };\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#9ECBFF\">        window.va = window.va || function () { (window.vaq = window.vaq || []).push(arguments); };\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#9ECBFF\">      `</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">  ],\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">});\n</span></span></code></pre><h2 id=\"streamlining-css\">Streamlining CSS</h2><p>I consolidated all vue component CSS into a single file and instructed Nuxt to inline the CSS with <code class=\"\">features.inlineStyles: true</code>. This eliminated any render blocking caused by external CSS files, as the styles are now directly included in the HTML head.</p><h2 id=\"handling-svgs-and-fonts\">Handling SVGs and fonts</h2><p>Initially, inlining SVG throughout the site seemed like a good idea, but it added to the rendering workload on the main browser thread. By converting SVGs into separate files and lazy loading them, I reduced the rendering demands, and the website felt faster on lower-end devices.</p><p>For fonts, I opted for a combination of web-safe fonts for body text and a custom font for titles. This approach and Daniel Roe's Nuxt/fonts module helped me maintain a rich design without sacrificing performance. When all fonts were custom fonts, the cumulative layout shift went up. For example, I had buttons that would go from two lines to one line when the font loaded, and this caused the layout to move during the page load. Removing custom fonts from these critical parts helped the performance.</p><h2 id=\"image-optimization-with-cloudinary\">Image optimization with Cloudinary</h2><p>Images can significantly affect load times, so I used Cloudinary to ensure they're delivered optimally based on the user's context. They offer automatic quality and file type selections that are the best in the business. Of course, I used the <code class=\"\">nuxt/image</code> module to make my images responsive. Lazy loading images below the fold and setting a high <code class=\"\">fetchpriority</code> and <code class=\"\">loading=\"eager\"</code> for key images further improved load times.</p><h2 id=\"conclusion\">Conclusion</h2><p>By carefully considering each aspect of my website and making targeted optimizations, I created a site that's fast and visually appealing. These changes have made a substantial difference, and I'm thrilled with the results. Thank you for following along on this optimization journey.</p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>",
    "tocs": [
      {
        "toc": {
          "html_id": "choosing-the-right-framework",
          "text": "Choosing the right framework"
        }
      },
      {
        "toc": {
          "html_id": "going-full-static",
          "text": "Going full static"
        }
      },
      {
        "toc": {
          "html_id": "optimizing-for-non-render-blocking",
          "text": "Optimizing for non-render blocking"
        }
      },
      {
        "toc": {
          "html_id": "preloading-with-speculation-rules",
          "text": "Preloading with speculation rules"
        }
      },
      {
        "toc": {
          "html_id": "simple-vanilla-javascript",
          "text": "Simple vanilla JavaScript"
        }
      },
      {
        "toc": {
          "html_id": "streamlining-css",
          "text": "Streamlining CSS"
        }
      },
      {
        "toc": {
          "html_id": "handling-svgs-and-fonts",
          "text": "Handling SVGs and fonts"
        }
      },
      {
        "toc": {
          "html_id": "image-optimization-with-cloudinary",
          "text": "Image optimization with Cloudinary"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-07-01T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_choosing-the-right-visual-editor": {
    "date": "2024-06-28T13:05:48Z",
    "title": "Choosing the right visual editor for your website: Platform-First vs. Code-First",
    "canonical_url": "https://timbenniks.dev/writing/choosing-the-right-visual-editor",
    "description": "This post explores two main types of visual editors: platform-first and code-first. I compare their functionalities, pros, and cons to help you choose the right solution for your development needs.",
    "url": "/writing/choosing-the-right-visual-editor",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1719585541/website/poster.png",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_choosing-the-right-visual-editor",
    "locale": "en-us",
    "tags": [
      "architecture",
      "dxp",
      "dxc",
      "composable"
    ],
    "created_at": "2024-06-28T13:05:48Z",
    "updated_at": "2024-06-28T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Visual editors in or outside CMS are gaining traction for their intuitive interfaces and powerful features. However, not all visual editors are created equal. Today, I want to discuss the two main types of visual editors and their respective pros and cons to help you make an informed decision about your development needs.</p><h2 id=\"the-rise-of-visual-editors-in-composable-architectures\">The rise of visual editors in composable architectures</h2><p>Visual editors have become a cornerstone in modern web design, particularly within composable architectures. These architectures are akin to a puzzle, integrating various content sources—from CMSs and e-commerce systems to payment and digital asset management—into a cohesive website. Visual editors simplify the editing process, allowing content editors to make changes without deep knowledge of the underlying platforms.</p><h2 id=\"the-two-big-buckets-of-visual-editors\">The two big buckets of visual editors</h2><p>Visual editors generally fall into two categories: platform-first and code-first. Let's explore what each of these entails.</p><h3 id=\"platform-first-visual-editors\">Platform-first visual editors</h3><p>Platform-first visual editors are all about providing a comprehensive service. They offer a web interface that connects all your data sources, allowing you to edit your website components—from hero’s to lists—visually within the platform.</p><h4 id=\"how-it-works\">How it works:</h4><ul><li>You map your website components to the platform's configuration.</li><li>Data source connections are managed within the platform.</li><li>Select a field (prop) in a component and choose the correct data from a connected API.</li><li>When you save your changes, the platform stores the composition data and exposes it as a REST API.</li></ul><p>This approach keeps your front-end code clean and straightforward. Your website simply retrieves composition data from the visual editor's platform and renders it accordingly.</p><h3 id=\"code-first-visual-editors\">Code-first visual editors</h3><p>On the flip side, code-first visual editors take a minimalist approach. They don't store any data themselves; instead, they provide the tools for visual editing while leaving data management to your front-end code.</p><h4 id=\"how-it-works-1\">How it works:</h4><ul><li>Your front-end code establishes connections to data sources.</li><li>The visual editor uses these connections through configurations in your codebase.</li><li>HTML annotations enable inline editing, allowing changes to be written back to the CMS.</li></ul><p>This method gives you full control over your data and keeps your website independent from the visual editor.</p><h2 id=\"pros-and-cons-of-platform-first-and-code-first-visual-editors\">Pros and cons of platform-first and code-first visual editors</h2><h3 id=\"platform-first\">Platform-First</h3><p><strong>Pros:</strong></p><ul><li>The platform's interface allows for easy configuration.</li><li>Front-end code remains simple and uncluttered.</li><li>The visual editor platform provides many built-in features.</li></ul><p><strong>Cons:</strong></p><ul><li>You become reliant on the platform for your website's functionality. It’s a relatively big buy-in.</li><li>Removing the platform from your website leaves you with little to no data.</li></ul><h3 id=\"code-first\">Code-First</h3><p><strong>Pros:</strong></p><ul><li>Your website remains functional with or without the visual editor.</li><li>You maintain complete control over your data and how it's managed.</li></ul><p><strong>Cons:</strong></p><ul><li>Due to not storing any data, the lack of on-platform features can limit your editing capabilities.</li><li>Front-end code becomes more complex, requiring a skilled technical team.</li></ul><h2 id=\"making-the-right-choice-for-your-brand-or-agency\">Making the Right Choice for Your Brand or Agency</h2><p>Deciding between a platform-first or code-first visual editor depends on your specific needs and resources. A platform-first solution might be the way to go if you value simplicity and built-in features. However, if control and independence are your priorities, then a code-first editor will serve you better.</p><p>Consider your team's technical expertise, your willingness to rely on a third-party platform, and the level of complexity you're prepared to handle in your front-end code. By understanding the nuances of each type of visual editor, you can choose to align with your brand's or agency's goals.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "the-rise-of-visual-editors-in-composable-architectures",
          "text": "The rise of visual editors in composable architectures"
        }
      },
      {
        "toc": {
          "html_id": "the-two-big-buckets-of-visual-editors",
          "text": "The two big buckets of visual editors"
        }
      },
      {
        "toc": {
          "html_id": "pros-and-cons-of-platform-first-and-code-first-visual-editors",
          "text": "Pros and cons of platform-first and code-first visual editors"
        }
      },
      {
        "toc": {
          "html_id": "making-the-right-choice-for-your-brand-or-agency",
          "text": "Making the Right Choice for Your Brand or Agency"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-06-28T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_team-is-key-when-going-headless": {
    "date": "2024-04-29T13:05:48Z",
    "title": "Your team is the key to success when going headless",
    "canonical_url": "https://hygraph.com/blog/page-builder-cms-vs-data-modeler-cms",
    "description": "People's choices, ability to roll with the punches, and how well they play in the sandbox together bring the magic of headless technology to life.",
    "url": "/writing/team-is-key-when-going-headless",
    "image": "https://media.graphassets.com/icyDJDb6Shmzx7rhX4bG",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_team-is-key-when-going-headless",
    "locale": "en-us",
    "tags": [
      "architecture",
      "dxp",
      "composable"
    ],
    "created_at": "2024-04-29T13:05:48Z",
    "updated_at": "2024-04-29T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>In web development, we've seen a massive shift from old-school, bulky systems to something sleeker and more piecemeal, known as headless architecture. But this change isn't just about chasing the next shiny tech trend. It's about taking a step back and rethinking how we tackle development projects.</p><p>What drives this transformation isn't the tech itself but the groups of people huddled around their computers, making it all work. From personal experience building massive multi-tenant projects, I know people’s choices, ability to roll with the punches, and how well they play in the sandbox together bring the magic of headless technology to life.</p><h2 id=\"from-monoliths-to-microservices-a-brief-history\">From monoliths to microservices: a brief history</h2><p>To appreciate the significance of this shift, we need to understand where we come from. Traditional web development often relied on all-in-one solutions—monolithic systems that bundled all functionalities together. While this approach had its simplicity and initial setup speed advantages, it struggled with flexibility, scalability, and updating individual components without affecting the whole system.</p><p>Headless technology is characterized by its <a href=\"https://hygraph.com/blog/backend-agnostic-architecture\" rel=\"nofollow\">API-first approach</a>, which separates the back and front end. This separation allows developers to use the best tools for each job, independently updating and scaling parts of the system. However, to truly leverage the potential of this <a href=\"https://hygraph.com/blog/modular-content\" rel=\"nofollow\">modular approach</a>, a team's role becomes exponentially more important.</p><h2 id=\"the-crucial-role-of-teams\">The crucial role of teams</h2><p>Imagine developing a complex web application as assembling a puzzle. Each piece represents a headless component—a small, focused tool or service that performs a specific function. The challenge isn't finding these pieces; it's knowing which piece goes where and how they should interconnect. This is where a team's collective decision-making, technical agility, and integrative thinking come into play.</p><p>A team navigating a <a href=\"https://hygraph.com/blog/headless-architecture\" rel=\"nofollow\">headless architecture</a> must evaluate the best mix of tools and services to create a cohesive and efficient system. This process requires a deep understanding of the project's goals, the capabilities of different headless components, and how to integrate them seamlessly. It's a tall order and one that demands a multifaceted skill set from the team.</p><p>Adopting headless technology introduces a level of complexity that can be daunting. Teams must choose from many services, each with a learning curve and integration challenges. Moreover, the diversity of skills required—from backend APIs to frontend development and user experience design—calls for effective communication and collaboration within the team.</p><p>Building a successful headless technology project is akin to cable managing your desk. Each cable plays a distinct part but must be managed so you know where it goes. As you might know from your desk, this is no small feat and speaks to cultivating a strong team dynamic and a continuous learning and adaptation culture.</p><h2 id=\"crafting-the-ideal-headless-technology-team\">Crafting the ideal headless technology team</h2><p>So, what does an effective team for headless technology look like? Mainly, it's diverse, comprising members with expertise in different aspects of development—from server-side logic to client-facing design. But technical skills alone are not enough. Team members must also be adaptable and willing to explore new tools and approaches as the project evolves.</p><p>The team needs to be forward-thinking and always looking for emerging headless components that could enhance the project. This proactive mindset ensures that the project stays at the cutting edge, leveraging the full potential of headless technology.</p><p>From personal experience, I have learned that combining individuals with knowledge and grit will improve pragmatic decision-making. You don’t want idealists who choose a particular technology just to use it. Pragmatism and sometimes combining the modern with the legacy will bring you the most success.</p><p>A team must have decision-making power and trust from upper management to excel in building with headless technology. This trust is foundational in fostering a culture where technical ownership is bottom-up, meaning that those who are hands-on with the technology—the developers, designers, and architects—can make decisions regarding the tools, architectures, and processes they employ.</p><p>This approach expedites the development process, eliminating bottlenecks often caused by top-down decision-making, and enhances innovation and job satisfaction among team members. When a team knows that management believes in their expertise and is invested in their judgment, it empowers them to explore, innovate, and drive technically sound solutions and closely aligned with the project's objectives.</p><h2 id=\"preparing-your-team-for-a-headless-future\">Preparing your team for a headless future</h2><p>As headless technology continues to gain traction, preparing your team for success in this area is crucial.</p><p>Invest in training and development to ensure your team members are updated with the latest tools and practices.</p><p>Foster a culture of flexibility and innovation, encouraging team members to experiment with new solutions and learn from successes and failures.</p><p>Align your team's efforts with the broader organizational goals, ensuring that every decision and integration serves the project's objectives.</p><p>By doing so, you'll leverage the benefits of headless technology and empower your team to create innovative, user-centric solutions.</p><h2 id=\"whats-next\">What’s next</h2><p>The shift to headless technology marks a significant evolution in web development, offering unparalleled flexibility and scalability. However, the true potential of this approach is unlocked not by the technology itself but by the teams that implement it. Their decisions, adaptability, and collaborative effort turn the modular pieces of headless technology into a cohesive, high-performing solution.</p><p>As we look to the future, the message is clear: invest in your teams. Equip them with the skills, tools, and mindset they need to thrive in a headless technology landscape. Remember that your team is your most valuable asset. Their expertise, creativity, and collaborative spirit are the keys to unlocking this innovative approach's full potential. Together, you can navigate the complexities of headless technology and craft digital experiences that stand apart. Uncle Tim out…</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "from-monoliths-to-microservices-a-brief-history",
          "text": "From monoliths to microservices: a brief history"
        }
      },
      {
        "toc": {
          "html_id": "the-crucial-role-of-teams",
          "text": "The crucial role of teams"
        }
      },
      {
        "toc": {
          "html_id": "crafting-the-ideal-headless-technology-team",
          "text": "Crafting the ideal headless technology team"
        }
      },
      {
        "toc": {
          "html_id": "preparing-your-team-for-a-headless-future",
          "text": "Preparing your team for a headless future"
        }
      },
      {
        "toc": {
          "html_id": "whats-next",
          "text": "What’s next"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-04-29T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_page-builder-cms-vs-data-modeler-cms": {
    "date": "2024-03-12T13:05:48Z",
    "title": "CMS Showdown: do you need a page builder or a data modeler?",
    "canonical_url": "https://hygraph.com/blog/page-builder-cms-vs-data-modeler-cms",
    "description": "Explore the differences between page builder and data modeler CMSs, their unique features, and how they cater to varying organizational needs.",
    "url": "/writing/page-builder-cms-vs-data-modeler-cms",
    "image": "https://media.graphassets.com/NzxmjCxvTRqg3sTb9JFj",
    "reading_time": "7 min read",
    "uid": "article_entry_uid_page-builder-cms-vs-data-modeler-cms",
    "locale": "en-us",
    "tags": [
      "architecture",
      "dxp",
      "composable"
    ],
    "created_at": "2024-03-12T13:05:48Z",
    "updated_at": "2024-03-12T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>The digital age propels content to the forefront, transforming it from mere marketing material into a valuable business asset. As online consumption surges, organizations elevate their content to a critical commodity.</p><p>Varying in the frequency of changes and complexity, organizations can be roughly divided into two categories, each with bespoke CMS requirements. One group focuses on volatile/unstructured content, is heavily design-driven, and constantly morphs based on marketing motions, commonly called page builder CMSs. The other group focuses on robust and stable content, handling complex data models, and content longevity, which we consider data modelers.</p><p>To cater to the unique requirements of these two distinct groups, CMS providers have developed a tailored set of features for each, aligning themselves more towards one group or the other (although there is a gray area with overlapping features).</p><p>At Hygraph, we recently <a href=\"https://hygraph.com/resources/future-of-content\" rel=\"nofollow\">interviewed over 400 tech leaders</a> about the future of content and how their CMS handles their needs. This is a quick snapshot of the key statistics:</p><ul><li>84% feel their CMS hinders the organization from unlocking content’s full value</li><li>80% of respondents expressed concerns about future-proofing their existing CMS</li><li>91% of tech leaders are dealing with siloed content</li><li>92% find it challenging to deliver content from various sources to multiple channels</li></ul><h2 id=\"our-findings-led-us-to-the-following-not-all-content-is-created-equal\">Our findings led us to the following: not all content is created equal.</h2><p>Let’s introduce some distinct personas for the types of content we are about to discuss. Meet Gregor, the cake baker, and Grégoire, the cake decorator. Gregor and Grégoire work in a cake shop but have slightly different jobs with some overlap. Gregor bakes the cakes, and Grégoire decorates them. These two guys represent the content types we will discuss below.</p><p><img alt=\"Cake baker vs cake decorator. Which CMS style are you?\" src=\"https://media.graphassets.com/cXRNjBjhQwiPFHZkx9Bz\" title=\"Cake baker vs cake decorator. Which CMS style are you?\"></p><h3 id=\"domain-content\">Domain Content</h3><p>Domain content is like cake baking; this is Gregor’s primary focus. So, what is domain content exactly?</p><p>Domain content refers to structured and schema-driven content that is essential for organizations in the long term. Examples of domain content include product catalogs, pricing information, inventory lists, movie databases, customer records, and any other data that is crucial for the functioning of a business or organization. A CMS focused on domain content is similar to a database but has a much friendlier editing and configuration interface.</p><p>For Gregor, the baker, this fits his job description. He creates the base cake and whatever variants he needs, which will be used in the future, and sets up processes in his kitchen to bake cakes flexibly and with agility toward changes in ingredients.</p><p>By <a href=\"https://hygraph.com/blog/structured-content\" rel=\"nofollow\">structuring content meaningfully</a>, brands can ensure consistency, efficiency, and reusability across different platforms and channels. Well-structured data makes building an organization's future easier, implementing multi-tenancy, changing where the data is stored, and modifying the domain model.</p><p><img alt=\"Domain content is like cake baking\" src=\"https://media.graphassets.com/bQB6SVBHQsCrzPdd1k98\" title=\"Domain content is like cake baking\"></p><p>CMS providers need to integrate specific features to cater to domain content effectively. These features should include:</p><ol><li><strong>Complex Custom Content Types:</strong> CMS systems should offer the flexibility to define custom content types that align with the unique needs of each domain. This allows builders to create and manage structured data according to their requirements.</li><li><strong>Data Modeling Capabilities:</strong> CMS systems should provide robust content modeling capabilities that enable builders to establish relationships between different content types. This allows for the creation of complex data structures and the ability to query and retrieve data in a structured manner.</li><li><strong>Content Versioning and Workflow Management:</strong> CMS systems must support content versioning and workflow management functionalities to ensure proper governance and control over domain content. This includes content approval workflows, history tracking, and the ability to revert to previous versions.</li><li><strong>Integration with External Systems:</strong> CMS systems should be able to integrate with external systems and databases to fetch and sync domain content. This allows for seamless connectivity with other business tools and ensures that the content remains consistent across different platforms.</li><li><strong>Robust API:</strong> As domain content is also used in applications and not just marketing websites, developers expect a high standard of API functionality and non-functional aspects such as performance, latency, availability, and throughput.</li></ol><p>By incorporating these features, CMS providers can empower organizations to manage and leverage domain content effectively, ultimately enhancing the overall performance and functionality of their digital experiences.</p><h3 id=\"volatile-content\">Volatile Content</h3><p>volatile content like cake decorating and this is Grégoire’s, primary focus. Let’s define volatile content.</p><p>In the context of this article, volatile content refers to content that undergoes frequent changes and is highly dynamic. It is characterized by its design-focused nature and the need for constant updates to align with marketing activities.</p><p>Grégoire’s cake decorating is very similar to volatile content. He is design-focused, changes his design almost every cake, and uses exactly the tools he needs to do precision work. He makes cake art, just like marketers and designers make digital art.</p><p>CMS vendors have introduced page builder functionality to address the challenges of volatile content. These features are specifically designed to meet the needs of marketing teams struggling with headless CMS's abstract nature. Page builders excel in providing a non-technical interface that allows marketers to effortlessly create, edit, and customize content. A CMS with page-builder features strongly emphasizes previewing work, eliminating the need for abstract insights into data schemas for content editors.</p><p><img alt=\"Grégoire’s cake decorating is very similar to volatile content\" src=\"https://media.graphassets.com/RLCogIAcS0eR8S6R4Jvo\" title=\"Grégoire’s cake decorating is very similar to volatile content\"></p><p>A CMS page builder focuses on the following features to make volatile content easy to manage:</p><ol><li><strong>Non-technical Interface:</strong> A page builder provides a user-friendly interface that allows marketers and content editors to create, edit, and customize content without requiring extensive technical knowledge.</li><li><strong>Drag-and-Drop Functionality:</strong> Page builders offer drag-and-drop functionality, enabling users to arrange and rearrange content elements on a page quickly.</li><li><strong>Real-time Preview:</strong> Page builders emphasize real-time previewing, allowing users to see how their changes will look on the live website before publishing.</li><li><strong>Customization Options:</strong> Page builders provide a range of customization options, such as selecting different layouts, choosing fonts and colors, and adding multimedia elements, allowing users to create visually appealing and engaging content.</li></ol><p>There are various CMS page builders, from hyper-design-focused to more structured-leaning.</p><h2 id=\"square-peg-round-hole\">Square peg, round hole?</h2><p>A practical example: <strong>volatile content is usually about a product, whereas domain content is the product</strong>. Or, to stick with our cake-baking analogy, volatile content <em>decorates</em> the cake, and domain content is <em>the cake</em> that gets decorated.</p><p>When comparing volatile content and domain content, it is evident that they have distinct feature requirements in a CMS. Volatile content, characterized by frequent editorial changes and a design-focused nature, necessitates page builder functionality within a CMS. This allows marketers and content editors to easily create, edit, and customize content without abstract data model knowledge.</p><p>On the other hand, domain content, consisting of structured and schema-driven information essential for long-term organization functioning, requires other capabilities within a CMS. The primary users of domain content are not marketers but data specialists in their field (product management, search data enrichment, etc).</p><p>The required CMS feature sets for handling volatile and domain content differ significantly. Both approaches also have their drawbacks. Page builders primarily focus on design and do not cater to the abstract nature required for scaling content. On the other hand, domain data CMSs mainly focus on abstract content modeling and lack the design focus needed to handle volatile content.</p><h2 id=\"the-intersection\">The Intersection</h2><p>Catering to volatile and domain content within the same CMS can be challenging. However, if done well, organizations can achieve significant success regarding process efficiency and content output.</p><p>CMS providers can benefit by choosing a primary focus while offering some support for the other types of content. This approach ensures versatility and flexibility within the CMS, allowing users to handle diverse content requirements without compromising the core focus.</p><p>To throw back at our cake shop analogy: if a cake shop has both cake bakers and decorators or a few folks with a specialty but with an interest and a bit of skill in the other practice, they will make the best cakes and have more success.</p><p>At Hygraph, we have a robust feature set regarding <a href=\"https://hygraph.com/docs/api-reference/schema/models\" rel=\"nofollow\">domain data modeling</a> and <a href=\"https://hygraph.com/docs/getting-started/fundamentals/content-federation\" rel=\"nofollow\">Content Federation</a>. With the introduction of components and the upcoming live preview, Hygraph comfortably accommodates organizations with all their complex data models <em>and</em> campaign pages within the same platform. We bake delicious cakes!</p><h2 id=\"concluding\">Concluding</h2><p>Now that you know more about the two extremes of headless CMS feature offerings, where do you land with your organization? Are you in need of a page builder or a data modeler? Which baking Greg do you need? Or there is a grey area where you need solid data modeling but with some page building or vice versa.</p><p>There are many options to consider here, and with that in mind, it’s always good to look for content created by developer relations teams or enablement folks at different vendors. Don’t just go with your colleague's default choice because they know someone who likes a certain CMS. Look at your specific needs and choose wisely. Or, have a lovely cake taste test, if you will!</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "our-findings-led-us-to-the-following-not-all-content-is-created-equal",
          "text": "Our findings led us to the following: not all content is created equal."
        }
      },
      {
        "toc": {
          "html_id": "square-peg-round-hole",
          "text": "Square peg, round hole?"
        }
      },
      {
        "toc": {
          "html_id": "the-intersection",
          "text": "The Intersection"
        }
      },
      {
        "toc": {
          "html_id": "concluding",
          "text": "Concluding"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2024-03-12T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-content-graph-is-the-future": {
    "date": "2023-12-05T10:40:00Z",
    "title": "The content Graph is the future",
    "canonical_url": "https://hygraph.com/blog/the-content-graph-is-the-future",
    "description": "Content management is as essential as it is complex, especially at scale. As brands grow, they often...",
    "url": "/writing/the-content-graph-is-the-future",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1ilcbgm74yygk14s4g7.png",
    "reading_time": "6 min read",
    "uid": "article_entry_uid_the-content-graph-is-the-future",
    "locale": "en-us",
    "tags": [],
    "created_at": "2023-12-05T10:40:00Z",
    "updated_at": "2023-12-05T10:40:00Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Content management is as essential as it is complex, especially at scale. As brands grow, they often use a mix of different services to manage their domain content, such as PIM, DAM, Search, and legacy CMS. Unfortunately, this approach challenges developers who must connect all the data to make it presentable on websites or apps, resulting in technical debt. In this article, I will introduce an elegant solution to this problem in this article: the content graph.</p><h2 id=\"the-emergence-of-new-buzzwords-best-of-breed-and-composable\">The emergence of new buzzwords: best-of-breed and composable</h2><p>Organizations worldwide are increasingly adopting a composable architecture that incorporates best-of-breed tools. Simply put, they use a combination of tools with a small scope that do exactly what they need. This approach enables developers to select and integrate smaller tools for each specific function, providing enhanced flexibility and scalability.</p><p>A best-of-breed product is a specialized service that is considered the best in its specific category. These products are chosen for their unique strengths and seamless integration with other tools or systems in a composable architecture. This allows organizations to create a customized and optimized solution that meets their specific needs.</p><p>Unlike monolithic DXPs (off-the-shelf products), which can be inflexible and restrict customization, composable architectures enable organizations to adapt to their specific requirements and take advantage of the latest technological advancements.</p><blockquote><p>If you want to learn more details about industry buzzwords, check out this <a href=\"https://hygraph.com/blog/the-real-deal-about-content-management-buzzwords\" rel=\"nofollow\">blog post</a>.</p></blockquote><h2 id=\"its-not-all-sunshine-and-rainbows\">It’s not all sunshine and rainbows</h2><p>Composable architectures offer a lot of freedom but also introduce a significant amount of complexity. While it may feel liberating for developers to choose how they connect to services, when dealing with large-scale applications, combining data from different structures and using unfamiliar SDKs can quickly become disastrous.</p><p><img alt=\"Composable challenges\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rgy63rwzc7dm5mnmk9wl.png\" width=\"1280\"></p><h2 id=\"introducing-the-content-graph\">Introducing the content graph</h2><p>The content graph is a framework that is represented in the form of a graph, and enables developers to query multiple sources of information through a single unified hub.</p><p>The graph approach federates content, centralizes content strategy, and standardizes querying processes. This simplifies API interactions, ensures consistency, and eliminates siloed information, maximizing efficiency and scalability. It achieves all these tasks while avoiding data duplication and maintaining the autonomy of the sources.</p><p>In human words, this means that all content coming from best-of-breed sources is fed into an aggregation layer (the graph), which can be redistributed in a way that is easy to query. This layer standardizes the language used to query content and allows you to ask for only specific bits rather than receiving everything.</p><p>An essential part of this approach is that the content graph doesn’t store or duplicate any data; it merely creates a schema and allows developers to query the data via the graph’s endpoint. This allows the best-of-breed sources that connect to it to be fully autonomous and flexible.</p><p>To ensure everything performs well while asking the graph for data (imagine having a slow legacy system as a content source), the content graph stores query results on the CDN edge and offers specific TTL and webhook functionalities.</p><p><img alt=\"The Contwnt Graph\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qngsih12lys9s6yww0j.png\" width=\"1280\"></p><h2 id=\"the-benefits\">The benefits</h2><p>Use these one-liners when you talk about this subject to your boss.</p><ul><li>The content graph offers improved content discoverability and accessibility due to strongly typed GraphQL schemas.</li><li>With the content graph, you query only what you need from any source and in the same unified way.</li><li>The content graph offers efficient content updates and real-time synchronization due to TTL or webhook cache purging when sources update. No data duplication is happening at all.</li><li>The content graph facilitates seamless integration with various digital platforms and channels without creating technical debt on the implementation side. In human words, it keeps the front-end implementation simple.</li></ul><h2 id=\"challenges-and-considerations\">Challenges and considerations</h2><p>This article wouldn’t be complete without mentioning some of the challenges. Some implementation hurdles might be due to legacy API formats or highly complex data cleansing needs. Legacy APIs tend to be less strict and might change over time. If you need to clean up that data or add a lot of defensive code, you need to find a tool to do that first before pushing the content into the graph. This means your data governance and tooling must mature before using a content graph.</p><h2 id=\"the-tech-behind-the-content-graph\">The tech behind the content graph</h2><p>You might have guessed it: the content graph uses GraphQL as its query language. Using GraphQL enhances the experience for developers as it uses strongly typed data structures, allowing codebases to do introspection and learn instantly what type of data can be queried and in what format. The content graph framework absorbs any data structure and makes it into a GraphQL schema via a language called SDL.</p><p>An interesting use case is that of Hygraph, which is a GraphQL headless CMS first but with a content graph implementation on the side. This allows content editors to use external content federated into the graph in native CMS schemas without understanding where that data came from. Developers only need to query Hygraph to get all information from the CMS and whatever source was plugged into it.</p><h2 id=\"a-real-life-use-case-for-the-content-graph\">A real-life use case for the content graph</h2><p>An example of using a content graph is that of composable commerce. Imagine operating a large shop selling telecom-related products. As these types of products are complex to manage, companies use a PIM system to enrich product information and manage connections between bundles and brands.</p><p>Of course, end users have to be able to search, filter, and order the products when researching what they want to buy. For this, you will likely need another tool to index all products to prepare them for searching.</p><p>Each product has a media-rich and elaborate story that generally resides on the product page or a campaign page around a product range. To be able to make this happen, you need a CMS to compose the content and, most likely, a DAM system to store all the original formats of the media you might use.</p><p>Lastly, end users must be able to make an account, buy, add to their wishlist, and favorite the products. For that, you need a commerce engine.</p><p>The beauty is that all these systems output data that can be ingested by the content graph, allowing developers to query only the graph while using GraphQL. The specialists your brand hires can operate the external tools as usual. Want to add a wishlist or switch our PIM systems? Add it to the graph; the front-end implementation code must not change.</p><p>One more consideration: if you have a legacy system in place, it can be federated into the content graph while staying autonomous and operating normally. Developers on the implementation end do not need to query the system but ask the graph for its content instead. This gives you the ability to phase it out slowly.</p><h2 id=\"conclusion\">Conclusion</h2><p>The content graph might sound like a concept out of a sci-fi movie, but it’s already here and ready to use. In fact, I think this might be the technical solution for most composable architectures.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "the-emergence-of-new-buzzwords-best-of-breed-and-composable",
          "text": "The emergence of new buzzwords: best-of-breed and composable"
        }
      },
      {
        "toc": {
          "html_id": "its-not-all-sunshine-and-rainbows",
          "text": "It’s not all sunshine and rainbows"
        }
      },
      {
        "toc": {
          "html_id": "introducing-the-content-graph",
          "text": "Introducing the content graph"
        }
      },
      {
        "toc": {
          "html_id": "the-benefits",
          "text": "The benefits"
        }
      },
      {
        "toc": {
          "html_id": "challenges-and-considerations",
          "text": "Challenges and considerations"
        }
      },
      {
        "toc": {
          "html_id": "the-tech-behind-the-content-graph",
          "text": "The tech behind the content graph"
        }
      },
      {
        "toc": {
          "html_id": "a-real-life-use-case-for-the-content-graph",
          "text": "A real-life use case for the content graph"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-12-05T10:40:00Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_what-type-of-content-organization-do-you-need": {
    "date": "2023-11-12T09:03:33Z",
    "title": "What type of content organization do you need?",
    "canonical_url": "https://hygraph.com/blog/what-type-of-content-organization-do-you-need",
    "description": "Different ways of working require different approaches to content design. In this post, I will...",
    "url": "/writing/what-type-of-content-organization-do-you-need",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d58lvz3nrm8lre4gdtuw.png",
    "reading_time": "7 min read",
    "uid": "article_entry_uid_what-type-of-content-organization-do-you-need",
    "locale": "en-us",
    "tags": [],
    "created_at": "2023-11-12T09:03:33Z",
    "updated_at": "2023-11-12T09:03:33Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Different ways of working require different approaches to content design. In this post, I will outline a few content organization approaches based on how your brand operates digitally.</p><p>Every brand manages its digital organization differently. Some are incredibly decentralized, with each department having its own tech stakeholders, agency partners, implementation studios, and consultants. Others are highly centralized, with one person or department making decisions about the digital presence of every entity. Of course, there is also a large grey area in between.</p><p>One thing is clear: most brands are transitioning to a more flexible approach, composing their digital organization using specialty tools that handle their specific domain content. This is instead of relying on an off-the-shelf monolithic tool that attempts to do everything to some extent.</p><p><img alt=\"Centralized / Decentralized\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xioylw3zkxljytzhwtft.png\" width=\"1280\"></p><p>Brands that adopt a decentralized approach require more flexible tooling to accommodate the increased number of people involved who need autonomy. This necessitates the use of marketing-first systems for content management. On the other hand, the centralized approach requires less tooling and is more technologically focused, as it follows a fixed set of specifications for each experience. In this case, the main requirement is to obtain data and build the experience accordingly.</p><h2 id=\"how-to-organize-your-content-without-going-crazy\">How to organize your content without going crazy</h2><p>If your content flows between different systems, federation is one of the most effective ways to manage it.</p><p>Federation is a software process that enables multiple sets of content to operate as a unified whole. It creates a virtual view of the content by gathering data from various sources and transforming them into a standardized model. This ensures a single source of data for front-end applications.</p><p>Federation is a broad spectrum, and only some things written in this post may fit within the scope of technical purists. However, similar to agile and scrum, we observe various approaches associated with federation.</p><p>In today's landscape, as brands acquire domain content from multiple sources, it is essential to federate that content to a central location. The federation method can vary greatly, and the approach chosen will depend on the structure of your digital organization, technical capabilities, and specific requirements.</p><h2 id=\"forms-of-federation\">Forms of federation</h2><p>There are many different types of federations for building brand websites. In this article, we will focus on a few major ones that fit the context of building commerce platforms and marketing campaigns.</p><h3 id=\"data-stitching-and-custom-middleware\">Data stitching and custom middleware</h3><p>Data stitching or a custom middleware are not exactly forms of federation, but you encounter them often in the wild. Tech teams query, clean up, and map data from the specific front end they are working on, which creates complexity and technical debt in the implementation. Initially, this approach may feel flexible and give developers autonomy, but as the scale increases, it becomes unsustainable. The entire process must be repeated when another channel is created (such as a website, mobile app, kiosk, etc.). To address this issue, people started creating custom middleware solutions at API level. While they still suffer from similar problems, at least they centralize the data query, clean up, and mapping in one place. However, creating proprietary code to attack problems that affordable products solve, is usually a waste of time.</p><p><img alt=\"Data stitching\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iacwgoeaolz9znalbc56.png\" width=\"1280\"></p><h3 id=\"content-hub\">Content Hub</h3><p>A content hub is a centralized source of truth that collects and duplicates data from various sources. It organizes the data and performs cleanup and data remapping within the hub itself. This approach can be viable if the data sources do not need autonomy and you are not concerned about potential outdated content resulting from the content hub's data duplication.</p><p><img alt=\"Content Hub\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sc8fp49qbswr93cg5r62.png\" width=\"1280\"></p><h3 id=\"data-lake\">Data Lake</h3><p>A content lake is a repository where data of any type is stored without considering its structure. It remains in its raw form and can be accessed by anyone. This approach is highly beneficial for machine learning and reporting tools. Having a well-established data cleanup pipeline and being willing to accept potential technical debt make the content lake an excellent choice for your brand.</p><p><img alt=\"Data lake\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u388o0c1oy5p0m31afl0.png\" width=\"1280\"></p><h3 id=\"content-federation\">Content Federation</h3><p>Content federation aggregates data by establishing a unified, simplified, standardized approach for querying it. This approach allows the connected sources to remain autonomous and flexible. Content federation effectively separates data from systems and provides the capability for precise cache purging. Unlike the content hub, there is no data duplication. Instead, the data is cached in the CDN edge with granular cache invalidation.</p><p>Content federation works well (and is typically combined) with a CMS that can ingest the data and use its APIs.</p><p><img alt=\"Content Federation\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wsbl6uzmoscfxq31yrv.png\" width=\"1280\"></p><h3 id=\"dxo-digital-experience-orchestration\">DXO (digital experience orchestration)</h3><p>Digital Experience Orchestration focuses on API orchestration and decision-making to create and manage digital experiences. In every project, there is a hidden area where unclean data exists. DXO can address this issue by integrating data sources at runtime, cleaning them up, and offering clean API endpoints. Additionally, DXO can personalize endpoint data in real time, taking input from a front-end and combining content from various sources.</p><p>Beware, DXO is not a CMS, and its endpoints must be plugged into a Content Federation platform like Hygraph if you want to use it. If you do not need a CMS, DXO can be used standalone.</p><p><img alt=\"DXO\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zfrsz1i6hjq68mbsmrui.png\" width=\"1280\"></p><h3 id=\"graphql-federation\">GraphQL Federation</h3><p>GraphQL Federation is the idea of connecting two or more GraphQL APIs (subgraphs) to create a single unified GraphQL API known as a supergraph. Each backend team or domain can develop and manage their subgraphs independently. Federation is simpler in GraphQL than REST because the ability to link types is inherently built into GraphQL. GraphQL federation is highly technical, rigorous, and structured, making it ideal for large-scale data applications and technical teams that require seamless communication. GraphQL federation works great standalone and not combined with a CMS. It’s highly technical and focuses on API endpoints.</p><p>A few other techniques and companies are not precisely GraphQL federation but reach the same goal: a single API endpoint for tech teams: Apollo Federation, Open Federation, Grafbase, GraphQL Fusion, and Graph weaver.</p><p><img alt=\"GraphQL Federation\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtx6y1lqmon1nhe6c4t0.png\" width=\"1280\"></p><h2 id=\"which-federation-is-for-you\">Which federation is for you?</h2><p>Choosing the preferred federation type depends on how your brand's digital organization was set up. Let's determine which federation type suits your company best by asking a few questions.</p><h3 id=\"what-is-your-digital-organization-direction-centralized-or-decentralized\">What is your digital organization direction: centralized or decentralized?</h3><p>The more decentralized an organization is, the greater the need for additional CMS or visual editing tools. A perfect example is the L'Oréal group, which has numerous brands. Each brand independently decides which content is displayed for its various markets, resulting in a completely decentralized structure. With many content editors actively building pages, autonomy, and flexibility are essential. In this case, the best approach is to implement Content Federation with a CMS on top.</p><p><em>Federation type to choose: Content Federation</em></p><p>If we consider the opposite approach, let's take a brand like Louis Vuitton as an example. They have highly stylized pages and campaigns that are consistent worldwide. They maintain a unified brand, website, tone of voice, content design, and art direction. Due to the limited number of people creating the experience, the need for tooling is less significant. Editing content simply involves adding text in a form, and the front-end implementation determines how it is displayed. Since content changes infrequently, a content hub with CDN cache might suffice.</p><p><em>Federation type to choose: Content Hub</em></p><h3 id=\"how-much-cleanup-does-your-data-need\">How much cleanup does your data need?</h3><p>Many brands have a dark corner where various data exists, usually resulting from pragmatic technical decisions made over time. This data is structured, cleaned, and mapped through complex build processes by unhappy developers. Integrating this data into a front-end implementation is often challenging, requiring creating proprietary logic. If any part of this process fails, the entire system fails.</p><p>If your brand faces this issue and lacks the time or budget to address it, a DXO (Digital Experience Orchestration) may be a suitable solution. DXOs can serve as a new source for static or async data on legacy servers and provide cleaned content at runtime. These streamlined API endpoints can seamlessly fit into a Content Federation workflow and be utilized in a headless CMS like Hygraph.</p><p><em>Federation type to choose: DXO, Content Federation</em></p><h3 id=\"how-autonomous-do-your-data-sources-need-to-be\">How autonomous do your data sources need to be?</h3><p>At scale, brands have dedicated individuals who specialize in enriching content in specific areas such as PIM, CRM, search, or DAM. These individuals should have the <em>autonomy</em> to work without being restricted by proprietary middleware or opinionated front-end implementations. The greater the need for autonomy, the less suitable a content hub, Content Lake, or DXO would be. Code stitching or proprietary middleware, in particular, should be avoided. Instead, consider using content federation. If you are dealing with big data or reporting, please continue reading below.</p><p><em>Federation type to choose: Content Federation</em></p><p>If you do not require autonomous sources or lack the resources to have specialized individuals enrich content, consider implementing a content hub. However, remember that your data may become outdated, so it is essential to establish a method for regularly refreshing the data.</p><p><em>Federation type to choose: Content Hub</em></p><h3 id=\"are-you-dealing-with-big-data\">Are you dealing with big data?</h3><p>Cleaning up and mapping big data into specific models for channel presentation can be challenging. In such cases, a content lake is often the most suitable option. A content lake stores raw, unstructured, and structured data, which can be used to train machine learning models or generate reports. Additionally, a content lake can be beneficial if you have a highly skilled developer team that does not require a CMS.</p><p><em>Federation type to choose: Content Lake</em></p><h3 id=\"are-you-a-saas-with-multiple-tech-silos\">Are you a SaaS with multiple tech silos?</h3><p>If you are working with multiple tech teams and dealing with a lot of data from various sources but don't need a CMS for a marketing website, you can use GraphQL to organize all the data into a graph. This allows different teams to query the data without needing individual data contracts. GraphQL Federation is the perfect choice in this scenario. It provides a highly structured and precise approach, offering flexible APIs through GraphQL.</p><p><em>Federation type to choose: GraphQL Federation</em></p><h2 id=\"conclusion\">Conclusion</h2><p>As always, the answer is: \"It depends\". Ensure you have the right technical stakeholders on your team to analyze your brand's digital needs. Once you identify the issues, contact specialists at agencies or the enthusiastic team at Hygraph for assistance. At Hygraph, we envision the future of content as one big graph. Brand domain content and origin sources, where data is enriched, will contribute to this graph. Implementations on various channels such as websites, apps, or sales systems can query this graph and retrieve exactly what they need. Content Federation with an attached CMS is suitable for many use cases.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "how-to-organize-your-content-without-going-crazy",
          "text": "How to organize your content without going crazy"
        }
      },
      {
        "toc": {
          "html_id": "forms-of-federation",
          "text": "Forms of federation"
        }
      },
      {
        "toc": {
          "html_id": "which-federation-is-for-you",
          "text": "Which federation is for you?"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-11-12T09:03:33Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-real-deal-about-content-management-buzzword": {
    "date": "2023-09-28T14:43:37Z",
    "title": "The real deal about content management buzzwords",
    "canonical_url": "https://hygraph.com/blog/the-real-deal-about-content-management-buzzwords",
    "description": "Buzzwords are labels that describe tech approaches that become so commonplace over time that the...",
    "url": "/writing/the-real-deal-about-content-management-buzzword",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pr5frm3ra3q3liidcpev.jpg",
    "reading_time": "6 min read",
    "uid": "article_entry_uid_the-real-deal-about-content-management-buzzword",
    "locale": "en-us",
    "tags": [
      "buzzwords",
      "dxp",
      "composable",
      "cms"
    ],
    "created_at": "2023-09-28T14:43:37Z",
    "updated_at": "2023-09-28T14:43:37Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Buzzwords are labels that describe tech approaches that become so commonplace over time that the label disappears, and people do what works best. Remember Jamstack? Neither do I. The term became so widespread that it faded away. Netlify, the company that coined Jamstack, now uses Composable, which will likely disappear too.</p><p>First, let's define some current buzzwords. Afterwards, I'll explain why they don't actually matter.</p><p>Do you like watching more than reading? Watch this <a href=\"https://www.youtube.com/watch?v=EXzp3OkQTXk\" rel=\"nofollow\">YouTube video</a> instead.</p><p>{% embed <a href=\"https://www.youtube.com/watch?v=EXzp3OkQTXk\" rel=\"nofollow\">https://www.youtube.com/watch?v=EXzp3OkQTXk</a> %}</p><h2 id=\"mach\">MACH</h2><p><a href=\"https://hygraph.com/blog/mach-architecture\" rel=\"nofollow\">MACH architecture</a> comprises principles and practices for building and managing digital experiences. The acronym MACH stands for Microservices, API-first, Cloud-native, and Headless.</p><p>Essentially, MACH is a collection of tech approaches with specific tendencies put together. If you build something with all four items, you are MACH compliant. Otherwise, you are not. MACH provides a label you can put on your software as a vendor. This does not mean products lacking one of the four MACH features are flawed. However, it also means that companies like Adobe, Sitecore, and WordPress will never be MACH members.</p><ul><li><strong>Microservices</strong> are small, independent services that are loosely coupled and communicate with each other through APIs. This makes microservices architecture more scalable and flexible than traditional monolithic architectures.</li><li><strong>API-first</strong> means that all functionality is exposed through APIs. This makes it easy to integrate different services and build new applications.</li><li><strong>Cloud-native</strong> means that the architecture is designed to take advantage of the cloud, such as scalability, elasticity, and pay-as-you-go pricing.</li><li><strong>Headless</strong> means that the front-end presentation is decoupled from the back-end logic. This makes it possible to use different front-end technologies without changing the back-end.</li></ul><p><img alt=\"mach\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/jZfjXdJMSGTG1gLrwGQQ\" width=\"1280\"></p><h2 id=\"composable\">Composable</h2><p><a href=\"https://hygraph.com/blog/composable-architecture\" rel=\"nofollow\">Composable architecture</a> refers to a modular approach built around reusable components that brands assemble themselves rather than buying an off-the-shelf product, with a key advantage being the flexibility to swap components to adapt to changing needs, avoiding significant rebuilds required by monolithic systems.</p><p>While solving problems of rigid all-in-one solutions, composable architecture can have complex development and workflows. Composable architecture and MACH architecture are both approaches to managing digital experiences, with composable architecture focusing on the API-first \"A\" in MACH by composing APIs into a cohesive architecture. There are different techniques for connecting APIs in a composable architecture, ranging from content hubs to content federation to proprietary middleware.</p><p>Overall, composable architecture represents an architectural philosophy of modularity and flexibility in contrast to traditional monolithic digital solutions.</p><p><img alt=\"composable\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/D2oCAxwTpuhKfZ5xwEB0\" width=\"1280\"></p><h2 id=\"dxp-digital-experience-platform\">DXP (Digital Experience Platform)</h2><p>A <a href=\"https://hygraph.com/blog/what-is-a-dxp\" rel=\"nofollow\">digital experience platform (DXP)</a> is an integrated set of core technologies that support the composition, management, delivery, and optimization of contextualized digital experiences.</p><p>Typically, a DXP is delivered as a monolithic piece of software by a single vendor. While modern DXPs may offer some composability, their components are usually proprietary to the vendor. This can limit flexibility and result in vendor lock-in, as brands cannot easily swap out or integrate other technologies.</p><p><img alt=\"dxp\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/rIUS6taoQJ2pcvTDA2YZ\" width=\"1280\"></p><h2 id=\"dxc-digital-experience-composition\">DXC (Digital Experience Composition)</h2><p><a href=\"https://hygraph.com/blog/digital-experience-composition\" rel=\"nofollow\">Digital experience composition</a> refers to no-code/low-code tools and platforms that allow digital teams to build and manage digital experiences in a composable architecture easily. The collection of these tools includes three categories of software: a light front-end SDK or front-end as a service, a page builder, and API integrations to connect data.</p><p>DXC is essentially a modern version of the DXP but vendor-agnostic. DXC is leaning towards website channel-specific as it offers front-end SDKs and live previews. If the product doesn’t offer an iOS SDK, the customer is alone.</p><p><img alt=\"dxc\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/irNrx7isRUKaZ0QoDnzQ\" width=\"1280\"></p><h2 id=\"dxo-digital-experience-orchestration\">DXO (Digital Experience Orchestration)</h2><p>Digital Experience Orchestration emphasizes API orchestration and decision-making to create and manage end-to-end digital experiences. DXO platforms provide visual tools to orchestrate digital experiences but do not include WYSIWYG editors for managing the front-end experience.</p><p>DXO is essentially DXC without the front-end components, focusing only on data stitching. It is pretty unique in the MACH space that we see analytics and a/b testing added to the orchestration solution in the back-end rather than at the CDN edge specific to the end user.</p><p><img alt=\"dxo\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/WgGDwsNLTTa4wAoL7WVd\" width=\"1280\"></p><h2 id=\"why-you-dont-have-to-care-about-the-buzzwords\">Why you don’t have to care about the buzzwords</h2><p>Ultimately, it is up to <em>you</em> to decide how to build the digital experience for your brand, both internally and externally. There are many paths to success, and you need to understand your business needs, maturity, and technical skills to choose the best route. Nowadays, technical product owners need to be more knowledgeable about the technology landscape and internal business needs than ever before.</p><h3 id=\"company-maturity\">Company maturity</h3><p>As companies grow, they gain a deeper understanding of the problems they solve as a business. The more they know about these issues, the more specific their choice of speciality software becomes. Less mature companies, or those that are large and indecisive, tend to gravitate towards monoliths that offer broad functionality, covering most bases.</p><p>However, as companies mature, they may struggle with the <a href=\"https://hygraph.com/blog/monolithic-cms-limitations\" rel=\"nofollow\">limitations of these monoliths</a>. Any customization work on a monolith can be time-consuming, complex, and expensive. This is why re-platforming has become such a significant trend in our industry.</p><h3 id=\"connecting-it-all\">Connecting it all</h3><p>Assuming you have chosen the perfect PIM, DAM, ERP, commerce engine, and search tool, the next step is to connect all these moving pieces into a cohesive architecture. This will enable you to create a platform application that both end-users and internal teams will love to use.</p><p>The architecture direction should be chosen based on the technical proficiency of your teams. Simply purchasing specialized software does not create a cohesive architecture.</p><h3 id=\"content-federation\">Content federation</h3><p>To avoid a <a href=\"https://www.linkedin.com/pulse/mach-monolith-tim-benniks/\" rel=\"nofollow\">MACH monolith</a> or <a href=\"https://www.youtube.com/watch?v=so7-c2bOXpA\" rel=\"nofollow\">MACHlash</a>, you need a system to “federate” all content sources into a unified view. This system should standardize and simplify the data for later querying while keeping the speciality sources autonomous. That way, the teams in charge of PIM or Search can work without influence from other systems.</p><p><img alt=\"content federation\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/fbNw1hhTSHykSwk19ggJ\" width=\"1280\"></p><p>Content federation is a very lightweight approach to unifying different data sources into a transparent and easy-to-use endpoint while keeping the complexities of your data sources where they need to stay. Your speciality products for PIM, DAM, eCommerce, and Search remain autonomous and safe while front-end implementations ask the Federation platform for information.</p><h3 id=\"after-content-federation-is-in-place\">After Content federation is in place</h3><p>Now that the content federation has been established, aligning the company's maturity, technical skill, and vision with the choice of products that follow this step is essential. If you have the necessary technical ability, add a headless CMS, query the federated data endpoints, and you’re done. You can add best-of-breed a/b testing, and localization services later.</p><p>If you need additional elements, such as personalization or visual editing, consider using a DXC like Uniform or a DXO like Conscia. Ultimately, these tools serve the same purpose but with different approaches to the problem. Some tools are more visually oriented and offer greater personalization, while others are more data-driven. Consider your company's maturity and technical skills before selecting a tool.</p><p><img alt=\"after content federation\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/4xZbpHRgTI2CzXQ88GG7\" width=\"1280\"></p><h2 id=\"concluding\">Concluding</h2><p>Every modern architecture requires a combination of the appropriate specialty providers, based on company maturity and technical skills. After that, the next step is to use a tool that federates all of these content sources into a single unified endpoint. This helps to simplify and standardize the architecture, while still maintaining the autonomy of the specialty systems.</p><p>Once the basics are in place, look internally at the specific needs and choose between DXC, DXO, or anything in between.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "mach",
          "text": "MACH"
        }
      },
      {
        "toc": {
          "html_id": "composable",
          "text": "Composable"
        }
      },
      {
        "toc": {
          "html_id": "dxp-digital-experience-platform",
          "text": "DXP (Digital Experience Platform)"
        }
      },
      {
        "toc": {
          "html_id": "dxc-digital-experience-composition",
          "text": "DXC (Digital Experience Composition)"
        }
      },
      {
        "toc": {
          "html_id": "dxo-digital-experience-orchestration",
          "text": "DXO (Digital Experience Orchestration)"
        }
      },
      {
        "toc": {
          "html_id": "why-you-dont-have-to-care-about-the-buzzwords",
          "text": "Why you don’t have to care about the buzzwords"
        }
      },
      {
        "toc": {
          "html_id": "concluding",
          "text": "Concluding"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-09-28T14:43:37Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-future-of-headless-cms-content-federation-with-graphql": {
    "date": "2023-09-28T14:39:16Z",
    "title": "The future of headless CMS: Content Federation with GraphQL",
    "canonical_url": "https://hygraph.com/blog/content-federation-with-graphql",
    "description": "Federation is a popular topic of conversation these days, and for good reason. With the ever-growing...",
    "url": "/writing/the-future-of-headless-cms-content-federation-with-graphql",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9pk8b2ihfddxqlt3w4tu.jpg",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_the-future-of-headless-cms-content-federation-with-graphql",
    "locale": "en-us",
    "tags": [
      "headless",
      "cms",
      "graphql",
      "federation"
    ],
    "created_at": "2023-09-28T14:39:16Z",
    "updated_at": "2023-09-28T14:39:16Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Federation is a popular topic of conversation these days, and for good reason. With the ever-growing amount of fragmentation in tooling, it offers a way to decouple data and systems, giving organizations more flexibility and agility.</p><p>Despite the promise of headless architecture, data, and systems easily become tightly coupled. Whether through custom middleware or frontend stitching, one system can have ripple effects on all others. This can make it difficult to manage and update content and causes technical debt. In the past, I called this the<a href=\"https://www.linkedin.com/pulse/mach-monolith-tim-benniks/\" rel=\"nofollow\"> MACH Monolith</a>.</p><p>A federated architecture, on the other hand, truly decouples data and systems. Federation is a technique of using autonomous systems to work with the data and logic they’re best suited for. What differentiates that from the MACH Monolith is how the data comes back together. Federation takes these autonomous services and crafts a unified, standardized, and powerful API for use in any application.</p><p>While there are many patterns for accomplishing federation, one architecture is Content Federation. Content federation is the process of bringing together content from multiple sources into a single, unified view that can be accessed both at the API layer, as well as at the editor level.</p><p>In a federated architecture, the content federation layer brings together content from the different systems. This layer acts as a single point of access for data, making it easy for users to get the content they need, regardless of where it is stored.</p><p>A few benefits of a federated architecture include:</p><ul><li>Increased flexibility and agility: Each system is responsible for its data and logic, which gives them more autonomy and flexibility. This makes it easier to manage and update systems and makes it easier to add new systems to the architecture.</li><li>Improved security: A federated architecture can reduce the attack surface. When data and systems are tightly coupled, a vulnerability in one system can compromise other systems. A federated architecture reduces the risk of this happening by decoupling data and systems.</li><li>Reduced complexity: A federated architecture can simplify how data is managed. In a traditional architecture, data is often stored in multiple systems, making it difficult to keep track of. A federated architecture brings together data from different systems into a single, unified view, which makes it easier to manage, inspect, and use data. The implementation layer has one standardized, unified way to ask for the content.</li></ul><p>Overall, a federated architecture is a powerful way to decouple data and systems, giving organizations more flexibility, agility, and security.</p><p><img alt=\"Federated Content Platform\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://media.graphassets.com/4wC9B4MBSaZDeQvB26QA\" width=\"1280\"></p><h2 id=\"the-importance-of-autonomy-in-a-federated-architecture\">The importance of autonomy in a federated architecture</h2><p>While most federation articles focus on the benefits of unification, system autonomy is really the key benefit. This autonomy means that systems can be developed and managed independently without worrying about the other systems in the architecture. This can be a major advantage, as it allows organizations to be more agile and responsive to change while still maintaining standards.</p><p>This enforced autonomy increases the reach of standardization. In an e-commerce application, product information — pricing, description, categorization — should be standardized wherever it’s used. Without Content Federation, the product data would be re-entered in the systems that don’t house it. When an editor of the blog goes to create a post about a product, they introduce the human potential for error. If they merely select a product from the e-commerce system, they can rely on the owners of that data to keep their data standardized.</p><p>When the standards for a particular piece of data changes, the data is changed in the home system, and each other system is ready to receive that change. No additional work necessary.</p><h2 id=\"conclusion\">Conclusion</h2><p>A federated architecture is a powerful way to decouple data and systems, giving organizations more flexibility, agility, and security. Federation brings autonomy to the data layer while also giving rise to a unification layer Content Federation brings a deeper sense of standardization through systemic change instead of human change. Without autonomy, we have complexity; without unification and standardization, we have glue code. We need both in the modern stack.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "the-importance-of-autonomy-in-a-federated-architecture",
          "text": "The importance of autonomy in a federated architecture"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-09-28T14:39:16Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_new-job-alert": {
    "date": "2023-08-16T13:42:10Z",
    "title": "New job alert - Hygraph 2023",
    "canonical_url": "",
    "description": "After an exciting journey at Uniform, it's time for a new adventure. At Uniform, we thrived during...",
    "url": "/writing/new-job-alert",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/adfg5ciysfamka395zir.png",
    "reading_time": "2 min read",
    "uid": "article_entry_uid_new-job-alert",
    "locale": "en-us",
    "tags": [
      "career",
      "webdev",
      "devrel"
    ],
    "created_at": "2023-08-16T13:42:10Z",
    "updated_at": "2023-08-16T13:42:10Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>After an exciting journey at <a href=\"https://uniform.dev\" rel=\"nofollow\">Uniform</a>, it's time for a new adventure.</p><p>At Uniform, we thrived during the pandemic, hiring the best talent remotely and finding success in a new product category. I not only learnt a lot but also created value towards company perception and trust along the way.</p><p>Inspired by the startup life, I wanted a new challenge at a company further along their journey. <a href=\"https://hygraph.com\" rel=\"nofollow\">Hygraph</a> caught my attention with its product-led growth, open source SDKs, solid product-market fit, and strong fit for developer relations.</p><p>I'm excited to join Hygraph as the Developer Relations Lead for Outreach and Awareness. With 15 years of agency experience, deep knowledge of the developer space, and connections within the MACH alliance, I'm confident in bringing my skills to this product-led growth company.</p><p>Working alongside experienced professionals like <a href=\"https://www.linkedin.com/in/bryanlrobinson/\" rel=\"nofollow\">Bryan Robinson</a> (Orbit, Algolia, Sanity) and <a href=\"https://www.linkedin.com/in/lowisren/\" rel=\"nofollow\">Lo Etheridge</a> (Sanity, and many other dev gigs), I'll be part of Hygraph's developer relations team within the larger marketing organization led by <a href=\"https://www.linkedin.com/in/omergokcetumer/\" rel=\"nofollow\">Omer Gokce Tumer</a>.</p><p>Hygraph is at the forefront of the composability and content federation space. They provide a solution to the challenges faced by scaled headless architectures, bringing stability and flexibility. Companies like Netlify, Conscia, and Octoo have embraced Hygraph's approach to content federation, validating the category.</p><p>If you're seeking content federation at scale, Hygraph has a remarkable head start and addresses the current code-first problems in the MACH architecture space.</p><p>I'm eager to get started and can't wait for what lies ahead. See you soon!</p><p>Cheers,\nTim</p>",
    "tocs": [],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-08-16T13:42:10Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_this-is-headless-20": {
    "date": "2023-07-11T07:48:19Z",
    "title": "This is headless 2.0",
    "canonical_url": "",
    "description": "That’s a bold title, but it’s high time to change how we work with headless technology. I wrote about...",
    "url": "/writing/this-is-headless-20",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4ykeb6acv0q288ygpaj.png",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_this-is-headless-20",
    "locale": "en-us",
    "tags": [
      "webdev",
      "mach",
      "headless",
      "architecture"
    ],
    "created_at": "2023-07-11T07:48:19Z",
    "updated_at": "2023-07-11T07:48:19Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>That’s a bold title, but it’s high time to change how we work with headless technology. I wrote about the <a href=\"https://www.linkedin.com/pulse/mach-monolith-tim-benniks\" rel=\"nofollow\">MACH monolith</a> before. Here, I’ll describe how to avoid ending up in a codebase full of technical debt, aka glue code—chores that overburden and frustrate developers.</p><h3 id=\"the-why\">The why</h3><p>Headless technology has gained prominence in web development, offering benefits like higher performance, front-end freedom, DX features, and management through APIs—a thrill for techies. However, at scale, complexities arise due to an endless need for glue code for connecting content sources, let alone authoring issues caused by disconnects between content editors and front-end presentation.</p><p>In particular, separation of content authoring and presentation results in a steep learning curve for content editors, who would need help to preview their work and ensure a correct display. But how do you preview content that connects to multiple sources, all offering some form of preview capability? As a fix, people do either of the following:</p><ul><li>Connect to the sources via CMS plugins and add data-modeling capabilities for page layouts unrelated to core CMS functionalities. For more details, read my article on the <a href=\"https://www.linkedin.com/pulse/mach-monolith-tim-benniks\" rel=\"nofollow\">MACH monolith</a>. </li><li>Hard-code all the connections in the front end, forcing content editors to file IT tickets for updates.</li></ul><p>For web projects to succeed, since developers, marketers, and content editors boast <a href=\"https://dev.to/timbenniks/level-up-your-collaboration-game-developer-insights-for-winning-with-marketing-pros-17k\" rel=\"nofollow\">different strengths</a>, teams must be able to collaborate harmoniously and seamlessly. For all that headless promises freedom and excellent developer experience, it pushes the pain threshold of marketers.</p><p><img alt=\"Connecting lots of services creates glue code and technical debt.\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7a0lii31280n03qva7v.png\" width=\"1280\"></p><p>Connecting lots of services creates glue code and technical debt.</p><h3 id=\"the-how\">The how</h3><p>Two things are paramount as a fix:</p><ul><li>Simple, easy-to-maintain front-end codebases that contain minimal glue code and technical debt. </li><li>Elimination of the need for content editors to tackle the abstractness of a composable architecture populated by a plethora of different tools. Content editors need a visual-editing capability across headless sources to ensure the display is exactly what they desire without giving up on a solid technical architecture.</li></ul><p>In other words, content editors need a page-composition process similar in concept to that of GraphQL, i.e., one that returns only the needed properties and content of all page components. All the editors need to do is add the component props with data from external sources—with no need to know the data’s origin. The result is curated, page-specific JSON output that can be consumed by the front end, which need not connect to external data sources.</p><p><img alt=\"Connect services to design system components and compose a page. Curate your data a la GraphQL but visually.\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu1m8gqp9r20nq7fx7dy.png\" width=\"1280\"></p><p>Connect services to design system components and compose a page. Curate your data a la GraphQL but visually.</p><p>What emerges is a transparent and simple platform on which to compose pages based on design components, whose props point to a field in an external API endpoint. That platform would <em>not</em> be a CMS or data-federation tool. All it needs to know is which component points to which data source for a specific page composition.</p><h3 id=\"a-visual-workspace\">A visual workspace</h3><p>Therefore, the job of the platform, which represents all the design components with linked data sources (CMS, PIM, DAM), is to connect them and store the result like a curated GraphQL query on a CDN edge. The only data this platform would potentially store are one-off content strings like “latest blog posts” or the fact that a particular component variant, e.g., the image on the left or right, is shown in a specific context.</p><p>That setup gives rise to a streamlined workflow:</p><ul><li>To publish content, editors visually connect external data to components properties. That data can come from any source.</li><li>Editors compose their design-system components visually to represent the page design they want.</li><li>A curated JSON structure of the composition is saved to the CDN edge.</li><li>The front end connects to the API endpoint of the platform. An intuitive and light SDK connects to the CDN edge, keeping the front end code simple.</li></ul><p>To make it all visual for content editors, match the naming of the design-system components in the codebase to the ones in the platform and have the SDK show the components in a preview window. Simultaneously, content editors can bind data from external sources to the props and design how the components should look and behave.</p><p>With solid cache purging for data sources, you can create dynamic pages that connect to any amount of data and deliver in less than 50ms from a CDN edge near you. In case of external data-source changes, the TTL on the field or a webhook purges the cache, resulting in fresh data. </p><p>If used in conjunction with the latest Next, NuxtJS, or Astro features, this approach leads to a robust yet no-frills front end with no need to connect to data sources in code or mapping their data to component props. Talk about happy developers!</p><p><img alt=\"Image description\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxchvyapco21ibgpkxl9.png\" width=\"1280\"></p><p>Map design system component props to individual API response fields to create a visual editor that works across headless sources.</p><h3 id=\"a-recap\">A recap</h3><p>Connecting everything code-first at scale is painful for developers and content editors alike, the former having to maintain the connections and content mappings, and the latter getting lost in the abstract tools with no clues of what happens on a click to publish.</p><p>A composable architecture of headless sources must be a team buy, not just a developer choice. What’s needed is a visual workspace that’s—</p><ul><li>Friendly to content editors but also feature-rich for developers while maintaining excellent technical architecture without compromises. </li><li>Agnostic and not a one-size-fits-all offering from a single CMS vendor. </li></ul><p>In other words, we need a modern, composable form of the old-school DXPs like Adobe AEM. I believe what I described above resembles digital experience composition as coined by Gartner.</p><p><em>This is Headless 2.0</em></p>",
    "tocs": [
      {
        "toc": {
          "html_id": "the-why",
          "text": "The why"
        }
      },
      {
        "toc": {
          "html_id": "the-how",
          "text": "The how"
        }
      },
      {
        "toc": {
          "html_id": "a-visual-workspace",
          "text": "A visual workspace"
        }
      },
      {
        "toc": {
          "html_id": "a-recap",
          "text": "A recap"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-07-11T07:48:19Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-lost-promise-of-headless": {
    "date": "2023-06-26T18:18:19Z",
    "title": "The lost promise of headless",
    "canonical_url": "https://uniform.dev/blogs/the-lost-promise-of-headless",
    "description": "In recent years, headless technology, which boosts performance, developer experience, and...",
    "url": "/writing/the-lost-promise-of-headless",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lrvfb6a8wh5lt0mbyzat.png",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_the-lost-promise-of-headless",
    "locale": "en-us",
    "tags": [
      "headless",
      "architecture",
      "mach"
    ],
    "created_at": "2023-06-26T18:18:19Z",
    "updated_at": "2023-06-26T18:18:19Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>In recent years, headless technology, which boosts performance, developer experience, and best-of-breed headless systems, has gained significant traction in web development. At its core, headless streamlines and accelerates the process of building and delivering web experiences  through APIs, which separates content creation and management from presentation. </p><p>However, despite the excitement and promise, headless technology has fallen short in living up to its potential in several key areas.</p><h2 id=\"technical-complexity\">Technical complexity</h2><p>The primary appeal of headless technology lies in decoupling content creation and presentation, as a result of which developers can work on the presentation layer with their preferred tools and frameworks while content editors can focus on building and managing content. However, that separation comes at a cost. Specifically:</p><ul><li>To connect the multiple layers, a significant amount of code must be written, which leads to technical debt, a heavier workload, and inflexibility. </li><li>Adding data to content models to address design-driven choices for an output channel, e.g., checkboxes to enlarge an image, pollutes the data model. The more design-related and channel-specific data you add to content models, the more technical debt you create.</li><li>If you must connect a different data source to the same front-end component, but the content models do not align, issues arise. </li></ul><h2 id=\"content-editing-challenges\">Content-editing challenges</h2><p>Another major challenge with headless technology is the disconnect between content editors and the systems they work with. Due to the abstract nature of headless CMS, content editors often struggle to pinpoint how their content will be displayed on the front end, leading to confusion, frustration, and a steep learning curve for novices.</p><p>Moreover, the lack of a clear connection between content and presentation makes it difficult for content editors to preview their work and ensure that it looks and functions as intended. A suboptimal user experience results, let alone a time sink for revisions and troubleshooting.</p><h2 id=\"the-way-forward-dxcp\">The way forward: DXCP</h2><p>Without question, despite the promise of headless technology for revolutionizing the way we build web experiences, serious hurdles remain. To overcome them, tools and processes that facilitate team collaboration and streamline the development process are necessary so that developers and content editors can work closely together to bridge the gap between content creation and presentation.</p><p>A proven solution is a <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">digital experience composition platform (DXCP)</a>, which seamlessly integrates content and presentation. While on that platform, nondevelopers can visually create and manage digital experiences with content from multiple sources, delivering those experiences agnostically to a front-end of choice, significantly reducing technical debt, and gaining flexibility. Businesses can then adapt and innovate much faster, especially since the connection to all headless systems and APIs occurs in the DXCP, and the code remains clean.</p><p>What’s more, the incorporation of a DXCP into the development process affords content editors a clear view of how their content will be displayed and the ability to interact with the presentation layer. Plus, the absence of data silos means a more streamlined and efficient workflow as well as a more intuitive user experience for both content creators and developers.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "technical-complexity",
          "text": "Technical complexity"
        }
      },
      {
        "toc": {
          "html_id": "content-editing-challenges",
          "text": "Content-editing challenges"
        }
      },
      {
        "toc": {
          "html_id": "the-way-forward-dxcp",
          "text": "The way forward: DXCP"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-06-26T18:18:19Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_level-up-your-collaboration-game-developer-insights-for-winning-with-marketing-pro": {
    "date": "2023-05-03T15:49:29Z",
    "title": "Level up your collaboration game: Developer insights for winning with marketing pros",
    "canonical_url": "https://uniform.dev/blogs/level-up-your-collaboration-game-developer-insights-for-winning-with",
    "description": "Building outstanding user experiences takes, first and foremost, effective collaboration between...",
    "url": "/writing/level-up-your-collaboration-game-developer-insights-for-winning-with-marketing-pro",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhfuu567f1khlxvglcn0.png",
    "reading_time": "4 min read",
    "uid": "article_entry_uid_level-up-your-collaboration-game-developer-insights-for-winning-with-marketing-pro",
    "locale": "en-us",
    "tags": [
      "webdev",
      "marketing",
      "collaboration"
    ],
    "created_at": "2023-05-03T15:49:29Z",
    "updated_at": "2023-05-03T15:49:29Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Building outstanding user experiences takes, first and foremost, effective collaboration between marketing and development teams. Oftentimes, however, those teams’ different perspectives lead to misunderstandings and opacity, which could seriously impact progress and revenue. Over the last two years of interacting and working within a marketing department as a seasoned technical leader, I've developed strategies to enhance collaboration, boost cross-team communications, and promote project success. </p><p>Below are the steps to take.</p><h2 id=\"set-clear-objectives\">Set clear objectives</h2><p>Since both development and marketing play vital roles in implementing user experiences that drive business goals, the contributors in question must share clear, common objectives, e.g., projected sales, number of service signups, and brand messaging. </p><p>Reaching those goals sometimes requires both technical and marketing-driven activities, such as code refactoring, site-performance boosts, messaging-success measurements, and analytics gathering. Those work streams, whose specifics are highly contextual to the specific job marketers or developers do, could easily cause conflict.</p><p>To avoid miscommunication, do the following:</p><ol><li><strong>Invite participation from all team members.</strong> Involve them in planning sessions, explain the background of the strategies to be built, and ascertain that everyone is on the same page.</li><li><strong>Set SMART goals.</strong> Create specific, measurable, attainable, relevant, and time-bound objectives.</li><li><strong>Plan together</strong>. Align schedules based on the teams’ different workflows.</li></ol><p>##Understand how the other discipline works</p><p>A healthy dose of the qualities below is key:</p><ul><li><strong>Respect.</strong> To minimize friction, respect for each other's operating methods, styles, and process is essential. Besides acquiring an understanding of the various workflows, team members must be willing to compromise for alignment’s sake.</li><li><strong>Patience.</strong> Be accommodating, thoughtful, and tolerant when explaining processes to the other team. A unified approach like Agile project management can forge collaboration by breaking projects into stages, constantly engaging with stakeholders, and enabling both teams to simultaneously track goals and meet objectives.</li></ul><p>Remember, a world of difference exists in how developers and marketers think. Establishing a mechanism through which they can learn about one another's tasks and routines goes a long way in championing collaboration.</p><h2 id=\"leverage-each-others-skills\">Leverage each other’s skills</h2><p>Developers and marketers contribute unique, value-add skills:</p><ul><li><strong>Developers</strong> can offer product or technical insights by clarifying why certain code approaches and rendering modes help reach marketing goals.</li><li><strong>Marketers</strong> can share user feedback, messaging learnings, and test data with developers as support for spiffing up the UI and product features.</li></ul><p>Essentially, developers work in the context of the “how,” and marketers, of the ”why.” Both are equally valuable for successful projects.</p><h2 id=\"make-data-based-decisions\">Make data-based decisions</h2><p>Data is crucial for measuring success. Developers and marketers play a different role vis-à-vis data:</p><ul><li>Developers create technology for harnessing data that marketers need to optimize conversion.</li><li>Marketers collect data and strategize campaigns accordingly. </li></ul><p>Using analytics tools and personalization engines is instrumental for fulfilling project goals. Ultimately, developers must find a way to integrate “hated tools” so that both teams are happy.</p><h2 id=\"use-the-tools-that-appeal-to-both-teams\">Use the tools that appeal to both teams</h2><p>Tools that propel collaboration fall into different categories. For example, Jira and Linear are process systems, and Figma and Zeplin are design devices. Other tools are slated for website architecture.</p><p>Even though developers love the freedom to choose the tools they prefer to build websites, it comes at the price of abstract interfaces and many open tabs for marketers. As technology evolves, techies must keep up with industry trends without being bogged down by marketers’ tool choices. That’s where headless has failed us: The pendulum of architecture choices to build websites has swung too far. Developers love it, yet marketers hate it. </p><p>A <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">digital experience composition platform (DXCP)</a> affords both developers and marketers control of features, content, and the ever-ticking clock. Though technically agnostic, a DXCP—</p><ul><li>Helps developers funnel data to a front-end channel of their choice without compromises. </li><li>Enables marketers to independently and visually edit content in a no-code environment without having to seek developer assistance.</li></ul><h2 id=\"faithfully-perform-the-paramount-steps\">Faithfully perform the paramount steps</h2><p>By setting clear objectives, understanding each other's processes, leveraging each other’s unique skills, making data-driven decisions, and adopting tools that cater to both parties, marketing and development teams can cooperate smoothly, eliminate roadblocks, and deliver phenomenal projects. With the right strategies and mindset, the sky's the limit for the potential of those high-performing teams to achieve exceptional results.</p><p><a href=\"https://uniform.dev/demo\" rel=\"nofollow\">Check out Uniform DXCP</a>, on which developers and business teams can access all the tools they need to deliver well and fast.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "set-clear-objectives",
          "text": "Set clear objectives"
        }
      },
      {
        "toc": {
          "html_id": "leverage-each-others-skills",
          "text": "Leverage each other’s skills"
        }
      },
      {
        "toc": {
          "html_id": "make-data-based-decisions",
          "text": "Make data-based decisions"
        }
      },
      {
        "toc": {
          "html_id": "use-the-tools-that-appeal-to-both-teams",
          "text": "Use the tools that appeal to both teams"
        }
      },
      {
        "toc": {
          "html_id": "faithfully-perform-the-paramount-steps",
          "text": "Faithfully perform the paramount steps"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-05-03T15:49:29Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_how-to-get-your-webcam-to-look-decent-in-a-few-simple-steps": {
    "date": "2023-03-20T13:01:35Z",
    "title": "How to get your webcam to look decent in a few simple steps",
    "canonical_url": "",
    "description": "If you have used a webcam before you know what it means to look like shit on camera. Even the most...",
    "url": "/writing/how-to-get-your-webcam-to-look-decent-in-a-few-simple-steps",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/infev45k3ve6i4dgtu2r.png",
    "reading_time": "9 min read",
    "uid": "article_entry_uid_how-to-get-your-webcam-to-look-decent-in-a-few-simple-steps",
    "locale": "en-us",
    "tags": [
      "webcam"
    ],
    "created_at": "2023-03-20T13:01:35Z",
    "updated_at": "2023-03-20T13:01:35Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>If you have used a webcam before you know what it means to look like shit on camera. Even the most expensive consumer webcams produce a “meh” result. So why do webcams suck? It’s their design. The webcam form factor has a bunch physical challenges that limits them from producing a good looking picture.</p><p>Beware, the ideas outlined below are based on my experience and are by far not comprehensive or complete. That is not the idea of this post. Someone in the field of cameras will probably pick this apart on details. The global ideas stand, however.</p><h3 id=\"why-webcams-suck\">Why webcams suck</h3><p>Let’s get a bit technical. Almost all webcam <a href=\"https://en.wikipedia.org/wiki/Image_sensor\" rel=\"nofollow\">image sensors</a> are somewhere between 1/4\" and 1/3\" in size and they have a crop factor of around 7. Crop factor is a term that describes the difference between your camera’s sensor size and a traditional 35mm film frame. In the case of a webcam’s image sensor size and its crop factor a normal 18mm lens is the equivalent of a 126mm zoom lens. I might be a bit off here. The idea is that the crop factor plays a huge role.</p><p>A webcam tends to be positioned around 40cm (1.3 feet) from your face. Due to the high crop factor an extremely wide angle lens is needed to get a good visual at that distance. Think about it. If a 18mm lens is the equivalent of an 126mm lens it means that something we consider normal on a SLR camera is extremely zoomed in on a webcam. So, we need to zoom it out. BY A LOT. To do that, we use a wide angle lens.</p><p><img alt=\"Sensor explanation\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16nf6fvk0v76s11zb1ph.png\" width=\"1280\"></p><p>The problem is, the wider you go, the less sharp the picture gets. If there wasn’t enough against the webcam form factor: the lenses in webcams are generally cheap and shitty. The webcam’s physical limitations make it terrible in low light situations. Even with studio lighting the image can appear grainy.</p><h4 id=\"there-are-more-issues-yikes\">There are more issues. Yikes.</h4><p>If you check out high quality content there is always a nice <a href=\"https://en.wikipedia.org/wiki/Bokeh\" rel=\"nofollow\">bokeh effect</a>. The more light a lens can capture (aperture) and the bigger the image sensor, the more bokeh you can expect. Bokeh is awesome, everybody needs bokeh.</p><p>In webcams autofocus works from about 1cm until 60cm (2feet). After that everything is always sharp. Webcams have a shallow depth of field. No bokeh. Not even close.</p><p>Combine a small sensor, a crappy wide angle lens and a shallow depth of field and you have the average webcam. A 200 euro webcam isn’t that much better than a 50 euro webcam. Sad but true.</p><h4 id=\"but-why-does-my-phone-camera-look-so-good\">But why does my phone camera look so good?</h4><p>A real camera or a phone have much more computational power. The camera on a phone is almost its main feature nowadays. It’s where all the advertisement dollars go. Phones have bigger sensors, better lenses and sometimes even a dedicated hardware chip just for image processing.</p><p>Most webcams also have some sort of processing power on board but it always kind of sucks. It mainly compresses the video feed so it’s streamable over the USB connection. Due to the compressed stream the PC hardly needs any processing to show the video. You have no access to aperture, shutter speed or ISO though.</p><p>You can only post process the signal. But the damage is usually already done at this stage.</p><h4 id=\"but-why-arent-there-any-amazing-webcams-out-there\">But why aren’t there any amazing webcams out there?</h4><p>It’s definitely possible and there are niche brands that build 1000 euro webcams. But if you have to spend that much, why not just buy a real camera? The actual market for webcams is likely just for conference calls, skype with family (if you don’t have a laptop or a phone) or content creators who are starting out. If webcams get too expensive, nobody will buy them.</p><h3 id=\"you-can-make-it-work-however\">You can make it work however</h3><p>In this post I’ll outline some tips and tricks you can apply to make your webcam look better. All techniques described below are applicable to any sort of camera setup. If you have a proper camera it just works better. We will be covering two topics. Lighting and post processing settings.</p><h4 id=\"lighting\">Lighting</h4><p>Lighting is by far the most important part of your setup if you want to make your webcam image look good. As mentioned before, webcams are not great in low light situations. To overcome this limitation you have to blast the filming subject (you) with light.</p><h5 id=\"light-temperatures\">Light temperatures</h5><p>There are different types of light that need different white balance settings. Generally light bulbs are yellow and sun light is blue. When combining both you can green a green overtone. White balancing your camera in software is very important in this case.</p><p>I’d suggest not to use sunlight as it is hard to control. Close your blinds and go for light bulbs or LED lights only. There are many cheap options out there. Most lights can deliver different color temperatures ranging from 2500 (sunset) to 10000 (blue sky). Generally 5500 is considered noon daylight.</p><h5 id=\"shadows-diffusion\">Shadows &#x26; diffusion</h5><p>Light can be cast in different ways. Harder shadows and lighting from the top is used to depict movie villains for example. If you want an dramatic look, use hard shadows and light yourself from one side. If you want to look more mainstream use softer shadows and light yourself from more angles.</p><p>To generate softer shadows you have to diffuse your light. The more focused a light source is, the harder the shadows. The more diffusion is added, the softer the shadows. I personally use a couple of cloths of white t-shirt fabric stretched over my lights. Obviously there are also more professional ways to diffuse light but these are not available to everyone.</p><h5 id=\"your-light-setup\">Your light setup</h5><p>Now that we have our color temperatures and diffusion out of the way, let’s talk about how to set up your lights so you are lit properly for the webcam. If you have very limited options, just put a big light behind your camera and blast your face with white light. This will give you a 100% quality boost over having no lights.</p><p>If you have a little bit more flexibility I suggest using a three point light setup. The three point light setup is considered industry standard and will generally give you great results.</p><p><img alt=\"Lighting setup\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/keef3ou8sbzpg24acrzj.png\" width=\"1280\"></p><p>The three point light setup assumes you have a “key light”, a “fill light” and a “hair light”.</p><ul><li>Key light: This is the main light source. It shines directly on the subject, usually from the front right or front left. It establishes the overall look and feel of the shot.</li><li>Fill light: The fill light provides balance to the key light by “filling in” the rest of the subject’s face with softer light. It should be positioned to the side opposite side of the key light.</li><li>Hair light: Also called “back light” or “rim light”. This light creates a flattering rim of light around the subject, separating him or her from the background.</li></ul><p>This is how to set up your lights. To start turn all lights off so you are in a dark room.</p><ul><li>Turn on your key light. Your key light is the brightest light in the scene and the one that creates the overall feel of the shot. Adjust its brightness to your liking. You should position the key light in a relatively high spot to reduce shadows on the face.</li><li>Add your fill light. The fill light should be on the opposite side of the key light, but still in front of the subject. Don’t make the key and fill lights symmetrical. The fill should be at the subject’s face level, and should get rid of any remaining shadows. The intensity of the fill light should be about half that of the key light.</li><li>Bring in the hair light. The back light separates you from the background. It can be placed anywhere behind the subject. Make sure to keep it out of the shot. Angle it down from a high position to achieve a sharp outline on the edge of the subject.</li></ul><p>If there are lights behind you, make sure these have a very low intensity so they do not distract from you, the subject of the shot. To make the shot more interesting you can add some fun colored lights behind you as long as they are not too distracting. This is obviously not needed but it’s a fun thing to add.</p><h3 id=\"application-settings\">Application settings</h3><p>We are almost there! Let’s tweak some settings to make the camera quality appear much higher.</p><h4 id=\"turn-things-off\">Turn things off.</h4><p>I have a Logitech webcam. This camera comes with a little control panel that allows for some post process tweaking of the camera feed. If you are well lit you can turn off a bunch of things in this interface. First of all, keep the settings for brightness, contrast, saturation and sharpness at the default. We will fix these at a later stage.</p><ol><li>Set the white balance on a fixed setting and make sure it is not set to auto. For my setup a white balance at around 4000 works.</li><li>Make sure to turn off Backlight compensation and Gain. We do not need these as we are well lit.</li><li>In the next tab make sure exposure is set to “auto”. If you attempt to expose yourself manually with a Logitech webcam all hell brakes loose. The image either looks like crap or your framerate will drop significantly.</li><li>Make sure to turn off Low Light compensation. There is no need for this as you are well lit.</li></ol><p><img alt=\"Webcam settings\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rktns1m78yyy1owfexqd.png\" width=\"1280\"></p><h4 id=\"color-correction\">Color correction</h4><p>I use OBS, which comes with a great plugin to color correct the video feed from your webcam. The smallest adjustments give a great result. Stay subtle with the changes and your video will look a lot better fast.</p><h4 id=\"lut\">LUT</h4><p>Instagram filters can make a simple picture of food look like a very fancy picture of food. You can use these same kinds of filters on webcams too! It’s amazing what a little cosmetic tweak can do to your video quality. The filters I’m talking about are called <a href=\"https://en.wikipedia.org/wiki/3D_lookup_table\" rel=\"nofollow\">LUT</a>. LUT’s are generally used in the professional film world to color grade a movie.</p><p>LUT’s are simple, easy-to-use filters that can be applied directly into <a href=\"https://obsproject.com/\" rel=\"nofollow\">OBS</a> allowing your webcam presentation to become brighter or more cinematic. For a great free pack of LUT’s go here: <a href=\"https://gamingcareers.com/guides/30-free-webcam-filters-obs/\" rel=\"nofollow\">https://gamingcareers.com/guides/30-free-webcam-filters-obs/</a></p><h4 id=\"you-can-try-one-more-thing\">You can try one more thing</h4><p>If you have a cheap camera with a shallow depth of field and your lights are set up well, you can use a program called xsplit vcam to create a software bokeh effect! Beware, you need a relatively strong graphics card and the lighting needs to be spot on. Also, the program is not free.</p><h3 id=\"thats-it\">That's it</h3><p>This is the result I got after a bit of research and tweaking settings.</p><p><img alt=\"Before\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53ums57svft6zuza79l9.png\" width=\"1280\"></p><p><img alt=\"After\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h293vez6piv68hyzfy98.png\" width=\"1280\"></p>",
    "tocs": [
      {
        "toc": {
          "html_id": "why-webcams-suck",
          "text": "Why webcams suck"
        }
      },
      {
        "toc": {
          "html_id": "you-can-make-it-work-however",
          "text": "You can make it work however"
        }
      },
      {
        "toc": {
          "html_id": "application-settings",
          "text": "Application settings"
        }
      },
      {
        "toc": {
          "html_id": "thats-it",
          "text": "That's it"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-20T13:01:35Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_why-i-didnt-run-the-2016-marathon": {
    "date": "2023-03-18T22:52:37Z",
    "title": "Why I didn't run the 2016 marathon",
    "canonical_url": "",
    "description": "After four and a half months of full on training I’ve decided not to run the Amsterdam marathon on...",
    "url": "/writing/why-i-didnt-run-the-2016-marathon",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afpsw3jbsie5bf7w8wp9.jpg",
    "reading_time": "6 min read",
    "uid": "article_entry_uid_why-i-didnt-run-the-2016-marathon",
    "locale": "en-us",
    "tags": [
      "personal",
      "fitness",
      "running"
    ],
    "created_at": "2023-03-18T22:52:37Z",
    "updated_at": "2023-03-18T22:52:37Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>After four and a half months of full on training I’ve decided not to run the Amsterdam marathon on October 16th 2016. I’ve learnt a life lesson about the balance between the load and capacity of the body while training for a marathon.</p><h3 id=\"tldr\">tl;dr</h3><p>No matter the dedication to training, a great food plan or sheer willpower, circumstances and external stressors will make your body say stop at a certain point. If the load is higher than the capacity for too long the body will get pushed too far and won't be able to cope with the added stress.</p><h3 id=\"the-load-capacity-model\">The Load-Capacity Model</h3><p>The Load-Capacity model was created in 1990 by A.T.M Bernards and L.H.A Hagenaars, two Dutch physiotherapists. The MDBB (Dutch abbreviation) model is meant to be a conceptual model for physiotherapy. <a href=\"https://www.researchgate.net/publication/224983108_Het_meerdimensionale_belasting-belastbaarheidsmodel_een_conceptueel_model_voor_de_fysiotherapie\" rel=\"nofollow\">This is one of their publications from 1999</a>. They created this model to add the <a href=\"https://en.wikipedia.org/wiki/Biopsychosocial_model\" rel=\"nofollow\">biopsychosocial</a> element to physiotherapy treatments.</p><p><em>I just want to caveat that even though there is some merit to the claims made in this post, the Load-Capacity model is generally taught at physiotherapy school, most of the conclusions I ended up with are anecdotal. I’ll be using the Load-Capacity model specifically for my personal experience so my writing will be somewhat one-sided.</em></p><p>On the physical side, the Load-Capacity model is a key concept in preventing and managing running injuries. It is all about understanding the balance between training load and the body’s capacity to handle that load. In a nutshell it’s a case of working within your limits and not pushing the training beyond what the body can cope with.</p><p>Then there is the mental side. External stressors will also impact the balance between capacity and load. If you keep the load the same but your capacity goes down due to grief or work stress, the body will be pushed over the edge of what the it would normally tolerate.</p><p>The load-capacity balance is different for everybody and could also change over time. As it did for me. I upped the load in a steady way by training for the marathon but my body’s capacity went down due to external stressors which I wasn’t able to identify. For one, I have a thick skull but I also wasn’t used to the fact that my body would tell me to stop. I could do whatever I wanted to it without stretching or any kind of warm up. If I twisted my ankle the pain would go away in a day.</p><p><img alt=\"Running\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtcthucv7qthp2sra697.jpg\" width=\"1280\"></p><p>This year I was always stiff and I had to concentrate way harder to stick to proper form. Suddenly I got little pains like plantar fasciitis and an inflamed Achilles tendon. Even after stretching out my hips and calves it felt like I was running on stilts. The pains and stiffness started two months into training. Four months in, I started to get extremely tired, I developed a rash and I my IBS started to play up way more often. I also got sick after doing longer runs at marathon pace.</p><p>The things I just described start to happen when the load is surpassing the capacity of the body for a length of time. I slowly got <a href=\"https://en.wikipedia.org/wiki/Overtraining\" rel=\"nofollow\">overtrained</a>. As my body could normally handle anything I threw at it, I was a bit oblivious towards the symptoms of over training.</p><p>My sweet wife is a physiotherapist and saw me coming from a mile away. Classic. I needed my wife and many of my peers to tell me that I was over trained. The cause was a combination of training and external circumstances.</p><h3 id=\"this-is-what-happened\">This is what happened</h3><p>I started off well and I was determined to make less mistakes in the preparation this time around. I had plans to have my diet in check from day one. I would go to the gym as well. Next to this I kept a record of everything. Training sessions with Strava, sleep analysis and heart rate with Sleepcycle and food and weight with MyFitnessPal.</p><p>This year I decided to go for a training plan which let me train five times per week. Of these five sessions only three where running. The other two were either biking or a gym session. Running only three times per week meant that I could be flexible with the days as I sometimes work nights or have social events to attend. The plan had me running more miles each run but at a slow pace.</p><p>The first couple of months everything went well. I actually beat my personal bests on the 5km and 10km quite easily.</p><p>Check out <a href=\"https://www.strava.com/activities/628465080\" rel=\"nofollow\">this</a> Strava run and <a href=\"https://www.strava.com/activities/655258214\" rel=\"nofollow\">this</a> one.</p><p>And I also found back my love for cycling. I bought the cheapest bike with the best reviews. It has a Microshift group set which isn’t as precise but works very well if maintained properly.</p><p>Two and a half months in, things started to feel a bit painful, especially after running. I realise now that the stress I experienced outside of training impacted my capacity to handle the increased training load.</p><p>A couple of things happened at the same time. We had a cancer scare in the family for which I went to Amsterdam for a while. Things are better now but I’ve had a lot to worry about. Right after I came back to Paris my wife miscarried. We’ve been trying to have a baby for a long time and each time it fails it’s like getting hit in the face.</p><p>On top of these two things I found out that I have <a href=\"https://en.wikipedia.org/wiki/Irritable_bowel_syndrome\" rel=\"nofollow\">IBS</a>. I’ve probably had it for a long time but it started to flare up around March this year. I’ve been trying to find the right diet and it’s not easy.</p><p>It seems that the absorption of nutrients isn’t working well due to the inflammation in my gut. I had to try to eat less foods that contains <a href=\"https://en.wikipedia.org/wiki/FODMAP\" rel=\"nofollow\">FODMAPs</a> so that my insides would relax a bit. Having a constant belly ache and bad sleep as a result does not help the capacity of the body to deal with an increased training load. I made a little <a href=\"https://timbenniks.nl/fodmap\" rel=\"nofollow\">tool</a> to see which foods are allowed on the low FODMAP diet.</p><p>Funnily enough I felt quite good during runs. Well, except when it was hot. I hate warm humid weather and have I trouble training in it. It was usually after the runs that I would suddenly feel the pain my body was in. Willpower is an amazing thing. I think I could actually run the marathon on sheer brain juice tomorrow. It would do horrible things to my body though.</p><p>The run below seems to have gone very well but I got sick after and couldn’t train for a week. My whole body ached and I slept all weekend.</p><p>Check out <a href=\"https://www.strava.com/activities/683549355/\" rel=\"nofollow\">this</a> Strava run.</p><h3 id=\"what-i-have-learnt\">What I have learnt</h3><p>No matter the dedication to training, a great food plan or sheer willpower, circumstances and external stressors will make your body say stop at a certain point. If the load is higher than the capacity for too long the body will get pushed too far and won’t be able to cope with the added stress.</p><p>It took 20 years to start enjoying sports. I lost a <a href=\"https://timbenniks.dev/articles/my-fitness-story\" rel=\"nofollow\">lot of weight</a> and got hooked. I could throw anything at my body and it would bounce back. Now it doesn’t and I have to accept that. This summer of training thought me to be humble and to listen both my peers (my wife mainly, as she is always right) and my body.</p><p>Not running this race was a hard decision for me as I always stick to the challenges I set for myself. I’ve decided that feeling good is more important than running a marathon. I’ve done it once before and have proven that I can do it. My body can deal with running but it’s not comfortable doing it. I have my build against me. I’m going to focus on being flexible and strong. I’ll be running shorter distances and I’ll be cycling way more. Also, I’m going back to the gym to do what my body was build to do. Lift iron. I might even try yoga…</p><p><img alt=\"Running\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt09jc5r7w862n5smsas.jpg\" width=\"1280\"></p><h3 id=\"some-numbers\">Some Numbers</h3><ul><li>I ran 483.4km over 51 runs with an average pace of 05:40</li><li>My average distance was 9.5km per run</li><li>I went from 96.1 to 92.9 kilos</li><li>I slept 8h 20m a night on average</li><li>I ate 2258kcal a day on average</li><li>I took 9565 steps a day on average</li><li>I had an average resting HR of 63.5bpm</li><li>My average food macro balance was 62.2% carbs, 16,2% fat, 21,5% protein.</li></ul>",
    "tocs": [
      {
        "toc": {
          "html_id": "tldr",
          "text": "tl;dr"
        }
      },
      {
        "toc": {
          "html_id": "the-load-capacity-model",
          "text": "The Load-Capacity Model"
        }
      },
      {
        "toc": {
          "html_id": "this-is-what-happened",
          "text": "This is what happened"
        }
      },
      {
        "toc": {
          "html_id": "what-i-have-learnt",
          "text": "What I have learnt"
        }
      },
      {
        "toc": {
          "html_id": "some-numbers",
          "text": "Some Numbers"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T22:52:37Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-2015-paris-maratho": {
    "date": "2023-03-18T22:45:48Z",
    "title": "The 2015 Paris marathon",
    "canonical_url": "",
    "description": "Exactly one year ago, when we had just moved to Paris, the marathon passed by our apartment in Rue...",
    "url": "/writing/the-2015-paris-maratho",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urlbqaankzj82uhwrfq7.jpg",
    "reading_time": "9 min read",
    "uid": "article_entry_uid_the-2015-paris-maratho",
    "locale": "en-us",
    "tags": [
      "personal",
      "fitness"
    ],
    "created_at": "2023-03-18T22:45:48Z",
    "updated_at": "2023-03-18T22:45:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Exactly one year ago, when we had just moved to Paris, the marathon passed by our apartment in Rue Saint-Antoine. Seeing all these people swooshing by impressed me so much that I signed-up for the 2015 marathon on the spot. The goal was set, the easy part was over.</p><p><img alt=\"Tim Running\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gu3psk58kwz3gfppsmc8.jpg\" width=\"1280\"></p><p>I gave myself five months to conquer the beast. 42.195 kilometres. After running on and off for a couple of years it was time to get serious. As I work for AKQA I naturally chose to train with the Nike+ app and all the related products.</p><p>Nike’s marathon training program was brutal. Even at the rookie level it made me run five times a week from the get-go. After living the good life for eight months in Paris both my endurance and cardio vascular strength were shit. It’s safe to say I was happy that the distances were short for the first couple of weeks.</p><p>I didn’t have any specific goals in mind, just general stuff like: “I want to get a bit lighter so the running gets easier” or “I’d love to set a new half marathon personal best at one point”. I trusted the rigorous training schedule would get me there eventually.</p><p>It didn’t. The training was so intense that I had skip workouts and I had to start experimenting with food to figure out how I could get my legs ready for the next run. My body could just not cope with the sheer amount of kilometres I had to run each week.</p><h3 id=\"january\">January</h3><p>After two months of pain I had finally found a balance. Turns out that eating super low fat and high carb was the best for my recovery. I was basically eating according to the 80/10/10 principle. 80% carbs, 10% fats, 10% protein. I’m not preaching this way of eating, it was just great for me.</p><p><img alt=\"January\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z60d58hzj247adpsmsn.jpg\" width=\"1280\"></p><p>To achieve eating this macro ratio I had to cut out all animal products. If I ate too much fat on a rest day, like when you go out to dinner and you don’t want to be the asshole who can’t eat anything, I would have heavy legs the next day.</p><p>I started eating copious amounts of fruit, rice, pasta, quinoa and veggies. My brain started functioning ten times better and I didn’t even think about coffee anymore. January was awesome. I ran pain free and the long distances started to become enjoyable. Good times. I ran 147km that month. This might not seem a lot to seasoned runners but I came from ~50km a month. I started a new chapter in my running career.</p><h3 id=\"february\">February</h3><p>We went on a ski trip in the beginning of February. I was an amazing holiday with loads of skiing, good food and laughs. I did some workouts in the gym and a proper mountain walk. I really hoped I hadn’t lost my running gains.</p><p><img alt=\"February\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/etfg0xoxax0zbyzrmcig.jpg\" width=\"1280\"></p><p>The first Monday back I had a nasty cough but decided to at least try my fast 8km run I had planned for that day. Bad decision. Over the course of the week I developed a bronchitis and both the doctor and my wife (the boss and a bad ass physiotherapist) forbade me to run the following two weeks.</p><p>I slept a lot and kept on eating well and as soon as the illness lifted I started running short distances again. I cursed my way through the first week. Even though the running hurt, my pace was still fast.</p><p>In February I ran the awesome amount of 37.98km over five runs. The last of the five was the most painful 15km run of my life. We’d strolled around “Le Salon d’Agriculture” for three hours before. We tasted wines and tried cheeses. I had forgotten to drink any water. Rookie mistake. Lactic acid legs for days!</p><h3 id=\"march\">March</h3><p>Back to awesome. I ran 181km in 4 weeks. An absolute record month in my book. I had an amazing run in Amsterdam on which my whole family followed me by bike. I also ran personal bests on the 5km, 10km, 15km and 21km. I decided to drop the Nike+ program as I had missed too much the month before. This was a smart move. The Nike+ program would have burnt me out.</p><p>I had been in training for 4 months by now and I had been sick the month before. The exhaustion was setting in a bit. I didn’t particularly feel it in my legs, but I started having problems staying focused on evening runs. One time I had to jump aside while a policeman was arresting someone. I flipped my ankle and had to walk home for an hour.</p><p><img alt=\"March\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r8u4pxda4nalwwa4x0o.jpg\" width=\"1280\"></p><p>I felt stupid for being distracted. Even though I had super light shoes without much cushioning I stopped being in touch with the ground I was running on. Sounds like I’m a hippy aye? It’s a runners thing.</p><h3 id=\"april\">April</h3><p>Only two weeks left. I did a 27km run in a very busy, rainy and hilly Paris. After that I was so exhausted that I decided to start my tapering period a week early. I thought I’d hurt my feet too much and suddenly got very nervous. My marathon veteran colleagues told me this is normal and I should just chill out.</p><p>I only ran a handful of runs up until the big day. The thing I liked most about the tapering period was the carbo-loading. My food intake doubled in the week before the big race. #CTFU. I felt amazing and started dropping weight. I should have eaten much more the past four months.</p><p><img alt=\"April\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4p4xky34q3vxlhfcgfg6.jpg\" width=\"1280\"></p><h3 id=\"d-day\">D-DAY</h3><p>I was so nervous I hardly even looked at the enormous amount of runners around me. I was standing on the Champs-Elysees with 50.000 other athletes. This was going to be the most epic challenge of my life.</p><p><img alt=\"D-DAY\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6qsgkyqt7mudojkqok6z.jpg\" width=\"1280\"></p><p>The first bit felt like heaven. Especially because my mate <a href=\"https://www.facebook.com/chrisfinch\" rel=\"nofollow\">Chris</a> had just given me an amazing pep-talk over the phone. The Champs Elysees was mine and mine alone. Turns out I clocked the first kilometre at a 6:12 pace. Slow as fuck but a nice start to a long day. After that I slowly picked up the pace to a nice average between 5:25 and 5:35.</p><p>Around the 7km point my awesome friend <a href=\"https://www.instagram.com/henrike.theda.klug/\" rel=\"nofollow\">Henrike</a> spotted me from the sidelines and joined me for about 1.5km. We picked up the pace and race had properly started.</p><p>It was super warm so I drank water every chance I got. My training had been during winter time so I was used to running with a maximum temperature of 10 degrees celcius. Even though it was warm I ran a great half marathon (for me at least, 01:52:34).</p><p>The heat had silently sneaked up on me and at kilometre 22 the wall hit me like a hammer.</p><h3 id=\"the-wall\">The Wall</h3><p>The wall is really the biatch people say she is. I could not even put one foot in front of the other anymore. It took me half an hour to stumble to the next food station. It took 35 minutes to run 3km. I had some water, a sugar cube, a GU gel and a slice of mandarin. Obviously this was way too much so I felt sick for the next 5km. My brain was telling me to stop but I just couldn’t let go.</p><p>In the following kilometres it didn’t get any better. I managed to find a happy medium in between running and walking. My nike+ app was all over the place and wasn’t accurate at all anymore. At one point I just turned it off and upped my Spotify volume. The next song was by Motörhead and I felt my heart skip a beat. The race was back on.For 2km.After that I went back to my previous state.</p><p>During the five months I trained my wife had always been there for me. She gave me tips and picked me back up when I had hit a low point. When I saw her at kilometre 30 I couldn’t be happier. I gave her a quick kiss and a smile and I was on my way again.</p><p>Just before hitting the Bois de Boulogne I became captain slow. I was having a real rough patch when I heard people shout my name. These people were <a href=\"https://www.facebook.com/photo.php?fbid=10153775712979392&#x26;set=a.10151354689589392&#x26;type=1&#x26;theater\" rel=\"nofollow\">Marie and her son Adrian.</a> It’s great to have the support of your friends. It made me start running again. As it turns out, my wife had been sending loads of photo’s to my family back in Amsterdam. They had been following my every move.</p><h3 id=\"bois-de-boulogne\">Bois de Boulogne</h3><p>Bois de Boulogne was truly intense. They call it “the march of the death” and rightfully so. It starts at kilometre 35, there are hardly any supporters and it’s mostly uphill.</p><p>I did the “pain shuffle” for the last 7km. The pain shuffle means that you can’t really bent your legs anymore but you still run. In my case, stumbling without falling. I ran from km sign to km sign without even hearing my music.</p><p>When I saw the 40km sign I decided to not walk anymore and I did whatever it took to make that happen. At kilometre 41 I noticed that a lot of the faster runners were coming back to show us their medals and cheer us on. There was an amazing feeling of companionship in the pack of runners.</p><p>At kilometre 42 I saw the finish AND my wife at the same time. It was finally over. I didn’t even bother to sprint.</p><p>It took me four hours and forty six minutes. A total pain train. While riding home on the metro I felt a little shit because I walked so much. Should I have gone deeper? But while writing this piece, pride is taking over. I actually did this. My first marathon in the heat in under five hours. #putain.</p><p><img alt=\"finisher\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdxzyzf1wztrl220nwa4.jpg\" width=\"1280\"></p><h3 id=\"some-numbers\">Some Numbers</h3><ul><li>I ran 615.14km over 67 runs with an average pace of 05:42</li><li>My average distance was 9.18km per run</li><li>I went from 95 to 86.7 kilos (and lost all gains)</li><li>I slept 7h 50m a night on average</li><li>I ate 1840kcal a day on average (probably not enough)</li><li>I took 12609 steps a day on average</li></ul>",
    "tocs": [
      {
        "toc": {
          "html_id": "january",
          "text": "January"
        }
      },
      {
        "toc": {
          "html_id": "february",
          "text": "February"
        }
      },
      {
        "toc": {
          "html_id": "march",
          "text": "March"
        }
      },
      {
        "toc": {
          "html_id": "april",
          "text": "April"
        }
      },
      {
        "toc": {
          "html_id": "d-day",
          "text": "D-DAY"
        }
      },
      {
        "toc": {
          "html_id": "the-wall",
          "text": "The Wall"
        }
      },
      {
        "toc": {
          "html_id": "bois-de-boulogne",
          "text": "Bois de Boulogne"
        }
      },
      {
        "toc": {
          "html_id": "some-numbers",
          "text": "Some Numbers"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T22:45:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_my-fitness-story": {
    "date": "2023-03-18T22:39:46Z",
    "title": "My Fitness Story",
    "canonical_url": "",
    "description": "From fat and sick to slim and happy   Aside from a short period in high school I have always...",
    "url": "/writing/my-fitness-story",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/86xayxbotaqwk8get75h.jpg",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_my-fitness-story",
    "locale": "en-us",
    "tags": [
      "fitness",
      "personal"
    ],
    "created_at": "2023-03-18T22:39:46Z",
    "updated_at": "2023-03-18T22:39:46Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<h2 id=\"from-fat-and-sick-to-slim-and-happy\">From fat and sick to slim and happy</h2><p>Aside from a short period in high school I have always been a chubby kid. When I lived at home my mom made sure I didn’t go overboard with food. She stopped me here and there when needed and always made sure we had healthy food on the table.</p><p>After highschool I started living on my own and became a lot more active as a musician. I got used to a very burgundian lifestyle and started eating all kinds of junk. The free drinks for musicians also didn’t help.</p><p>I have always been interested in muscles and posture but never had the discipline to change myself into something I liked. I quickly turned into a lazy musician. Beer and fast food, either before or after a gig, were the norm. I didn’t know any better and ate highly refined foods containing a shitload of ingredients with long and incomprehensible names. Looking back it’s unbelievable how little I knew about stuff I put in my body.</p><p>Being fat was always in the back of my mind and it nagged at me. When I reached 120kg I felt horrible and knew change was needed. I was always sweating, tired and out of breath. I had high blood pressure and was often feeling ill. Diabetes type 2 was creeping up on me.</p><p><img alt=\"fat\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z7h5x2kxppg53w4is65y.jpg\" width=\"1280\"></p><p>Even after this turning point I was still completely inadequate at sports and I didn’t have any discipline. I didn’t even know how to properly contract my muscles to lift something. I had no body sense at all.</p><p>I asked my mate <a href=\"https://www.facebook.com/chrisfinch\" rel=\"nofollow\">Chris</a> to help me out. He was (is) a complete legend and instantly jumped at the chance to help a friend. We started doing his “half hour of power”, lifted weights and ran as often as possible.</p><p>Well, I tried.</p><p>I had excuses. Many of them. “But I had a gig last night” or “I’m still too sore from last week”. I was a complete pussy and it must have frustrated Chris. But he was strong and pulled me through.</p><p>As I finally saw some results I overcame my disciplinary problems step by step. I changed my diet and the fat started coming of quickly. I even gained some muscle.</p><p>I started researching and a whole world of bro-science opened up to me. I did programs like P90X, 5x5, and 4-hour body.</p><p><img alt=\"weightloss\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0wcd7nly7arzfjs9glt.jpg\" width=\"1280\"></p><p>The thing that helped me most was my Facebook activity. I posted my weight daily. People would respond if it went up or down and it kept me motivated. This was the first time in my life peer pressure actually had a positive influence on my state of mind.</p><p><img alt=\"weightloss\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oa7r37rqrhgldhtegpd.jpg\" width=\"1280\"></p><p><img alt=\"guitars\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4yyrv0qc0q0r59piv0n.jpg\" width=\"1280\"></p><p>In April 2014 my wife and I moved to Paris. At that point I was vegan for half a year and I was at my lightest weight since I started training. We had to deal with different stress factors when we arrived and I let go of the strict livestyle a little and gained some weight again. The cheese, wine and French baguettes are too awesome not to enjoy. In January 2014 I got up to ~95kg and Paris had officially turned me into a croissant.</p><p>But I wasn’t a croissant for long. I started lifting some weights again and slowely started to get back into it. When the marathon passed by our apartment in Rue Saint-Antoine in April 2014 I signed up on the spot. I became a long distance runner over night. New goals were set, and crushed over the proceeding six months.</p><p><img alt=\"running\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oph2vujeha2kjojtab6i.jpg\" width=\"1280\"></p>",
    "tocs": [
      {
        "toc": {
          "html_id": "from-fat-and-sick-to-slim-and-happy",
          "text": "From fat and sick to slim and happy"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T22:39:46Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_make-the-web-greener-luxury-edition": {
    "date": "2023-03-18T22:30:27Z",
    "title": "Make the Web Greener, Luxury Edition",
    "canonical_url": "https://www.valtech.com/insights/make-the-web-greener-luxury-edition/",
    "description": "If the internet were a country, it would be the world’s sixth biggest polluter.   The...",
    "url": "/writing/make-the-web-greener-luxury-edition",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3e00qrk4jojitb5tu06.jpg",
    "reading_time": "6 min read",
    "uid": "article_entry_uid_make-the-web-greener-luxury-edition",
    "locale": "en-us",
    "tags": [
      "webdev",
      "environment"
    ],
    "created_at": "2023-03-18T22:30:27Z",
    "updated_at": "2023-03-18T22:30:27Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<h2 id=\"if-the-internet-were-a-country-it-would-be-the-worlds-sixth-biggest-polluter\">If the internet were a country, it would be the world’s sixth biggest polluter.</h2><p>The internet consumes around 416TWh per year in electricity. That number does not say much until you compare it to the 300TWh the United Kingdom consumes. These are staggering numbers, and they will only go up as the internet keeps growing. Whether you realize it or not, carbon emissions are generated all over the place.</p><p>The average website produces 1.76 grams CO2 per page view. For a website with 10,000 monthly page views, that is 211 kg CO2 per year or about twice the weight of a professional basketball player. This is more carbon than ten trees can absorb. If you think about how many websites we have on the internet, this comparison paints a pretty scary picture.</p><h3 id=\"the-luxury-dilemma-the-rich-experience-and-fast-page-loads\">The Luxury Dilemma: The Rich Experience and Fast Page Loads</h3><p>Every web page is crafted with art-directed elements that tell the right story. Luxury product pages are rich experiences that make the user linger and enjoy the ride. This approach is great for the potential customer, but there is a dark undertone when we consider the environment. These pages are full of heavy images, videos and animations. The heavier the page, the more carbon is emitted. If pages take longer to load, the emissions go up due to more device usage–and the antenna and screen are used for a longer period too.</p><p>There are some conflicting goals within luxury on the web. We want a rich experience, but we also want hyper-fast page loads. We all know that slow pages mean more user drop-off. And to make matters worse, we also need to think about the environment. We need to contain how much carbon is blasted into the atmosphere when someone visits a page.</p><h3 id=\"how-to-reduce-carbon-emissions-from-your-website\">How to Reduce Carbon Emissions from Your Website</h3><p>The above describes a complicated mix of problems to solve. We know that carbon emissions are lowest if:</p><ul><li>A page is fast to find</li><li>The page loads fast and with little resources</li><li>Users stay on a page for a very short time</li></ul><p>These three points are hard to carry out in the current way of working in luxury. That is not because we do not know how to build websites but because the goals are different. We want visitors to explore the brand, linger and become influenced by the product story. They should become lifelong customers. Sadly, this goes against what is best practice for websites with a low carbon footprint.</p><h3 id=\"being-sustainable-without-compromising-quality\">Being Sustainable Without Compromising Quality</h3><p>But fear not: There is a solution that can get us much closer to being sustainable. We can even keep the same level of quality we have now. In addition to being greener, this solution makes our websites more accessible to people in upcoming markets. The answer is: optimization of image and video delivery. We solve the problem by reducing excess and only loading what is needed in the context of the user.</p><h3 id=\"are-we-there-yet-optimizing-media-asset-delivery\">Are We There Yet? Optimizing Media Asset Delivery</h3><p>Most traditional CMS systems focus on content editing or cataloguing of content and not on serving of content per se. Serving the content is part of the suite of tools in the platform, but the focus tends to be on other aspects. We call this the “best-of-suite” approach where one vendor deals with all aspects of the website.</p><p>Nowadays, there are companies that solve specific problems within the eco-system of websites. We call these “best-of-breed” solutions, and they tend to be cloud native SaaS companies. Among these companies, there is a category that only deals with media asset delivery.</p><p>Images and videos are particularly hard. If we ask a content editor, filmmaker, or web developer how to optimize assets for the web, they generally do not know. The same goes for the best-of-suite CMS systems. They do not specifically optimize assets for the web—they serve them as is.</p><p>This leaves the responsibility to the content editor. We have seen people struggle with photoshop and not know how to optimize an image. Teaching courses and paying for Adobe licenses is commonplace and awfully expensive.</p><p>Fortunately, there is a plethora of ways to optimize images and videos for the web—and the SaaS solutions mentioned above take care of the problem for you. They serve assets in the right format for the user’s context (browser, device, resolution). And they reduce the file size with AI to be indistinguishable from the original—doing this by hand as a content editor is impossible.</p><p>We have had projects where the page weight dropped by 90 percent without loss of quality. Content editors would only upload the original image and the system did the rest.</p><h3 id=\"loading-the-right-assets-in-the-context-of-the-user\">Loading the Right Assets in the Context of the User</h3><p>Next to serving optimized assets, the most gain is made when not serving them at all. As funny as this may sound, it is the most effective way to have a low-carbon website. If a user never scrolls down or never opens the big mega menu, what is the use in loading these assets in the first place? You should only load assets you know the user will see. We call this “lazy loading,” and it is one of the most powerful tools in the bag of tricks of web developers.</p><p>Next to lazy loading, it is also important to load assets in the right context. If a user visits your website on a phone, make sure to load an image with the same resolution the phone has. Loading bigger assets unnecessarily degrades the user experience. It also makes the website have a higher carbon footprint due to excessive file size.</p><p>The same goes for file types. If you want an animated background image on the hero banner (we all do), do not use a GIF, but rather a video. GIF’s are about five times as big as videos and tend to not work well on mobile devices.</p><h3 id=\"looking-ahead-on-website-sustainability\">Looking Ahead on Website Sustainability</h3><p>We cannot always optimize our web pages according to the best practices for low-carbon websites. This is just the nature of luxury. But we can focus on smaller parts of the equation that have a huge influence on how sustainable the website is. All of this can be accomplished without compromising on quality.</p><p>Look at the future and choose a best-of-breed solution that handles one of the most complex parts of the web: images and media. By combining optimized assets and lazy loading we make our pages lighter. This means they are more accessible to new customers in emerging markets.</p><p>And wouldn’t it be nice if content editors did not need photoshop licenses anymore? The overhead of training and the extra process is not worth it.</p><p>Instead, have your media delivered by a specialized solution—Mother Nature will thank you for having a low-carbon website.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "if-the-internet-were-a-country-it-would-be-the-worlds-sixth-biggest-polluter",
          "text": "If the internet were a country, it would be the world’s sixth biggest polluter."
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T22:30:27Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_how-to-dynamically-stream-video": {
    "date": "2023-03-18T21:56:45Z",
    "title": "How to dynamically stream video",
    "canonical_url": "",
    "description": "Build it yourself or use Cloudinary   Dynamic video streaming is a video delivery technique...",
    "url": "/writing/how-to-dynamically-stream-video",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wx2ix9t60eajoccgjh7.png",
    "reading_time": "11 min read",
    "uid": "article_entry_uid_how-to-dynamically-stream-video",
    "locale": "en-us",
    "tags": [
      "video",
      "cloudinary",
      "streaming"
    ],
    "created_at": "2023-03-18T21:56:45Z",
    "updated_at": "2023-03-18T21:56:45Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<h2 id=\"build-it-yourself-or-use-cloudinary\">Build it yourself or use Cloudinary</h2><p>Dynamic video streaming is a video delivery technique that adjusts the quality of a video stream in real time. It does this according to detected bandwidth and CPU capacity of a user. In this article we will explore the two techniques which allow you to dynamically stream video.</p><p>HLS and MPEG-DASH are the two most popular formats out there. Dynamic or adaptive video delivery requires outputting a video in different quality settings along with some additional files. Both HLS and MPEG-DASH have different approaches to the problem.</p><p>The process of making adaptive streaming work is complex. Most services out there do not provide an end-to-end solution for this and the ones that do a are quite costly. The adaptive video streaming paradigm is not one that many companies have conquered as it requires specific knowledge and access to hardware. There is a reason we don't have many competitors for Netflix and YouTube. Adaptive streaming of video is hard.</p><p>First we’ll go into how adaptive streaming works and then I’ll explain exactly how to do this yourself. It’s much easier than you think once you have the knowledge and the right third party tool to do the heavy lifting.</p><h3 id=\"how-adaptive-video-delivery-works\">How adaptive video delivery works</h3><p>The video stream adapts itself based on a set of rules. The user’s bandwidth, CPU load and video player resolution on the page. To be able to stream adaptively you need to be able to stream different versions of a video. Each variant is of different quality, has a different bitrate and potentially has a different codec or resolution. Think of it as progressive enhancement in web development. The simplest stream always works and based on the features you have (in this case, CPU power, bandwidth, resolution), you get a nicer looking video stream.</p><p>Each adaptive video is also joined by an index file that specifies predefined segments of the video. In the HLS standard these segments are usually 10 seconds long where in MPEG-DASH we use 1 second. There is also a master playlist that points to the available video variations with additional information about each one.</p><h4 id=\"an-audio-playlist-adaptation\">An audio playlist adaptation</h4><p>It’s pretty cool that dynamic video streaming is based on the spec from the M3U8 audio playlist. M3U8 was originally designed for audio files, such as MP3, but nowadays it is commonly used to point media players to audio and video sources.</p><p>An adaptive streaming video player uses the playlist information to decide which of the available video variations fits the user’s network conditions, CPU load or resolution best. It can switch to another source at each 10 second segment (these segments can also be shorter, see examples below) if the network conditions change.</p><p>This approach works well to minimise bandwidth use and optimise it for a smooth playback for everybody who watches the video stream. It can also be used the other way around, if the streaming service is completely overloaded it can send a video stream with a smaller bitrate or resolution to the viewer.</p><h3 id=\"about-hls-and-mpeg-dash\">About HLS and MPEG-DASH</h3><h4 id=\"hls\">HLS</h4><p>HLS was originally created by Apple to provide video for the iPhone, but now it’s a common format used across HTML5 web applications. You’ll need to encode your video with H.264 or HEVC/H.265 codecs, which can be decoded by all major browsers. With HLS, the video is chopped up into 10 second intervals and sent to the user.</p><h4 id=\"mpeg-dash\">MPEG-DASH</h4><p>MPEG-DASH is the latest HLS competitor. It was originally created to be an alternative to HLS. It has a few advantages over HLS, mainly because it is open-source. This means the media content publisher community as a whole can contribute to its changes and updates. MPEG-DASH is globally supported and codec agnostic, which means that you can encode video without worrying about codec support. It has lower latency than HLS. It's playlist file is an <code class=\"\">.MPD</code>, which is an <code class=\"\">XML</code> format.</p><h3 id=\"doing-it-yourself\">Doing it yourself</h3><p>To deliver videos using adaptive streaming you must generate multiple video versions, add an index file per variant and add a master playlist. The formats and encoding for HLS and MPEG-DASH are different for each of these files. If you want to stream using both HLS and MPEG-DASH formats you need to double the effort for every video you want to deliver. Additionally, for MPEG-DASH, the best practice is to deliver the audio and video separately. This stuff is complex and time consuming.</p><p>If you are a developer who likes to get into the nitty gritty of <code class=\"\">ffmpeg</code> you can deep dive and create all sources for HLS and MPEG-DASH yourself.</p><h4 id=\"diy-steps-for-mpeg-dash\">DIY steps for MPEG-DASH</h4><p>MPEG-DASH is simplest to do yourself. Let's give it a go!</p><p>Imagine we have a video file called <code class=\"\">video.mp4</code>. To make sure we can adaptively stream the video we need to create video files with different bitrates and an audio file. <em>Beware that this is a simplified version for illustration purposes. In real life <code class=\"\">ffmpeg</code> has many quirks based what video you give it.</em></p><p><strong>Step 1: extract the audio</strong></p><p>Extract the audio track:</p><pre code=\"$ ffmpeg -i video.mp4 -c:a copy -vn video-audio.mp4\n\n\"><code __ignoreMap=\"\">$ ffmpeg -i video.mp4 -c:a copy -vn video-audio.mp4\n\n</code></pre><p><strong>Step 2: extract and re-encode the video track</strong></p><pre code=\"$ ffmpeg -i video.mp4 -an -c:v libx264 -x264opts &#x27;keyint=24:min-keyint=24:no-scenecut&#x27; -b:v 5300k -maxrate 5300k -bufsize 2650k -vf &#x27;scale=-1:1080&#x27; video-1080.mp4\n\n$ ffmpeg -i video.mp4 -an -c:v libx264 -x264opts &#x27;keyint=24:min-keyint=24:no-scenecut&#x27; -b:v 2400k -maxrate 2400k -bufsize 1200k -vf &#x27;scale=-1:720&#x27; video-720.mp4\n\n$ ffmpeg -i video.mp4 -an -c:v libx264 -x264opts &#x27;keyint=24:min-keyint=24:no-scenecut&#x27; -b:v 1060k -maxrate 1060k -bufsize 530k -vf &#x27;scale=-1:478&#x27; video-480.mp4\n\n$ ffmpeg -i video.mp4 -an -c:v libx264 -x264opts &#x27;keyint=24:min-keyint=24:no-scenecut&#x27; -b:v 600k -maxrate 600k -bufsize 300k -vf &#x27;scale=-1:360&#x27; video-360.mp4\n\n$ ffmpeg -i video.mp4 -an -c:v libx264 -x264opts &#x27;keyint=24:min-keyint=24:no-scenecut&#x27; -b:v 260k -maxrate 260k -bufsize 130k -vf &#x27;scale=-1:242&#x27; video-240.mp4\n\" language=\"bash\" meta=\"\" class=\"language-bash shiki shiki-themes github-dark\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#B392F0\">$</span><span style=\"--shiki-default:#9ECBFF\"> ffmpeg</span><span style=\"--shiki-default:#79B8FF\"> -i</span><span style=\"--shiki-default:#9ECBFF\"> video.mp4</span><span style=\"--shiki-default:#79B8FF\"> -an</span><span style=\"--shiki-default:#79B8FF\"> -c:v</span><span style=\"--shiki-default:#9ECBFF\"> libx264</span><span style=\"--shiki-default:#79B8FF\"> -x264opts</span><span style=\"--shiki-default:#9ECBFF\"> 'keyint=24:min-keyint=24:no-scenecut'</span><span style=\"--shiki-default:#79B8FF\"> -b:v</span><span style=\"--shiki-default:#9ECBFF\"> 5300k</span><span style=\"--shiki-default:#79B8FF\"> -maxrate</span><span style=\"--shiki-default:#9ECBFF\"> 5300k</span><span style=\"--shiki-default:#79B8FF\"> -bufsize</span><span style=\"--shiki-default:#9ECBFF\"> 2650k</span><span style=\"--shiki-default:#79B8FF\"> -vf</span><span style=\"--shiki-default:#9ECBFF\"> 'scale=-1:1080'</span><span style=\"--shiki-default:#9ECBFF\"> video-1080.mp4\n</span></span><span class=\"line\" line=\"2\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#B392F0\">$</span><span style=\"--shiki-default:#9ECBFF\"> ffmpeg</span><span style=\"--shiki-default:#79B8FF\"> -i</span><span style=\"--shiki-default:#9ECBFF\"> video.mp4</span><span style=\"--shiki-default:#79B8FF\"> -an</span><span style=\"--shiki-default:#79B8FF\"> -c:v</span><span style=\"--shiki-default:#9ECBFF\"> libx264</span><span style=\"--shiki-default:#79B8FF\"> -x264opts</span><span style=\"--shiki-default:#9ECBFF\"> 'keyint=24:min-keyint=24:no-scenecut'</span><span style=\"--shiki-default:#79B8FF\"> -b:v</span><span style=\"--shiki-default:#9ECBFF\"> 2400k</span><span style=\"--shiki-default:#79B8FF\"> -maxrate</span><span style=\"--shiki-default:#9ECBFF\"> 2400k</span><span style=\"--shiki-default:#79B8FF\"> -bufsize</span><span style=\"--shiki-default:#9ECBFF\"> 1200k</span><span style=\"--shiki-default:#79B8FF\"> -vf</span><span style=\"--shiki-default:#9ECBFF\"> 'scale=-1:720'</span><span style=\"--shiki-default:#9ECBFF\"> video-720.mp4\n</span></span><span class=\"line\" line=\"4\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#B392F0\">$</span><span style=\"--shiki-default:#9ECBFF\"> ffmpeg</span><span style=\"--shiki-default:#79B8FF\"> -i</span><span style=\"--shiki-default:#9ECBFF\"> video.mp4</span><span style=\"--shiki-default:#79B8FF\"> -an</span><span style=\"--shiki-default:#79B8FF\"> -c:v</span><span style=\"--shiki-default:#9ECBFF\"> libx264</span><span style=\"--shiki-default:#79B8FF\"> -x264opts</span><span style=\"--shiki-default:#9ECBFF\"> 'keyint=24:min-keyint=24:no-scenecut'</span><span style=\"--shiki-default:#79B8FF\"> -b:v</span><span style=\"--shiki-default:#9ECBFF\"> 1060k</span><span style=\"--shiki-default:#79B8FF\"> -maxrate</span><span style=\"--shiki-default:#9ECBFF\"> 1060k</span><span style=\"--shiki-default:#79B8FF\"> -bufsize</span><span style=\"--shiki-default:#9ECBFF\"> 530k</span><span style=\"--shiki-default:#79B8FF\"> -vf</span><span style=\"--shiki-default:#9ECBFF\"> 'scale=-1:478'</span><span style=\"--shiki-default:#9ECBFF\"> video-480.mp4\n</span></span><span class=\"line\" line=\"6\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#B392F0\">$</span><span style=\"--shiki-default:#9ECBFF\"> ffmpeg</span><span style=\"--shiki-default:#79B8FF\"> -i</span><span style=\"--shiki-default:#9ECBFF\"> video.mp4</span><span style=\"--shiki-default:#79B8FF\"> -an</span><span style=\"--shiki-default:#79B8FF\"> -c:v</span><span style=\"--shiki-default:#9ECBFF\"> libx264</span><span style=\"--shiki-default:#79B8FF\"> -x264opts</span><span style=\"--shiki-default:#9ECBFF\"> 'keyint=24:min-keyint=24:no-scenecut'</span><span style=\"--shiki-default:#79B8FF\"> -b:v</span><span style=\"--shiki-default:#9ECBFF\"> 600k</span><span style=\"--shiki-default:#79B8FF\"> -maxrate</span><span style=\"--shiki-default:#9ECBFF\"> 600k</span><span style=\"--shiki-default:#79B8FF\"> -bufsize</span><span style=\"--shiki-default:#9ECBFF\"> 300k</span><span style=\"--shiki-default:#79B8FF\"> -vf</span><span style=\"--shiki-default:#9ECBFF\"> 'scale=-1:360'</span><span style=\"--shiki-default:#9ECBFF\"> video-360.mp4\n</span></span><span class=\"line\" line=\"8\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#B392F0\">$</span><span style=\"--shiki-default:#9ECBFF\"> ffmpeg</span><span style=\"--shiki-default:#79B8FF\"> -i</span><span style=\"--shiki-default:#9ECBFF\"> video.mp4</span><span style=\"--shiki-default:#79B8FF\"> -an</span><span style=\"--shiki-default:#79B8FF\"> -c:v</span><span style=\"--shiki-default:#9ECBFF\"> libx264</span><span style=\"--shiki-default:#79B8FF\"> -x264opts</span><span style=\"--shiki-default:#9ECBFF\"> 'keyint=24:min-keyint=24:no-scenecut'</span><span style=\"--shiki-default:#79B8FF\"> -b:v</span><span style=\"--shiki-default:#9ECBFF\"> 260k</span><span style=\"--shiki-default:#79B8FF\"> -maxrate</span><span style=\"--shiki-default:#9ECBFF\"> 260k</span><span style=\"--shiki-default:#79B8FF\"> -bufsize</span><span style=\"--shiki-default:#9ECBFF\"> 130k</span><span style=\"--shiki-default:#79B8FF\"> -vf</span><span style=\"--shiki-default:#9ECBFF\"> 'scale=-1:242'</span><span style=\"--shiki-default:#9ECBFF\"> video-240.mp4\n</span></span></code></pre><p>The video is encoded using H.264 codec. This forces to have a key frame every 24 frames, in this case, every second. This allows the video to be segmented in chunks of 1 second. The bitrate is evaluated according to the buffer size, so in order to be sure the encoding is close to the requested rate, the buffer size should be lower than the bitrate.</p><p><strong>Step 3: generate the MPD file</strong></p><p>We now have one audio file and five video files. A Media Presentation Description (MPD) file has to be created. An MPD file functions as an index referencing the different video and audio tracks with their bitrate, size and how the segments are ordered.</p><pre code=\"$ MP4Box -dash 1000 -rap -frag-rap -profile onDemand -out video.mpd video-1080.mp4 video-720.mp4 video-480.mp4 video-360.mp4 video-240.mp4 video-audio.mp4\n\"><code __ignoreMap=\"\">$ MP4Box -dash 1000 -rap -frag-rap -profile onDemand -out video.mpd video-1080.mp4 video-720.mp4 video-480.mp4 video-360.mp4 video-240.mp4 video-audio.mp4\n</code></pre><p>The -dash option sets the duration of each segment to one second.</p><p>Next to preparing adaptive streaming content MP4Box can do a lot more. So much more in fact that it's best to just read more <a href=\"https://github.com/gpac/gpac/wiki/MP4Box\" rel=\"nofollow\">here</a>.</p><p><strong>Step 4: configure your webserver</strong></p><p>Make sure your webserver understands <code class=\"\">.mpd</code> files by adding the following mime type: <code class=\"\">application/dash+xml</code> to its config.</p><p><strong>Step 5: make sure your video player understands adaptive streaming</strong></p><p>Implement <a href=\"https://github.com/Dash-Industry-Forum/dash.js\" rel=\"nofollow\">dash.js</a> into your video player or build a custom video player around dash.js.</p><p><strong>Concluding</strong></p><p>Obviously, doing this at scale or as a slightly less technical user this process is not realistic. You'll want to automate this completely.</p><h4 id=\"enter-cloudinary\">Enter: Cloudinary</h4><p>Next to being market leader in image delivery Cloudinary also provides features for video: from dynamic streaming profiles to cropping the subject perfectly on different video ratios. They even use AI to generate captions for muted videos or meaningful previews.</p><p>Today we are discussing the dynamic streaming service they offer. Cloudinary has created <a href=\"https://cloudinary.com/documentation/video_manipulation_and_delivery#adaptive_bitrate_streaming_hls_and_mpeg_dash\" rel=\"nofollow\">smart pre-defined</a> streaming profiles to help you out. A streaming profile holds a set of video variation definitions with different qualities, bitrates, and codecs. For example, the one profile specifies 10 different variations ranging from extremely high quality to audio-only. You can also create <a href=\"https://cloudinary.com/documentation/admin_api#adaptive_streaming_profiles\" rel=\"nofollow\">custom profiles</a> through their admin API.</p><p>Once you have selected a profile, you upload your video file with an eager transformation that instructs the system to generate all the required files for the requested profile in either HLS or MPEG-DASH format. If you want to deliver both formats, add two <a href=\"https://cloudinary.com/documentation/transformations_on_upload#eager_transformations\" rel=\"nofollow\">eager transformations</a> within your upload command.</p><p>This upload code is for the Node.js SDK.</p><pre code=\"// This file is to be used in node.js and is for uploading your video file to Cloudinary.\n// This will not work in codesandbox and is here only for example purposes.\n// Run locally like: &#x60;node upload.js&#x60;\n\nconst cloudinary = require(&#x27;cloudinary&#x27;).v2;\n\n// Create a Cloudinary account and fill out your credentials\ncloudinary.config({\n  cloud_name: &#x27;&#x27;,\n  api_key: &#x27;&#x27;,\n  api_secret: &#x27;&#x27;,\n});\n\n// Upload your file with the Cloudinary Uploader API\ncloudinary.uploader\n  .upload(&#x27;<your-video.mp4>&#x27;, {\n    resource_type: &#x27;video&#x27;,\n    eager: [\n      // Specify what streaming profile you want to use\n      { format: &#x27;m3u8&#x27;, streaming_profile: &#x27;4k&#x27; },\n      { format: &#x27;mpd&#x27;, streaming_profile: &#x27;4k&#x27; },\n    ],\n    eager_async: true,\n    eager_notification_url: &#x27;<your-notify-url>&#x27;,\n    public_id: &#x27;<your-public-id>&#x27;, // This will be the public ID of the video\n  })\n  .then((video) => {\n    console.log(&#x27;File Uploaded&#x27;);\n    console.log(video.public_id);\n  })\n  .catch((error) => {\n    console.log(&#x27;File Upload Error&#x27;);\n    console.log(error);\n  });\n\" language=\"js\" meta=\"\" class=\"language-js shiki shiki-themes github-dark\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#6A737D\">// This file is to be used in node.js and is for uploading your video file to Cloudinary.\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#6A737D\">// This will not work in codesandbox and is here only for example purposes.\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#6A737D\">// Run locally like: `node upload.js`\n</span></span><span class=\"line\" line=\"4\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#F97583\">const</span><span style=\"--shiki-default:#79B8FF\"> cloudinary</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#B392F0\"> require</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">'cloudinary'</span><span style=\"--shiki-default:#E1E4E8\">).v2;\n</span></span><span class=\"line\" line=\"6\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#6A737D\">// Create a Cloudinary account and fill out your credentials\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">cloudinary.</span><span style=\"--shiki-default:#B392F0\">config</span><span style=\"--shiki-default:#E1E4E8\">({\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">  cloud_name: </span><span style=\"--shiki-default:#9ECBFF\">''</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">  api_key: </span><span style=\"--shiki-default:#9ECBFF\">''</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">  api_secret: </span><span style=\"--shiki-default:#9ECBFF\">''</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">});\n</span></span><span class=\"line\" line=\"13\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#6A737D\">// Upload your file with the Cloudinary Uploader API\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">cloudinary.uploader\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">  .</span><span style=\"--shiki-default:#B392F0\">upload</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">'&#x3C;your-video.mp4>'</span><span style=\"--shiki-default:#E1E4E8\">, {\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">    resource_type: </span><span style=\"--shiki-default:#9ECBFF\">'video'</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">    eager: [\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#6A737D\">      // Specify what streaming profile you want to use\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">      { format: </span><span style=\"--shiki-default:#9ECBFF\">'m3u8'</span><span style=\"--shiki-default:#E1E4E8\">, streaming_profile: </span><span style=\"--shiki-default:#9ECBFF\">'4k'</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">      { format: </span><span style=\"--shiki-default:#9ECBFF\">'mpd'</span><span style=\"--shiki-default:#E1E4E8\">, streaming_profile: </span><span style=\"--shiki-default:#9ECBFF\">'4k'</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">    ],\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">    eager_async: </span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    eager_notification_url: </span><span style=\"--shiki-default:#9ECBFF\">'&#x3C;your-notify-url>'</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">    public_id: </span><span style=\"--shiki-default:#9ECBFF\">'&#x3C;your-public-id>'</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#6A737D\">// This will be the public ID of the video\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">  })\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#E1E4E8\">  .</span><span style=\"--shiki-default:#B392F0\">then</span><span style=\"--shiki-default:#E1E4E8\">((</span><span style=\"--shiki-default:#FFAB70\">video</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"28\"><span style=\"--shiki-default:#E1E4E8\">    console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">'File Uploaded'</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#E1E4E8\">    console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(video.public_id);\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">  })\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">  .</span><span style=\"--shiki-default:#B392F0\">catch</span><span style=\"--shiki-default:#E1E4E8\">((</span><span style=\"--shiki-default:#FFAB70\">error</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#E1E4E8\">    console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">'File Upload Error'</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#E1E4E8\">    console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(error);\n</span></span><span class=\"line\" line=\"34\"><span style=\"--shiki-default:#E1E4E8\">  });\n</span></span></code></pre><p>Now that the file has been uploaded, it generates a bunch of different video and audio streams. These streams are represented in the playlist files below.</p><p>For the HLS version of the video this is what comes out as the m3u8 playlist file:</p><pre code=\"#EXTM3U\n\n#EXT-X-STREAM-INF:BANDWIDTH=10712000,CODECS=&#x22;avc1.640028,mp4a.40.2&#x22;,RESOLUTION=3840x2160\n/dwfcofnrd/video/upload/c_limit,w_3840,h_2160,vc_h264:high:4.0,br_35m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=5420000,CODECS=&#x22;avc1.640028,mp4a.40.2&#x22;,RESOLUTION=2560x1440\n/dwfcofnrd/video/upload/c_limit,w_2560,h_1440,vc_h264:high:4.0,br_16m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=3248000,CODECS=&#x22;avc1.640028,mp4a.40.2&#x22;,RESOLUTION=1920x1080\n/dwfcofnrd/video/upload/c_limit,w_1920,h_1080,vc_h264:high:4.0,br_8500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=1400000,CODECS=&#x22;avc1.4D401F,mp4a.40.2&#x22;,RESOLUTION=1280x720\n/dwfcofnrd/video/upload/c_limit,w_1280,h_720,vc_h264:main:3.1,br_5500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=876000,CODECS=&#x22;avc1.4D401F,mp4a.40.2&#x22;,RESOLUTION=960x540\n/dwfcofnrd/video/upload/c_limit,w_960,h_540,vc_h264:main:3.1,br_3500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=615000,CODECS=&#x22;avc1.42C01E,mp4a.40.2&#x22;,RESOLUTION=640x360\n/dwfcofnrd/video/upload/c_limit,w_640,h_360,vc_h264:baseline:3.0,br_2m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=411000,CODECS=&#x22;avc1.42C01E,mp4a.40.2&#x22;,RESOLUTION=480x270\n/dwfcofnrd/video/upload/c_limit,w_480,h_270,vc_h264:baseline:3.0,br_800k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\n#EXT-X-STREAM-INF:BANDWIDTH=279000,CODECS=&#x22;avc1.42C01E,mp4a.40.2&#x22;,RESOLUTION=320x180\n/dwfcofnrd/video/upload/c_limit,w_320,h_240,vc_h264:baseline:3.0,br_192k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n\" language=\"bash\" meta=\"\" class=\"language-bash shiki shiki-themes github-dark\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#6A737D\">#EXTM3U\n</span></span><span class=\"line\" line=\"2\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=10712000,CODECS=\"avc1.640028,mp4a.40.2\",RESOLUTION=3840x2160\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_3840,h_2160,vc_h264:high:4.0,br_35m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"5\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=5420000,CODECS=\"avc1.640028,mp4a.40.2\",RESOLUTION=2560x1440\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_2560,h_1440,vc_h264:high:4.0,br_16m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"8\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=3248000,CODECS=\"avc1.640028,mp4a.40.2\",RESOLUTION=1920x1080\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_1920,h_1080,vc_h264:high:4.0,br_8500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"11\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=1400000,CODECS=\"avc1.4D401F,mp4a.40.2\",RESOLUTION=1280x720\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_1280,h_720,vc_h264:main:3.1,br_5500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"14\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=876000,CODECS=\"avc1.4D401F,mp4a.40.2\",RESOLUTION=960x540\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_960,h_540,vc_h264:main:3.1,br_3500k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"17\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=615000,CODECS=\"avc1.42C01E,mp4a.40.2\",RESOLUTION=640x360\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_640,h_360,vc_h264:baseline:3.0,br_2m/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"20\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=411000,CODECS=\"avc1.42C01E,mp4a.40.2\",RESOLUTION=480x270\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_480,h_270,vc_h264:baseline:3.0,br_800k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span><span class=\"line\" line=\"23\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#6A737D\">#EXT-X-STREAM-INF:BANDWIDTH=279000,CODECS=\"avc1.42C01E,mp4a.40.2\",RESOLUTION=320x180\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#B392F0\">/dwfcofnrd/video/upload/c_limit,w_320,h_240,vc_h264:baseline:3.0,br_192k/v1602940452/cloudinary-dynamic-video-streaming.m3u8\n</span></span></code></pre><p>For the MPEG-DASH version of the video this is what comes out as the MPD playlist file (I have shortened the file for readability):</p><pre code=\"<MPD xmlns=&#x22;urn:mpeg:dash:schema:mpd:2011&#x22; minBufferTime=&#x22;PT1.500S&#x22; type=&#x22;static&#x22; mediaPresentationDuration=&#x22;PT0H0M28.800S&#x22; maxSegmentDuration=&#x22;PT0H0M2.800S&#x22; profiles=&#x22;urn:mpeg:dash:profile:full:2011&#x22;>\n  <Period duration=&#x22;PT0H0M28.800S&#x22;>\n    <AdaptationSet segmentAlignment=&#x22;true&#x22; maxWidth=&#x22;1280&#x22; maxHeight=&#x22;720&#x22; maxFrameRate=&#x22;25&#x22; par=&#x22;16:9&#x22; lang=&#x22;und&#x22;>\n      <Representation id=&#x22;1&#x22; mimeType=&#x22;video/mp4&#x22; codecs=&#x22;avc1.42C01E&#x22; width=&#x22;320&#x22; height=&#x22;180&#x22; frameRate=&#x22;25&#x22; sar=&#x22;1:1&#x22; startWithSAP=&#x22;1&#x22; bandwidth=&#x22;188841&#x22;>\n        <BaseURL>/dwfcofnrd/video/upload/c_limit,w_320,h_240,vc_h264:baseline:3.0,br_192k/v1602940452/cloudinary-dynamic-video-streaming.mp4dv</BaseURL>\n        <SegmentList timescale=&#x22;12800&#x22; duration=&#x22;25600&#x22;>\n          <Initialization range=&#x22;0-909&#x22; />\n          <SegmentURL mediaRange=&#x22;910-48949&#x22; indexRange=&#x22;910-953&#x22; />\n          <SegmentURL mediaRange=&#x22;48950-90844&#x22; indexRange=&#x22;48950-48993&#x22; />\n          <SegmentURL mediaRange=&#x22;90845-134433&#x22; indexRange=&#x22;90845-90888&#x22; />\n          <SegmentURL mediaRange=&#x22;134434-177434&#x22; indexRange=&#x22;134434-134477&#x22; />\n          <SegmentURL mediaRange=&#x22;177435-229116&#x22; indexRange=&#x22;177435-177478&#x22; />\n          <SegmentURL mediaRange=&#x22;229117-280431&#x22; indexRange=&#x22;229117-229160&#x22; />\n          <SegmentURL mediaRange=&#x22;280432-328048&#x22; indexRange=&#x22;280432-280475&#x22; />\n          <SegmentURL mediaRange=&#x22;328049-376769&#x22; indexRange=&#x22;328049-328092&#x22; />\n          <SegmentURL mediaRange=&#x22;376770-426815&#x22; indexRange=&#x22;376770-376813&#x22; />\n          <SegmentURL mediaRange=&#x22;426816-478009&#x22; indexRange=&#x22;426816-426859&#x22; />\n          <SegmentURL mediaRange=&#x22;478010-528551&#x22; indexRange=&#x22;478010-478053&#x22; />\n          <SegmentURL mediaRange=&#x22;528552-572601&#x22; indexRange=&#x22;528552-528595&#x22; />\n          <SegmentURL mediaRange=&#x22;572602-620003&#x22; indexRange=&#x22;572602-572645&#x22; />\n          <SegmentURL mediaRange=&#x22;620004-679828&#x22; indexRange=&#x22;620004-620047&#x22; />\n        </SegmentList>\n      </Representation>\n      <Representation id=&#x22;2&#x22; mimeType=&#x22;video/mp4&#x22; codecs=&#x22;avc1.42C01E&#x22; width=&#x22;480&#x22; height=&#x22;270&#x22; frameRate=&#x22;25&#x22; sar=&#x22;1:1&#x22; startWithSAP=&#x22;1&#x22; bandwidth=&#x22;346668&#x22;>\n        <BaseURL>/dwfcofnrd/video/upload/c_limit,w_480,h_270,vc_h264:baseline:3.0,br_800k/v1602940452/cloudinary-dynamic-video-streaming.mp4dv</BaseURL>\n        <SegmentList timescale=&#x22;12800&#x22; duration=&#x22;25600&#x22;>\n          <Initialization range=&#x22;0-909&#x22; />\n          <SegmentURL mediaRange=&#x22;910-84012&#x22; indexRange=&#x22;910-953&#x22; />\n          <SegmentURL mediaRange=&#x22;84013-157030&#x22; indexRange=&#x22;84013-84056&#x22; />\n          <SegmentURL mediaRange=&#x22;157031-233498&#x22; indexRange=&#x22;157031-157074&#x22; />\n          <SegmentURL mediaRange=&#x22;233499-307813&#x22; indexRange=&#x22;233499-233542&#x22; />\n          <SegmentURL mediaRange=&#x22;307814-397973&#x22; indexRange=&#x22;307814-307857&#x22; />\n          <SegmentURL mediaRange=&#x22;397974-486089&#x22; indexRange=&#x22;397974-398017&#x22; />\n          <SegmentURL mediaRange=&#x22;486090-566671&#x22; indexRange=&#x22;486090-486133&#x22; />\n          <SegmentURL mediaRange=&#x22;566672-651620&#x22; indexRange=&#x22;566672-566715&#x22; />\n          <SegmentURL mediaRange=&#x22;651621-750051&#x22; indexRange=&#x22;651621-651664&#x22; />\n          <SegmentURL mediaRange=&#x22;750052-862906&#x22; indexRange=&#x22;750052-750095&#x22; />\n          <SegmentURL mediaRange=&#x22;862907-974846&#x22; indexRange=&#x22;862907-862950&#x22; />\n          <SegmentURL mediaRange=&#x22;974847-1059121&#x22; indexRange=&#x22;974847-974890&#x22; />\n          <SegmentURL mediaRange=&#x22;1059122-1143744&#x22; indexRange=&#x22;1059122-1059165&#x22; />\n          <SegmentURL mediaRange=&#x22;1143745-1248006&#x22; indexRange=&#x22;1143745-1143788&#x22; />\n        </SegmentList>\n      </Representation>\n      <Representation id=&#x22;3&#x22; mimeType=&#x22;video/mp4&#x22; codecs=&#x22;avc1.42C01E&#x22; width=&#x22;640&#x22; height=&#x22;360&#x22; frameRate=&#x22;25&#x22; sar=&#x22;1:1&#x22; startWithSAP=&#x22;1&#x22; bandwidth=&#x22;561940&#x22;>\n      <!-- ... and many more ... -->\n    </AdaptationSet>\n  </Period>\n</MPD>\n\" language=\"xml\" meta=\"\" class=\"language-xml shiki shiki-themes github-dark\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">MPD</span><span style=\"--shiki-default:#B392F0\"> xmlns</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"urn:mpeg:dash:schema:mpd:2011\"</span><span style=\"--shiki-default:#B392F0\"> minBufferTime</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"PT1.500S\"</span><span style=\"--shiki-default:#B392F0\"> type</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"static\"</span><span style=\"--shiki-default:#B392F0\"> mediaPresentationDuration</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"PT0H0M28.800S\"</span><span style=\"--shiki-default:#B392F0\"> maxSegmentDuration</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"PT0H0M2.800S\"</span><span style=\"--shiki-default:#B392F0\"> profiles</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"urn:mpeg:dash:profile:full:2011\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">Period</span><span style=\"--shiki-default:#B392F0\"> duration</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"PT0H0M28.800S\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;</span><span style=\"--shiki-default:#85E89D\">AdaptationSet</span><span style=\"--shiki-default:#B392F0\"> segmentAlignment</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"true\"</span><span style=\"--shiki-default:#B392F0\"> maxWidth</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1280\"</span><span style=\"--shiki-default:#B392F0\"> maxHeight</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"720\"</span><span style=\"--shiki-default:#B392F0\"> maxFrameRate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25\"</span><span style=\"--shiki-default:#B392F0\"> par</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"16:9\"</span><span style=\"--shiki-default:#B392F0\"> lang</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"und\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;</span><span style=\"--shiki-default:#85E89D\">Representation</span><span style=\"--shiki-default:#B392F0\"> id</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1\"</span><span style=\"--shiki-default:#B392F0\"> mimeType</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"video/mp4\"</span><span style=\"--shiki-default:#B392F0\"> codecs</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"avc1.42C01E\"</span><span style=\"--shiki-default:#B392F0\"> width</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"320\"</span><span style=\"--shiki-default:#B392F0\"> height</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"180\"</span><span style=\"--shiki-default:#B392F0\"> frameRate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25\"</span><span style=\"--shiki-default:#B392F0\"> sar</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1:1\"</span><span style=\"--shiki-default:#B392F0\"> startWithSAP</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1\"</span><span style=\"--shiki-default:#B392F0\"> bandwidth</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"188841\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">BaseURL</span><span style=\"--shiki-default:#E1E4E8\">>/dwfcofnrd/video/upload/c_limit,w_320,h_240,vc_h264:baseline:3.0,br_192k/v1602940452/cloudinary-dynamic-video-streaming.mp4dv&#x3C;/</span><span style=\"--shiki-default:#85E89D\">BaseURL</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentList</span><span style=\"--shiki-default:#B392F0\"> timescale</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"12800\"</span><span style=\"--shiki-default:#B392F0\"> duration</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25600\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">Initialization</span><span style=\"--shiki-default:#B392F0\"> range</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"0-909\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"910-48949\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"910-953\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"48950-90844\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"48950-48993\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"90845-134433\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"90845-90888\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"134434-177434\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"134434-134477\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"177435-229116\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"177435-177478\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"229117-280431\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"229117-229160\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"280432-328048\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"280432-280475\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"328049-376769\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"328049-328092\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"376770-426815\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"376770-376813\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"426816-478009\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"426816-426859\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"478010-528551\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"478010-478053\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"528552-572601\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"528552-528595\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"572602-620003\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"572602-572645\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"620004-679828\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"620004-620047\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;/</span><span style=\"--shiki-default:#85E89D\">SegmentList</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;/</span><span style=\"--shiki-default:#85E89D\">Representation</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;</span><span style=\"--shiki-default:#85E89D\">Representation</span><span style=\"--shiki-default:#B392F0\"> id</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"2\"</span><span style=\"--shiki-default:#B392F0\"> mimeType</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"video/mp4\"</span><span style=\"--shiki-default:#B392F0\"> codecs</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"avc1.42C01E\"</span><span style=\"--shiki-default:#B392F0\"> width</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"480\"</span><span style=\"--shiki-default:#B392F0\"> height</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"270\"</span><span style=\"--shiki-default:#B392F0\"> frameRate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25\"</span><span style=\"--shiki-default:#B392F0\"> sar</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1:1\"</span><span style=\"--shiki-default:#B392F0\"> startWithSAP</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1\"</span><span style=\"--shiki-default:#B392F0\"> bandwidth</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"346668\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">BaseURL</span><span style=\"--shiki-default:#E1E4E8\">>/dwfcofnrd/video/upload/c_limit,w_480,h_270,vc_h264:baseline:3.0,br_800k/v1602940452/cloudinary-dynamic-video-streaming.mp4dv&#x3C;/</span><span style=\"--shiki-default:#85E89D\">BaseURL</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentList</span><span style=\"--shiki-default:#B392F0\"> timescale</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"12800\"</span><span style=\"--shiki-default:#B392F0\"> duration</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25600\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">Initialization</span><span style=\"--shiki-default:#B392F0\"> range</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"0-909\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"28\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"910-84012\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"910-953\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"84013-157030\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"84013-84056\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"157031-233498\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"157031-157074\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"233499-307813\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"233499-233542\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"307814-397973\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"307814-307857\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"397974-486089\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"397974-398017\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"34\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"486090-566671\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"486090-486133\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"35\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"566672-651620\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"566672-566715\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"36\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"651621-750051\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"651621-651664\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"37\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"750052-862906\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"750052-750095\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"38\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"862907-974846\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"862907-862950\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"39\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"974847-1059121\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"974847-974890\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"40\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1059122-1143744\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1059122-1059165\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"41\"><span style=\"--shiki-default:#E1E4E8\">          &#x3C;</span><span style=\"--shiki-default:#85E89D\">SegmentURL</span><span style=\"--shiki-default:#B392F0\"> mediaRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1143745-1248006\"</span><span style=\"--shiki-default:#B392F0\"> indexRange</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1143745-1143788\"</span><span style=\"--shiki-default:#E1E4E8\"> />\n</span></span><span class=\"line\" line=\"42\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;/</span><span style=\"--shiki-default:#85E89D\">SegmentList</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"43\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;/</span><span style=\"--shiki-default:#85E89D\">Representation</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"44\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;</span><span style=\"--shiki-default:#85E89D\">Representation</span><span style=\"--shiki-default:#B392F0\"> id</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"3\"</span><span style=\"--shiki-default:#B392F0\"> mimeType</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"video/mp4\"</span><span style=\"--shiki-default:#B392F0\"> codecs</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"avc1.42C01E\"</span><span style=\"--shiki-default:#B392F0\"> width</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"640\"</span><span style=\"--shiki-default:#B392F0\"> height</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"360\"</span><span style=\"--shiki-default:#B392F0\"> frameRate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"25\"</span><span style=\"--shiki-default:#B392F0\"> sar</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1:1\"</span><span style=\"--shiki-default:#B392F0\"> startWithSAP</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"1\"</span><span style=\"--shiki-default:#B392F0\"> bandwidth</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"561940\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"45\"><span style=\"--shiki-default:#6A737D\">      &#x3C;!-- ... and many more ... -->\n</span></span><span class=\"line\" line=\"46\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;/</span><span style=\"--shiki-default:#85E89D\">AdaptationSet</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"47\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;/</span><span style=\"--shiki-default:#85E89D\">Period</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"48\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">MPD</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>Now that we have the playlist files and all the video streams we can either build our own fancy video player that understands dynamic streaming or we go for the <a href=\"https://cloudinary.com/documentation/cloudinary_video_player\" rel=\"nofollow\">Cloudinary player</a>. In this case I suggest we use the Cloudinary player as it works out of the box. Check out the code sandbox for a very simple vanilla JavaScript example of loading the player for both HLS and MPEG-DASH.</p><p>Try throttling your connection and see the differences in quality. To do this, open your web developer tools (assuming you use chrome), open the network tab and select a different connection type in the dropdown next to the \"preserve log\" and \"Disable cache\" checkboxes.</p><p>The Cloudinary video player is based on <a href=\"https://videojs.com/\" rel=\"nofollow\">videojs</a> and has both the HLS and MPEG-DASH plugins installed by default. In the code sandbox below you'll see both the HLS and the MPEG-DASH version. Beware that the HLS version has better support for showing different statistics than the MPEG-DASH version.</p><p>See the code here: <a href=\"https://codesandbox.io/s/white-cherry-g4ixt\" rel=\"nofollow\">https://codesandbox.io/s/white-cherry-g4ixt</a></p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>",
    "tocs": [
      {
        "toc": {
          "html_id": "build-it-yourself-or-use-cloudinary",
          "text": "Build it yourself or use Cloudinary"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T21:56:45Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_uniform-is-nuxt-3-read": {
    "date": "2023-03-18T13:10:06Z",
    "title": "Uniform is Nuxt 3 ready",
    "canonical_url": "https://uniform.dev/blogs/uniforms-latest-sdk-fully-supports-vue-3-and-nuxt-3",
    "description": "We are excited to announce that the latest iteration of the Uniform SDK is fully compatible with Vue...",
    "url": "/writing/uniform-is-nuxt-3-read",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96gzr0p69e9frwbj3i8w.png",
    "reading_time": "2 min read",
    "uid": "article_entry_uid_uniform-is-nuxt-3-read",
    "locale": "en-us",
    "tags": [
      "webdev",
      "javascript",
      "nuxt",
      "vue"
    ],
    "created_at": "2023-03-18T13:10:06Z",
    "updated_at": "2023-03-18T13:10:06Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>We are excited to announce that the latest iteration of the Uniform SDK is fully compatible with <a href=\"https://blog.vuejs.org/posts/vue-3-as-the-new-default.html\" rel=\"nofollow\">Vue 3</a> and <a href=\"https://v3.nuxtjs.org/\" rel=\"nofollow\">Nuxt 3</a>. </p><p>Nuxt 3 is fast approaching GA. To ensure that Vue.js enthusiasts can build next-generation web experiences with the awesome features offered by Nuxt 3, our new SDK fully supports all Uniform capabilities: from no-code presentation management by Uniform Canvas, complete with web-socket-based live previews, to edge-side personalization and A/B testing through Uniform Context. </p><p>With the Nuxt 3 Nitro engine, developers can now run an entire site on the edge or combine personalization on the edge with delivery of the remaining content in SSG mode through a CDN. Even for highly dynamic pages, the latter choice results in blazing-fast page loads. We’re talking sub 50 milliseconds!</p><p>Nuxt 3 is truly game changing, and Uniform takes full advantage of that with an easy-to-install SDK that follows Nuxt’s no-config ethos.</p><h2 id=\"features-of-uniforms-nuxt-3-module\">Features of Uniform’s Nuxt 3 module</h2><p>This is what the module can do:</p><ul><li>Auto-registers the required Uniform components.</li><li>Auto-creates a Uniform Canvas client.</li><li>Creates a Uniform Context instance (for personalization) and makes it available throughout the app without the need for a wrapping component.</li><li>Builds a handy <code class=\"\">$useCompositionClick to copy</code> composable on top of Nuxt's <a href=\"https://v3.nuxtjs.org/api/composables/use-async-data\" rel=\"nofollow\">useAsyncData</a>.</li><li>Displays live previews seamlessly.</li><li>Monitors query-string changes, which Nuxt doesn't do by default.</li></ul><h2 id=\"benefits-of-using-uniform-with-nuxt-3\">Benefits of using Uniform with Nuxt 3</h2><p>As a rule, no single system offers all the functionalities you need for an app. Instead, multiple systems must work together for the app to run smoothly. A <a href=\"https://uniform.dev/blogs/composable-architecture/composable-platforms-what-why-how\" rel=\"nofollow\">composable architecture</a> is one in which you can pick and choose the components for your technology stack, but getting them to work together well can be challenging. </p><p>Modern headless systems can connect with other systems as part of a composable architecture. However, using some composable services doesn’t give you a full composable architecture.</p><p>Real composability means that you can add or remove components easily as your needs evolve. That’s what Uniform offers. With Uniform’s composition layer, you can build and maintain a modern stack with composable services without tightly coupling them. As a result, developers, content creators, and marketers alike can create and deliver experiences quickly, independently and without vendor lock-in.</p><ul><li>Developers can add or change services any time, assured that their tools will work well together without the need for time-consuming and expensive replatforming and reintegration.</li><li>Content creators can build engaging experiences with a consistent, no-code approach through which they can readily leverage all the tools in their stack.</li><li>Marketers can promote conversions through intent-based personalization and experimentation mechanisms that integrate with customer data and that are simple and intuitive for implementation by developers.</li><li>As internal needs or consumer tastes change, the organization can be agile enough to meet these challenges, without extensive background work that doesn’t deliver direct value to end users.</li></ul>",
    "tocs": [
      {
        "toc": {
          "html_id": "features-of-uniforms-nuxt-3-module",
          "text": "Features of Uniform’s Nuxt 3 module"
        }
      },
      {
        "toc": {
          "html_id": "benefits-of-using-uniform-with-nuxt-3",
          "text": "Benefits of using Uniform with Nuxt 3"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T13:10:06Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_digital-experience-platforms-the-old-versus-the-new": {
    "date": "2023-03-18T13:05:48Z",
    "title": "Digital experience platforms: the old versus the new",
    "canonical_url": "https://uniform.dev/blogs/digital-experience-composition-dxc/difference-between-dxp-and-dxcp",
    "description": "Digital experience platforms (DXPs) and the more modern digital experience composition platforms...",
    "url": "/writing/digital-experience-platforms-the-old-versus-the-new",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1tc0ds73edh613y9yg6.png",
    "reading_time": "4 min read",
    "uid": "article_entry_uid_digital-experience-platforms-the-old-versus-the-new",
    "locale": "en-us",
    "tags": [
      "architecture",
      "dxp",
      "composable",
      "webdev"
    ],
    "created_at": "2023-03-18T13:05:48Z",
    "updated_at": "2023-03-18T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Digital experience platforms (DXPs) and the more modern <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">digital experience composition platforms (DXCPs)</a> share the same goal of making it easier for business users to create visually dynamic, personalized digital experiences. A major contrast is that DXCPs orchestrate solutions and technologies from different vendors. On the other hand, even though DXPs call themselves composable, they lock brands into a single vendor and one way of doing things at the expense of other capabilities.</p><p>To help brands decide whether to switch from a DXP to a DXCP, we explain below their key differences. More details are available in this video created by Headless Creator.</p><h3 id=\"dxcps-are-far-more-cloud-native\">DXCPs are far more cloud native</h3><p>A major disadvantage of DXPs is that their foundation is a content management system (CMS), which contains integrated add-ons or bolted-on tools along with such platforms as a digital asset management (DAM) and a product information management (PIM) system. Consequently, developers must manually apply updates, manage the hosting, customize the platform, and scale up the hosting to accommodate traffic spikes, such as those that occur around busy shopping days like Black Friday in the U.S. and Europe. The alternative is to hire the vendor to do all that at an additional cost.</p><p>Conversely, DXCPs and the headless tools they manage are all hosted in the cloud and cloud native, which means that updates can not only occur automatically, but also scale elastically as demand rises and falls. Also, since DXCPs are tech agnostic and API-first, business users can work with multiple tools there. They can do that in DXPs, too, but only to a limited extent, let alone that in venturing outside that vendor’s proverbial walled garden, they give up features and capabilities.</p><h3 id=\"dxcps-are-more-than-a-data-aggregator\">DXCPs are more than a data aggregator</h3><p>Uniform views DXCPs as a way for brands and their developers to select advanced, API-first vendors and loosely couple those vendors’ tools together. Furthermore, thanks to DXCPs’ tooling, business users can work across the many integrated tools in a holistic, unified workflow. </p><p>Additionally:</p><ul><li>DXCPs are more than a data aggregator. Even though effective tools are available for stitching APIs into a cohesive model for access and use by developers, those tools do not deftly manage experiences as DXCPs do. After all, API aggregators are meant for access by developers through code only, not for business users, whose expertise rests with a low- or no-code editing environment, in which DXCPs also specialize. </li><li>DXCPs are different from a CMS because, unlike a CMS that requires that all content be routed through it for a tight coupling of technology, they keep content and data sources on a level playing field and maintain the loose coupling so that you can replace and add capabilities as necessary with no technology lock-in. </li></ul><p>In short, the entire focus of DXCPs is to accord teams freedom to collaborate smoothly, and for brands to switch tools without impacting the way other tools work and the overall web experience.</p><h3 id=\"dxcp-protects-domain-data\">DXCP protects domain data</h3><p>When building webpages or experiences, developers need two types of data:</p><ul><li><strong>Domain data,</strong> which is core material, such as product models, that defines your brand across channels. For an events website, this data contains the names of the event spaces provided by your company, the dates, and the procedure for registration.</li><li><strong>Design data,</strong> which is volatile, channel-specific material, such as your site’s colors and the way in which you can edit the display of week-by-week information. For an events website, for example, you can change page design or spotlight a feature with volatile data.</li></ul><p>In DXPs, both domain data and design data reside in the same CMS, potentially leading to a messy situation and a polluted content model. In DXCPs, the design data and domain data are separate, providing clean data workflows for innovation efforts and more system longevity.</p><h3 id=\"uniform-dxcp-readily-facilitates-transitioning-from-the-old\">Uniform DXCP readily facilitates transitioning from the old</h3><p>The primary function of composable frameworks like DXCPs is to enable both developers and business users to work seamlessly together, doing what they do best by leveraging the headless solutions that support them best. Composability also unlocks the potential of creating state-of-the-art, future-forward web experiences.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "dxcps-are-far-more-cloud-native",
          "text": "DXCPs are far more cloud native"
        }
      },
      {
        "toc": {
          "html_id": "dxcps-are-more-than-a-data-aggregator",
          "text": "DXCPs are more than a data aggregator"
        }
      },
      {
        "toc": {
          "html_id": "dxcp-protects-domain-data",
          "text": "DXCP protects domain data"
        }
      },
      {
        "toc": {
          "html_id": "uniform-dxcp-readily-facilitates-transitioning-from-the-old",
          "text": "Uniform DXCP readily facilitates transitioning from the old"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_uniform-dxcp-the-what-why-and-how": {
    "date": "2023-03-18T13:03:16Z",
    "title": "Uniform DXCP: the what, why, and how",
    "canonical_url": "https://uniform.dev/blogs/uniform-dxcp-the-what-why-and-how",
    "description": "Nowadays, you’re hard pressed to find an application with all the functionalities you need for...",
    "url": "/writing/uniform-dxcp-the-what-why-and-how",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iccm5uux0ndu9ulnc2g.png",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_uniform-dxcp-the-what-why-and-how",
    "locale": "en-us",
    "tags": [
      "cdn",
      "edge",
      "sitecore",
      "headless"
    ],
    "created_at": "2023-03-18T13:03:16Z",
    "updated_at": "2023-03-18T13:03:16Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Nowadays, you’re hard pressed to find an application with all the functionalities you need for delivering personalized digital experiences. Even though with headless solutions, you can select the best options for your goals, you can, through composability, easily connect the applications that drive personalized experiences. Still, simply adopting headless technologies isn’t enough; you also need a <a href=\"https://uniform.dev/blogs/composable-architecture/composable-platforms-what-why-how\" rel=\"nofollow\">composable architecture</a> that fosters innovation and a seamless authoring experience for business users. </p><p>The answer is Uniform <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">Digital Experience Composition Platform (DXCP)</a>, whose vendor-agnostic capabilities scale to your needs, enabling you to assemble, change, and reassemble your tools as requirements evolve. But what is Uniform DXCP and why does it exist? Read on.</p><h2 id=\"what-is-uniform-dxcp\">What is Uniform DXCP?</h2><p>Uniform DXCP is a new, unique product category with which you can effortlessly integrate legacy and composable services with your design system and front end of choice. In particular, you can switch to and maintain composable systems without having to build and support the connections among those systems. In a composable architecture, that means adding and removing the tools without breaking your personalized, omnichannel digital experience. </p><h2 id=\"why-is-now-the-time-to-move-beyond-the-modern-tech-stack\">Why is now the time to move beyond the modern tech stack?</h2><p>Similar to a composer who arranges the notes of a musical score, you’re the composer of your project’s tech stack. Say, your stack comprises various tools—a <a href=\"https://uniform.dev/blogs/headless-cms/uniform-for-headless-cms\" rel=\"nofollow\">headless content management system (CMS)</a>, a <a href=\"https://uniform.dev/blogs/composable-architecture/uniform-for-headless-commerce\" rel=\"nofollow\">commerce platform</a>, a digital asset management (DAM) system, and so on—from different vendors. By combining those technologies and hosting them on a <a href=\"https://uniform.dev/blogs/sitecore/deliver-better-digital-experiences-with-a-cdn\" rel=\"nofollow\">content delivery network (CDN)</a>, you render a webpage. </p><p>Nonetheless, connecting headless tools with APIs doesn’t necessarily produce a high-quality or <a href=\"https://uniform.dev/blogs/composable-architecture/headless-versus-composable-everything-you-need-to-know\" rel=\"nofollow\">composable experience</a>. As your enterprise scales up, your business must grow as well, meaning that you must incorporate more and more applications into your tech stack, all of which are hard coded into one another through their app stores or your front-end technology. </p><p>What you end up with is a messy, unwieldy, and inflexible tech stack—a maintenance headache  for your developers. Not to mention that <a href=\"https://uniform.dev/blogs/composable-architecture/switching-vendors-for-digital-architectures-without-replatforming\" rel=\"nofollow\">replatforming</a> or rebuilding your project from scratch can be nightmarish and expensive. </p><p>How do you transform your tech stack from a cacophony of integrations connected by endless <a href=\"https://uniform.dev/blogs/glue-code\" rel=\"nofollow\">glue code</a> into a composable architecture that bridges your tools into a harmonious experience? You do it with digital experience composition.  </p><h2 id=\"how-do-you-transition-from-chaos-to-composable-with-dxcp\">How do you transition from chaos to composable with DXCP</h2><p>With Uniform DXCP, you need not create and maintain the custom code that connects your APIs and front-end layers. Instead, you can compose and organize headless solutions in your tech stack without the exorbitant costs, laborious upgrades, and complexities. </p><p>Here are the major benefits of moving to composable with Uniform DXCP: </p><ul><li>Remember the messy tech stack we cited earlier? <a href=\"https://uniform.dev/blogs/composable-architecture/the-mach-monolith\" rel=\"nofollow\">Monolithic architectures</a> require development of new features or investment in complicated integrations. Not so with Uniform DXCP, whose API-orchestration layer handles the connections among your digital experiences and the applications that power them.</li><li>No more “publish and pray” moments. Uniform DXCP’s no-code orchestration layer accords business users an editor with which to drag and drop components wherever they want and preview the resultant display.</li><li>In DXCP, your front end is unaware of your connections so no proprietary limitations exist, and you can select any front-end technology you desire. Whether you choose Java or PHP, your digital experience remains consistent and seamless.</li><li>DXCP offers a new paradigm for page creation around where data lives and how you manage that data. No more worries about product information being displayed outside the context of its intended design and user experience. With Uniform sitting on the end of your design data and keeping domain data intact, you’re free to deliver digital experiences through multiple services at scale. </li></ul><h2 id=\"how-do-you-fuel-your-stack-with-digital-experience-composition\">How do you fuel your stack with digital experience composition?</h2><p>After you’ve built a composable architecture in DXCP:</p><ul><li>Your developers can easily add features and swap out tools from the stack individually.</li><li>Your stack stays organized with no need for those time-consuming, costly integrations that impede your speed to market.</li><li>Your marketers can drag and drop the components they need to create personalized omnichannel experiences without developer assistance. </li></ul><p>The result is less code, greater agility and flexibility, and a more smooth approach for handling orchestration and integrating new tools into your tech stack. </p>",
    "tocs": [
      {
        "toc": {
          "html_id": "what-is-uniform-dxcp",
          "text": "What is Uniform DXCP?"
        }
      },
      {
        "toc": {
          "html_id": "why-is-now-the-time-to-move-beyond-the-modern-tech-stack",
          "text": "Why is now the time to move beyond the modern tech stack?"
        }
      },
      {
        "toc": {
          "html_id": "how-do-you-transition-from-chaos-to-composable-with-dxcp",
          "text": "How do you transition from chaos to composable with DXCP"
        }
      },
      {
        "toc": {
          "html_id": "how-do-you-fuel-your-stack-with-digital-experience-composition",
          "text": "How do you fuel your stack with digital experience composition?"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T13:03:16Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_how-to-sniff-out-the-glue-monster": {
    "date": "2023-03-18T13:00:21Z",
    "title": "How to sniff out the Glue Monster",
    "canonical_url": "https://uniform.dev/blogs/how-to-sniff-out-the-glue-monster",
    "description": "Even though you don’t see it, glue code is everywhere. Since the pendulum swung from monolithic...",
    "url": "/writing/how-to-sniff-out-the-glue-monster",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z8mwj68dscwvzuvcdd4y.png",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_how-to-sniff-out-the-glue-monster",
    "locale": "en-us",
    "tags": [
      "javascript",
      "architecture",
      "composable",
      "devops"
    ],
    "created_at": "2023-03-18T13:00:21Z",
    "updated_at": "2023-03-18T13:00:21Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Even though you don’t see it, glue code is everywhere. Since the pendulum swung from monolithic platforms to <a href=\"https://uniform.dev/blogs/composable-architecture/composable-platforms-what-why-how\" rel=\"nofollow\">composable architectures</a>, glue code that connects to systems or cleanses data has grown exponentially. </p><p>Reality is, you as developers must connect headless systems for a cohesive, feature-complete architecture, but that’s a messy task. The amount of glue you must create hinges on deadlines, the potential need to switch systems later, and the answers to these questions:</p><ul><li>Do you clean up that messy API response so its data fits the front end?</li><li>Do you adapt your front-end components to specific API output and add logic locally?</li><li>Do you separate domain data with design-related data, or mix up everything in data models in different headless systems?</li></ul><p><img alt=\"Glue Code SPREAD\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://images.ctfassets.net/9ku1oyd4k3wo/5iPWgs3hiyQZb1O7cZECJt/671395cc3852d456f1dc02d34d6d5b2c/GlueCode_Blog_SPREAD.png\" width=\"1280\"></p><p>Glue code is a nightmare of technical debt that leads to less innovation, more development effort, and, ultimately, higher expense on hidden requirements.</p><h2 id=\"types-of-glue\">Types of glue</h2><p><img alt=\"Glue code Icon\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://images.ctfassets.net/9ku1oyd4k3wo/5n8VoHX3RPLBLFWg2IJsYP/f2e9ccc22bd7541b352b7bf19d24ffcb/GlueCode_Blog_Images_Glue_code_Icon.png\" width=\"1280\"></p><h3 id=\"code-that-queries-a-source-or-receives-data-that-maps-the-input-to-fit-something-else\">Code that queries a source or receives data that maps the input to fit something else. </h3><p>An example is code that queries an API endpoint and retrieves a huge yet incomplete dataset for the following steps:</p><ol><li>Map the initial result into a more specific object. </li><li>Enrich that object by querying another endpoint and add the result to the original. </li><li>Tidy up the code and create a final data set.</li></ol><p>Here’s a real-world use case: queries on a YouTube playlist and retrieval of the metadata on the videos there. The process runs as follows:</p><ol><li>The code traverses the response to identify and arrange the video IDs in an array. </li><li>You query the YouTube video API for each video ID for all the needed data. </li><li>Given the massive amount of data that results, you go through the response for the exact data.</li></ol><p>In the case of a less reputable source than YouTube or a legacy API, any changes could break the data structure you assume is returned. Not only that, since you have no inkling of the type of the returned data, your data-mapping code must be defensive. Some fields might be empty or even nonexistent sometimes. </p><p>Plus, placing all that code in your front end spells complexity. What to do when you’re building another front end like a mobile app or an Apple TV app? Do you duplicate the code in all the new channels?</p><h3 id=\"polluting-stable-domain-data-with-volatile-design-data\">Polluting stable domain data with volatile design data</h3><p>Generally, a data model for videos contains the following fields: <code class=\"\">titleClick to copy</code>, <code class=\"\">descriptionClick to copy</code>, <code class=\"\">poster imageClick to copy</code>, <code class=\"\">durationClick to copy</code>, <code class=\"\">upload dateClick to copy</code>, and <code class=\"\">video fileClick to copy</code>. But what to do if the product owner wants to highlight this video as “featured” for the week? You would add a “featured” checkbox to the data model and ask content editors to check “featured” in the CMS. In the front-end code, you would look for the “featured” flag and show a bigger version of the video card along with a boldfaced title. If the video appears in another context, like a search result or on another website, that “featured” flag has no meaning.</p><p>In time, you would add other checkboxes and dropdowns to show the content differently in various contexts, causing the content model to grow. At that point, if an architect who’s cleaning house removes a checkbox, multiple projects that leverage the video would crash and burn.</p><p>To sustain a setup with data models that are regularly polluted in that manner, you must build a plethora of defensive code that catches all the additional data. That’s how undesirable glue code and tech debt build up.</p><h3 id=\"creating-glue-layers-by-vendors-to-stay-sticky-pun-intended-with-customers\">Creating glue layers by vendors to stay sticky (pun intended) with customers</h3><p><img alt=\"Glue Code STICKY architecture\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://images.ctfassets.net/9ku1oyd4k3wo/5zwPAAafgm4qZpoU9H2Bbw/8d4928142367cd19f8b76528bfc61ef0/GlueCode_Blog_STICKY.png\" width=\"1280\"></p><p>The more “official” glue vendors add to a composable system, the harder it is for their customers to perform updates, or switch or add components. The more tech debt, the more support hours vendors can sell. Also, since modern, more agile vendors are bound to outpace the less competitive ones in time, the wise thing for the latter to do is adopt solutions that offer hyperflexible systems at lower cost, enabling their customers to focus on storytelling and solving business problems for their audience without sticky glue.</p><p>##Ways to deglue</p><p><img alt=\"Unglue Icon\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://images.ctfassets.net/9ku1oyd4k3wo/16F6FELfCSkZjE8cCuRauw/2c81553462dd1d16be36b2a56dffd443/GlueCode_Blog_Images_Unglue_Icon.png\" width=\"1280\"></p><p>The new product category digital experience composition facilitates degluing. Typically, you create pages on <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">digital experience composition platforms (DXCPs)</a> with data from numerous headless sources without having to understand how those sources work. With the DXCP hosting a brand’s design system in page components, you can drag and drop them onto the page and connect data from external sources to them. No need to write connection code at all. </p><p>DXCPs map component properties to specific data fields of APIs. That means you could add to your video component an image from a DAM, a title and description from YouTube, and viewer metadata from an ERP system. Want to feature the video somewhere? Simply add a checkbox in the DXCP in the context of the component in question without affecting the data model of external systems. As a last step, add the data attached to the component to the CDN edge for caching. Alternatively, grab the information on the data source and query it yourself. </p><p>The front end contains a light and fast SDK that can query component compositions in the CDN-edge cache. With the content mapped explicitly to your component properties in the DXCP, no data mapping is required. And you are now deglued!—with no need to build code to straighten up data or query external systems.</p><p>Want to add a tiny bit of glue nonetheless? The SDK also contains hooks through which you can enrich or map data from the API before sending the data to the components.</p><p>In the meantime, content editors can take advantage of the DXCP’s live-preview feature to contextually edit the website by connecting new headless sources and mapping API responses to the components you created. Updating a CMS or adding a legacy source takes only a few clicks, code free. </p><p>Moreover, content editors can manually type in content on the DXCP and, later on, attach a CMS or commerce system that replaces the static copy with dynamic pointers from component fields to API responses. Again, no code is required to accommodate those functions.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "types-of-glue",
          "text": "Types of glue"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T13:00:21Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-future-of-managing-projects-at-agencie": {
    "date": "2023-03-18T12:56:10Z",
    "title": "The future of managing projects at agencies",
    "canonical_url": "https://uniform.dev/blogs/composable-architecture/the-future-of-managing-projects-at-agencies",
    "description": "Calling for a revolution in how agencies run tech projects   I spent a lot of time working...",
    "url": "/writing/the-future-of-managing-projects-at-agencie",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipu6a76iegjp4d19mb0u.png",
    "reading_time": "8 min read",
    "uid": "article_entry_uid_the-future-of-managing-projects-at-agencie",
    "locale": "en-us",
    "tags": [
      "composable",
      "architecture",
      "agency",
      "process"
    ],
    "created_at": "2023-03-18T12:56:10Z",
    "updated_at": "2023-03-18T12:56:10Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<h2 id=\"calling-for-a-revolution-in-how-agencies-run-tech-projects\">Calling for a revolution in how agencies run tech projects</h2><p>I spent a lot of time working through messy production processes during my years at digital agencies. From single campaigns to building 800+ websites for a brand and its sub-brands, easier processes would have been better for the final result and my hairline. I’m so excited to work with new technology that will change the game for managing agency processes—making everything from delivery to collaboration much easier and faster.</p><p>I have no illusions that I can fix everything—but I hope that you read this with an open mind and see that a better way is possible. Agency processes are ever-changing, and things always seem to fall apart as deadlines near. Nonetheless, by following what I describe below, you can deliver faster from day one and show results to clients for better feedback, all while setting up brands with a future-proof architecture. And yes, you can stay agile at the same time!</p><h2 id=\"why-agencies-embracing-composable-architectures-face-challenges\">Why agencies embracing composable architectures face challenges</h2><p>Agencies that start working with <a href=\"https://uniform.dev/blogs/composable-architecture/composable-platforms-what-why-how\" rel=\"nofollow\">composable architectures</a> quickly see the benefits during the pitch stage, but when the work starts, so do the problems—mainly when you connect services and when content editors or marketers start working. Because projects are complex, agencies generally sell discovery phases, workshops, and agile methodologies. That’s a great practice, but one that also runs face-first into the challenge of building composable projects at scale.</p><p>Here are two key issues:</p><h3 id=\"the-way-agencies-work-makes-parallel-collaboration-difficult\">The way agencies work makes parallel collaboration difficult.</h3><p>For example, choosing a CMS or front-end framework depends on the discovery phase or finalization of a client contract. When a CMS or a design is ready, front-end developers can start building the interface, and back-end developers can commence data modeling. QA always happens at the end, inevitably spilling over into the next sprint.</p><h3 id=\"the-architecture-is-code-first-ie-composed-of-glue-code-that-works-in-only-one-way\">The architecture is code-first, i.e., composed of glue code that works in only one way.</h3><p>As you scale that up, things get very painful very fast. </p><ol><li>Abstract, code-first systems aren’t built for content editors. At best, they tolerate them. Given that it’s hard to deliver great work while constantly fighting with your own tools, people become upset and less productive, or they leave. Either result can cause major project delays.</li><li>Developers are constantly involved with the publication process because content editors need technical support to create experiences. That means that developers are kept from building new, value-adding features and pursuing innovation, and every sprint is filled with unpredictable disruption.</li><li>A tech stack connected through tightly-coupled integration code is way worse than the legacy monoliths. If things go wrong, no sole organization is at fault. Instead, the people with the overall responsibility—the agency—are held accountable.</li><li>That glue code I mentioned before? It sticks <em>hard</em>. You must prepare for pain when you try to replace a single headless source in a web of hard-integrated sources and front-end code. </li></ol><p>There is a better way, but it requires a major shift in your thinking.</p><p>##How a great DXCP unlocks parallel workflows</p><p>Time-to-value is much more critical than time-to-market. Going to market quickly with a terrible product doesn’t do much more than damage your reputation and annoy customers. The fact you least did it quickly won’t be much consolation to anyone.</p><p>The secret for time to value is working more in parallel. Of course, that’s much easier said than done for difficult tasks like ideation of page composition, component definition, data-model design, CI/CD setup, and, concurrently, choice of the front-end framework. Fortunately, cool new tools are around to make it much easier. </p><p>To work in parallel, first, integrate design-related data into your process with a <a href=\"https://uniform.dev/what-is-digital-experience-composition\" rel=\"nofollow\">digital experience composition platform (DXCP)</a>. Design data presents your content in a certain way in the context of each page and potentially for each audience. For example, a featured product shows as being featured because you tell the page to feature it in that specific way.</p><p>On the other hand, the product data comes from your commerce engine, which just serves the product info and has no knowledge of whether the product is featured on a page. The DXCP orchestrates and links your design to the external source(s) that hold your data. This crucial context step allows you to work effectively in parallel.</p><p>Note the difference between domain data and design data. With a DXCP, you design pages based on the components that make up a page. You can link each component to a resource, i.e., an external API like a headless CMS, DAM, PIM, or a legacy system. Your domain data resides in those systems. You then bind the external API data to parameters and fields on the components in the DXCP to create the final experience for your audience on a channel.</p><p>You can set up connections with DXCP so that the system acts as an API data aggregator that loosely couples to external sources. Additionally, you can establish access rules that define which users can add resources and bind to components. For example, content editors could add the Instagram API and feed that data to a component for campaign pages without developer assistance. </p><p>Once resources are bound, API results are cached at the CDN edge for fast and easy querying. Developers only need to connect to the CDN endpoint to access the data from all the sources that channel data to the components on the page.</p><p>Even without a CMS, content editors can fill in the component fields with content, accelerating the UX and prototyping phases of a project. Once a CMS is in place, the content connects as a resource to a component without the need to rebuild the component. For efficiency, you can configure the fields to be dynamic. No coding is required.</p><h3 id=\"how-a-dxcp-enables-parallel-collaboration\">How a DXCP enables parallel collaboration</h3><p>If you know what kind of components you need or have a library like <a href=\"https://www.kickstartds.com/\" rel=\"nofollow\">kickstartDS</a> or <a href=\"https://tailwindui.com/\" rel=\"nofollow\">Tailwind UI</a>, you can configure them in the DXCP and start composing pages—with no need for a CMS initially. Simultaneously, the back-end team can select the headless tool while the front-end team can choose a front-end framework and start querying the composed pages. The QA team can start testing the front end as soon as the first few pages have been created with the component library.</p><p>Since the DXCP does not dictate what kind of hosting or CI/CD stack is needed, the DevOps team can work on the setup while the rest of the process is proceeding. Once you install the CDN integration, anyone with the appropriate access privileges can handle releases. Can’t find the prebuilt integration? Build your own, or just add a few webhooks for communication.</p><p>On top of that, DXCPs also feature a project map as a basis for creating pages and subpages. The product owner can start building user journeys in the same system while all the other operations are going on. Say goodbye to journey spreadsheets because you can now use the tool you will also use when teh project is in production.</p><h3 id=\"how-to-ensure-the-architecture-is-divisible-and-maintainable\">How to ensure the architecture is divisible and maintainable</h3><p>Due to the nature of DXCP, you don’t need to interconnect external tools; they all talk directly to the DXCP. Likewise, changing or adding headless sources does not affect developers in nearly the same way. Without developer involvement in the no-code editor, universal previews, and project maps, content editors are much more productive. Business users don’t need to ‘publish and pray’ when they build a page from multiple sources—it’s all right there.</p><p>Moreover, since the no-code editor integrates flawlessly with external sources and normalizes their interfaces, content editors don’t need to understand how those systems work—making it far easier to onboard new team members. Add that to the freedom of grouping components together and easily personalizing those sources; business users are empowered to own their workflows and results without depending on overworked devs. </p><p>Given that DXCP is front-end, hosting, and CDN agnostic, developers can use the tools they love, which makes the most sense for the job at hand. No more compromising with the whims of legacy tech! Even though DXCP has an opinion on the direction of the architecture, once developers go down that road, they have complete freedom to do their job in the way they prefer.</p><h2 id=\"how-dxcp-transforms-the-project-development-process\">How DXCP transforms the project-development process</h2><p>Adopting DXCP can revolutionize how you build projects—if you let it. With traditional blockers out of the way, teams can accomplish more in parallel and show value much faster. For all that composable architecture at scale is generally messy and chaotic, forcing agencies and brands to work around issues never seen before: digital experience composition adds structure while staying tech-agnostic and accelerates time-to-value.</p><p>No matter how much things change, some things stay the same. The agencies that best embrace new technologies and new mindsets to maximize their impact will gain an edge in the market. As the market gets less certain, finding ways to deliver more value for clients faster and effectively showcase it will be crucial. When that also creates a platform that will deliver in the long term and position your agency as a key strategic partner—that’s where the magic happens. </p>",
    "tocs": [
      {
        "toc": {
          "html_id": "calling-for-a-revolution-in-how-agencies-run-tech-projects",
          "text": "Calling for a revolution in how agencies run tech projects"
        }
      },
      {
        "toc": {
          "html_id": "why-agencies-embracing-composable-architectures-face-challenges",
          "text": "Why agencies embracing composable architectures face challenges"
        }
      },
      {
        "toc": {
          "html_id": "how-dxcp-transforms-the-project-development-process",
          "text": "How DXCP transforms the project-development process"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T12:56:10Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_fast-personalized-pages-with-vercel-edge-middleware-and-uniform": {
    "date": "2023-03-18T12:49:56Z",
    "title": "Fast, personalized pages with Vercel Edge Middleware and Uniform",
    "canonical_url": "https://uniform.dev/blogs/personalization/blazing-fast-personalized-pages-with-vercel-edge-middleware-and-uniform",
    "description": "To maintain an engaging relationship with your audience and increase conversions to your site, you...",
    "url": "/writing/fast-personalized-pages-with-vercel-edge-middleware-and-uniform",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1yp1gg5ldu4y8tozle7.png",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_fast-personalized-pages-with-vercel-edge-middleware-and-uniform",
    "locale": "en-us",
    "tags": [
      "performance",
      "personalization",
      "vercel",
      "edge"
    ],
    "created_at": "2023-03-18T12:49:56Z",
    "updated_at": "2023-03-18T12:49:56Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>To maintain an engaging relationship with your audience and increase conversions to your site, you need personalization. However, creating personalized experiences is technically challenging. Most personalization techniques involve dynamic rendering and an origin server that holds personalization rules for end-users—a slow approach that often negates the conversions gained through personalization.</p><p>Among the many moving parts to consider, performance and scalability are tough nuts to crack. Fortunately, companies like Vercel, which recently released <a href=\"https://vercel.com/docs/concepts/functions/edge-middleware\" rel=\"nofollow\">Edge Middleware</a>, make those problems readily solvable for developers. With Vercel in place, you only need to choose the right tech to personalize at the CDN edge without having to grapple with the one thing that slows things down: the origin server.</p><h3 id=\"the-benefits-of-edge\">The benefits of edge</h3><p>Vercel offers familiar tech to developers: it’s all JavaScript based. With Edge Middleware, developers have the tools to make great things happen that they could not before. All the dynamic tasks that typically occur on an origin server can now happen near end-users, leading to faster page loads and automatic scaling out of the box. Not only that, Edge Middleware have user data that’s handy for personalization: country, region, and the device in use.</p><h3 id=\"the-personalization-process-at-the-edge\">The personalization process at the edge</h3><p>By eliminating the origin server that is typically far away from end-users and bringing the dynamic rendering closer with Edge Middleware, you can personalize with high performance and in a decentralized manner. The only way to personalize without a central brain that knows all the personalization rules is to bring that brain into the software as a first-party tool. This is how that works:</p><ol><li>Create and store the configuration rules, i.e., all the <a href=\"https://docs.uniform.app/capabilities/personalization\" rel=\"nofollow\">criteria for personalization</a>, in the codebase as a manifest JSON file at build time.</li><li>Store variations of the personalized content in the codebase at build time. Since a headless CMS is generally in use, those variations are tiny JSON models in the form of components.</li><li>The Edge Middleware has a tracker that monitors user behaviors, which are signals that users give off by doing something on the site. The Edge Middleware awards a score to the personalization criteria configured in step 1. </li><li>The tracker automatically creates a profile of user actions and, based on the scores awarded against the various criteria, displays the right content.</li><li>You can render the content via the Edge Middleware or in the front end at hydration time.</li></ol><p>The above approach to personalization is how Uniform Context works. Combining Edge Middleware rendering of personalized content with JavaScript hydration for subsequent page loads renders highly dynamic pages within ~50 milliseconds only. The approach is to initially render all the pages statically (SSG/Jamstack) and ensure that the Edge Middleware knows which parts it can personalize. While serving a page, the Edge Middleware checks if personalization is needed and, if so, fills the identified components with the correct personalized content.</p><p><img alt=\"uniform-vercel-edge-middleware\" height=\"720\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://images.ctfassets.net/9ku1oyd4k3wo/4lvoQsz6WNCbJXIWQVQJSI/b36e13c87c86ca668fea6adf3da2b078/uniform-vercel-edge-middleware.svg\" width=\"1280\"></p><p>Another benefit of the Vercel edge is that at the edge level, the CDN knows a lot about the end-users: their location, city, device, browser version, etc. Thus, Uniform Context can prepersonalize pages with Edge Middleware according to the location or device information from the Vercel CDN.</p><p>Want to try that out for yourself? You’ll find all the details in Uniform’s <a href=\"https://docs.uniform.app/integrations/cdn/vercel/personalization\" rel=\"nofollow\">documentation on Vercel’s edge-side personalization</a>.</p><h2 id=\"conclusion\">Conclusion</h2><p>To recap, by combining Uniform Context on Edge Middleware with statically rendered pages (SSG/Jamstack), you can create highly dynamic, personalized pages that load in less than a minute. In the past, Uniform offered dynamic personalization features through Vercel ESI. Edge Middleware now gives you a much more flexible and intuitive model for implementing personalization at scale. </p>",
    "tocs": [
      {
        "toc": {
          "html_id": "the-benefits-of-edge",
          "text": "The benefits of edge"
        }
      },
      {
        "toc": {
          "html_id": "the-personalization-process-at-the-edge",
          "text": "The personalization process at the edge"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-18T12:49:56Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-move-from-monolithic-to-composable-architectures": {
    "date": "2023-03-13T20:42:55Z",
    "title": "The move from monolithic to composable architectures",
    "canonical_url": "https://uniform.dev/blogs/composable-architecture/composable-architectures-are-the-future-of-the-digital-sphere",
    "description": "Success in business can be attributed to many factors, notably team talent and efficacy of products...",
    "url": "/writing/the-move-from-monolithic-to-composable-architectures",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56u97go8avwyexrr01nx.png",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_the-move-from-monolithic-to-composable-architectures",
    "locale": "en-us",
    "tags": [
      "mach",
      "webdev",
      "composable",
      "monolith"
    ],
    "created_at": "2023-03-13T20:42:55Z",
    "updated_at": "2023-03-13T20:42:55Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Success in business can be attributed to many factors, notably team talent and efficacy of products or services. What also counts in this digital age are immersive and performant online experiences. Realistically, delivering engaging experiences is a never-ending undertaking. To avoid lagging behind rivals, brands must do that time and again in all their interactions with consumers.</p><p>Can you adapt and iterate as rapidly as necessary? Can you quickly respond to current trends and launch digital experiences without tech support? When it comes to digital capabilities and speed to market, technology makes all the difference. This post explains why the industry is moving from monolithic to composable architectures and how those two architectures can actually work together.</p><p>##What are monolithic applications?</p><p>Built as a single unit, monolithic applications (aka monolithic architectures) are all-in-one, self-contained suites with robust features. Known as legacy systems, monolithic applications occupy a long-standing place in today’s makeup of businesses as the easy way to acquire digital capabilities. You go through one purchase for all your business needs and sign a contract with one solution provider, who would make it all happen and support you along the way.</p><p>Such a mono approach might not be the best for the long haul, however. In a free-market economy, monopolies are generally frowned upon because of the guardrails put up by those dominant players, who would enforce rules and regulations to stifle or eliminate competition altogether. What’s more, monopolies have no incentives for innovation or improvements in efficiency.</p><p>That’s not a direct comparison to monolithic solutions in tech per se since competition does exist among tech solution providers. Rather, a brief assessment of monopolies is helpful context for why stand-alone architectures aren't ideal for businesses. If one vendor has all the say about the ways your tech stack is used and adapted, you are limited in many ways.</p><h2 id=\"why-are-monolithic-applications-not-the-way-forward\">Why are monolithic applications not the way forward?</h2><p>A pro-con analysis shows real—or at least perceived—benefits in relying on a monolithic architecture for your tech stack. If your IT team is well versed in the vendor along with its code and operating system, an established ease of use exists. Furthermore, it feels simple to keep and manage everything in one place and to have, theoretically, one source of truth, with all the tools housed together under the purview of one provider. Not to mention that you have one all-knowing point of contact or support team to call on in case of issues.</p><p>Nonetheless, given the future of business and the digital experiences consumers demand, the cons of monolithic applications far outweigh the pros in three key areas:</p><ul><li><strong>Customization</strong>. Limited is the ability to tailor monolithic applications to meet business needs. Also, even though those applications offer wide-reaching features, you might not ever use some of the features. And you’re at the whims of the monolith’s technology roadmap for innovation. For example, something you need to meet customer needs might not be available until the application’s next software update, potentially months away. In addition, in contrast to today’s fast market changes, upgrades can be time-consuming and slow with a need for developers to make changes or adaptations. With those modifications come complexities, third-party add-ons, or new applications that developers must painstakingly build themselves.</li><li><strong>Agility</strong>. Trends change and new opportunities emerge more rapidly than monolithic applications can keep up. Adaptability becomes a struggle, especially if you’re locked into the suite on contract.</li><li><strong>Scalability</strong>. Businesses that aspire to be fast-moving and competitive are hindered by monolithic technologies that are difficult to scale. Accordingly, growth is hampered because of the slow and heavy lift for developers to morph one monolithic architecture into an all-things-for-all-people stack.</li></ul><p>Another hurdle businesses face is adapting a monolithic application to be composable or as a “<a href=\"https://dev.to/timbenniks/the-mach-monolith-2knd\" rel=\"nofollow\">MACH monolith</a>.” Rather than replatforming or ditching an established monolithic architecture to build a new microservices-centric one, brands apply API-first and composable solutions to an existing framework by integrating a host of composable products. Doing so could seriously muddy the waters, however, creating a beast of an architecture that’s not composable, sustainable, or agile.</p><h2 id=\"how-can-monoliths-and-composable-work-together\">How can monoliths and composable work together?</h2><p>Legacy monolithic architectures can, in fact, work with composable applications through digital experience composition platform (DXCP), which acts as composable’s opinionless foundation by doing the following:</p><ul><li>Offer the prebuilt system integrations and tools business users need, lightening the burden of innovation through new features.</li><li>Enable teams to merge their legacy platform with a composable approach, orchestrating best-of-need tools and offering a user-friendly interface for developers and practitioners alike.</li></ul><h2 id=\"how-does-dxcp-help-make-composable-mainstream\">How does DXCP help make composable mainstream?</h2><p>Without doubt, monolithic architectures are no longer ideal for brands that are focused on creating digital experiences that drive impact and conversions. Composable architectures give control of the experience-creation process to the brands responsible for the end results, instead of one tech vendor.</p><p>Despite the promise of future-ready composable stacks, building them can be a slow and expensive process, with weeks of custom glue code needed to integrate the multiple services. They are often also incredibly frustrating for marketing teams, content writers, graphic designers, and other business users, as previously simple tasks require multiple tools and developer support.</p><p>This is where DXCP and companies like Uniform enter the picture. With rapid integration tools that dramatically speed system build and maintenance and powerful no-code interfaces for marketers and other business users to create engrossing experiences in a single, integrated environment using every tool they need.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "why-are-monolithic-applications-not-the-way-forward",
          "text": "Why are monolithic applications not the way forward?"
        }
      },
      {
        "toc": {
          "html_id": "how-can-monoliths-and-composable-work-together",
          "text": "How can monoliths and composable work together?"
        }
      },
      {
        "toc": {
          "html_id": "how-does-dxcp-help-make-composable-mainstream",
          "text": "How does DXCP help make composable mainstream?"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-13T20:42:55Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_mach-versus-monolithic-suites": {
    "date": "2023-03-13T20:37:36Z",
    "title": "MACH versus monolithic suites",
    "canonical_url": "https://uniform.dev/blogs/composable-architecture/mach-versus-monolithic-suites#mach-as-an-evolution-of-monoliths",
    "description": "Today, with consumers fast becoming digitally advanced, companies realize that old technologies are...",
    "url": "/writing/mach-versus-monolithic-suites",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfwuyqdwlw3du1k96z1l.png",
    "reading_time": "5 min read",
    "uid": "article_entry_uid_mach-versus-monolithic-suites",
    "locale": "en-us",
    "tags": [
      "mach",
      "composable",
      "architecture",
      "webdev"
    ],
    "created_at": "2023-03-13T20:37:36Z",
    "updated_at": "2023-03-13T20:37:36Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>Today, with consumers fast becoming digitally advanced, companies realize that old technologies are no longer viable and that companies must evolve continually to keep up with consumer expectations. However, making technology decisions can be difficult, confusing, and stressful, especially since you might have to live with them for years. You also run the risk of being locked into products that cannot keep up with your organization's changing needs or, even worse, products that were never a good fit in the first place. No wonder that when an architecture emerges that promises to reduce that risk, people pay attention.</p><p>Reality is, monolithic suites are no longer the safest choice. In their quest to stay agile, nimble, customer-centric, and future-proof, businesses must find more effective ways for transforming digital experiences and are turning to the increasingly popular MACH architecture.</p><h2 id=\"mach-architecture-explained\">MACH architecture explained</h2><p>MACH stands for microservices, API-first, cloud-based, and headless, comprising decoupled, modular, self-contained, and independent components that work together as one, as explained below:</p><ul><li><strong>Microservices</strong>: These are individual business capabilities that are independently built, deployed, and managed.</li><li><strong>API-first</strong>: APIs function as the pipeline through which applications interact, resulting in a microservices-based architecture that activates data exchange among the services.</li><li><strong>Cloud-native</strong>: Since cloud computing offers scalability and adaptability, cloud-native applications foster innovation, accelerating the creation and optimization of microservices and, in turn, the process of project initiation through delivery.</li><li><strong>Headless</strong>: This approach of decoupling the front-end user experience from the back-end logic spells complete freedom in building omnichannel digital experiences.</li></ul><p>Together, those four components promise to reduce the risk of product lock-in and enable enterprises to adopt technologies that best meet their needs in a timely manner. As a response to the monolithic architectures that have long dominated enterprise applications, MACH addresses the limitations of legacy technologies while staying flexible for businesses to adapt to changes.</p><p>Understanding MACH requires coming to grips with its two foundational concepts, integration and composability, as well as the advantages and disadvantages of its monolithic predecessor.</p><h2 id=\"mach-as-an-evolution-of-monoliths\">MACH as an evolution of monoliths</h2><p>Though costly, monoliths are convenient because, being from a single vendor, their components are likely to work well together. Additionally, since most monolithic vendors are well-established market players, they offer all the features required for building and maintaining digital experiences and serve as a single contact for businesses to call on in case of issues.</p><p>Encompassing its services in one interdependent package, MACH evolves from a monolithic, tightly coupled system. Those services, frequently called a “best-of-need” stack, comprise robust APIs for facilitating data exchange among services along with the best tools for experience creation without incurring expenses on unnecessary features. Another benefit is that businesses need not depend on a single vendor’s roadmap for new channels or technologies.</p><p>However, businesses might find it difficult to evaluate the array of MACH vendors and tools and make the right decisions. Also, given MACH’s multivendor setup, teams might need to perform their tasks with several tools instead of one, as in the case of a monolithic system. Another major challenge is that integration of the tools often requires heavy custom coding.</p><p>To decide which system, MACH or monolithic, to opt for, businesses must find out if the advantages are real and whether the advantages surpass the disadvantages.</p><h2 id=\"suites-versus-mach\">Suites versus MACH</h2><p>The difference between a suite and MACH comes down to choice. In the case of a suite, the vendor selects the products for you. With MACH, you pick the products you want from the vendors you prefer.</p><p>Back when suites were popular, building a stack was just not practical for most businesses. Nowadays, vendors are building products with the expectation that companies will integrate them with other products. Moreover, delivering those products through a cloud-based infrastructure means that businesses need not support multiple products built with different technologies. That’s the world enabled by MACH.</p><p>For businesses that aim at building a technology stack of products that meet their unique requirements, MACH provides the foundational architecture. Therefore, if you buy a CMS, a personalization tool, and an enterprise module built on MACH principles, you can seamlessly and consistently connect them all.</p><p>Still, the suite approach continues to predominate, and businesses often adopt it even while designing a modern, composed architecture. That practice has led to the birth of the MACH monolith, an in-between version of the old suite approach and the new composable way of designing architectures.</p><h2 id=\"uniform-as-the-infrastructure-of-composable-systems\">Uniform as the infrastructure of composable systems</h2><p>Uniform offers a fast track to composability by handling all the difficult and time-consuming integration tasks, personalization settings, etc., so that you can focus on critical undertakings like web design and content creation.</p><p>Remarkably, Uniform offers composability right out of the box. You get to select the components that you want in your stack, and we handle all the connections and orchestration. You need not build this complex but valuable integration yourself.</p><p>To recap, building composable systems on a MACH architecture is a modern, sustainable approach that resolves the difficult problems organizations have accepted as a natural part of working with enterprise software. With composability, you can build stacks with tools of your choice. The MACH architecture makes all that happen in a sustainable, scalable manner, and Uniform provides the infrastructure for orchestration across your MACH platforms.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "mach-architecture-explained",
          "text": "MACH architecture explained"
        }
      },
      {
        "toc": {
          "html_id": "mach-as-an-evolution-of-monoliths",
          "text": "MACH as an evolution of monoliths"
        }
      },
      {
        "toc": {
          "html_id": "suites-versus-mach",
          "text": "Suites versus MACH"
        }
      },
      {
        "toc": {
          "html_id": "uniform-as-the-infrastructure-of-composable-systems",
          "text": "Uniform as the infrastructure of composable systems"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-13T20:37:36Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-mach-monolith": {
    "date": "2023-03-13T20:20:45Z",
    "title": "The MACH monolith",
    "canonical_url": "https://uniform.dev/blogs/composable-architecture/the-mach-monolith",
    "description": "For years, the headless concept went through the nerd vine at boardrooms, pushing execs to take...",
    "url": "/writing/the-mach-monolith",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdj396fv4iyh8zce4rsg.png",
    "reading_time": "7 min read",
    "uid": "article_entry_uid_the-mach-monolith",
    "locale": "en-us",
    "tags": [
      "architecture",
      "composable",
      "webdev",
      "javascript"
    ],
    "created_at": "2023-03-13T20:20:45Z",
    "updated_at": "2023-03-13T20:20:45Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>For years, the headless concept went through the nerd vine at boardrooms, pushing execs to take action. Now that everybody is jumping on the bandwagon, interesting developments have surfaced: Traditional monoliths have adopted new messaging with the terms “composable” and “headless” in it, and headless systems are integrating more monolithic-like features. Meanwhile, at a loss as to what to do to ensure that their architecture is scalable, secure, and future-proof, brands make decisions out of sheer FOMO. All that has created the beast I call the MACH Monolith.</p><p>The MACH approach for building digital architecture is the way to go, and it can be an amazing journey. However, you must apply the MACH principles correctly. This article explains what that means.</p><p>We can agree on one thing: web development is complex, hence the word <strong>development</strong>. For years, software vendors tried to simplify the job by creating suites with all the features businesses would need, from front-end accelerators to editing capabilities for rich content. Such an approach of having one platform to tackle all digital-business challenges worked pretty well.</p><p>However, drawbacks do exist. For one thing, businesses must buy into how the suite is developed as a product. Additionally, they’re stuck with vendor lock-in and dependent on the suite’s roadmap, which holds back innovation and causes developers to break out of the system with customization. When updates are necessary to the underlying monolith, the architecture becomes flawed.</p><h2 id=\"a-paradigm-shift\">A paradigm shift</h2><p>The general mindset in web development is that even though everything is headless and API-first, we are still operating in the “suite” paradigm. Even the technical people who tried to break away from the monolith approach in the recent past still have that frame of mind. Paradigm shifts take time, and we are currently in the middle of one.</p><p>In today’s composable world, where architectures are crafted with best-of-breed tools, we must recognize the fact that no software can take the sting out of the challenges involved. Reality is, no full-chain covering pieces of software exist in the SaaS world even though that’s a bitter pill to swallow because that’s what we were used to with suites.</p><p>Hence, the suite approach continues to predominate, and people often tend to adopt that even while designing a modern composed architecture. As reflected across disciplines, such a practice has led to the birth of the MACH monolith, an in-between version of the old suite approach and the new composable way of designing architectures. Let’s talk about how the MACH monolith surfaced.</p><h2 id=\"monolith-like-features-from-headless-first-products\">Monolith-like features from headless-first products</h2><p>Because only techies like the headless space, the market doesn’t seem ready to fully embrace API-first designs and composable architectures. After all, APIs are techspeak, and since architectures are created with a tech hat on, the experience is unfriendly to practitioners like content editors and marketers. For details on this phenomenon, see this <a href=\"https://uniform.dev/blogs/digital-experience-composition-dxc/tame-the-martech-chaos-with-dxc-and-mach\" rel=\"nofollow\">article</a> on orchestrating MACH architectures.</p><p>Also, because headless systems are built by and for techies, API-first products are ahead of their time with no connecting mechanism for the composing elements to benefit all stakeholders. A way to resolve that is described later in this article.</p><p>To avoid losing market share, headless systems must have the following features to become more usable to practitioners:</p><ul><li>Integration fields into the CMS and other headless systems, e.g., search, DAM, PIM, commerce, CRM, and personalization, to unify the editing experience and offer a singular API for developers.</li><li>An ability to preview functionalities, tightly coupling the front end to the preview SDK of the CMS.</li><li>An ability to compose pages inside the CMS data model to add contextualized data for compositions to the clean data model of the CMS content.</li><li>Routing and sitemap-related content mapping in the CMS that gives practitioners a clear overview of the system.</li></ul><p>All those features put the CMS in the center of the universe of digital architecture. Questions come to mind, however:</p><ul><li>What if you have multiple CMS systems?</li><li>What if you want to switch your commerce engine but it’s tightly coupled to the CMS?</li><li>What if you'd like to switch to another CMS?</li><li>What if you must add another channel like a TV app, yet the data models with desktop presentational context cannot accommodate that?</li></ul><p>The answers to those questions result in a load of pain for developers, who often must wrestle with a system replatform every few years. With things becoming too interconnected and concerns not separated, the ultimate choice is usually to discard the old architecture and start anew. Doing that gets very expensive very fast.</p><p>Surprisingly, since the paradigm shift is as yet incomplete, the original, highly innovative API-first companies are now adding other semi headless products to their portfolio so as to stay relevant in a slightly lagging market. Consequently, software vendors must serve the mid-market tier of businesses with accelerated product launches and ease of use. Otherwise, website-in-a-box systems like WordPress or Shopify will outperform them.</p><h2 id=\"hybrid-headless-and-pretend-composability-from-suites\">Hybrid headless and pretend composability from suites</h2><p>To stay relevant in the interim, traditional suite vendors are implementing a form of hybrid headless products. You can use their system in a headless, API-first manner but must stick to their way of operations. The fact that you need specialized knowledge of the system to work with it goes against the API-first proposition of total developer freedom. Still, you now have an API and, therefore, a headless system.</p><p>Suite vendors are splitting up the suite or buying additional service providers and selling their products as composable pieces to their platform. That’s not real composability because you’re not free to choose your best-of-breed tools and can only select from the vendor’s pool of services, which are generally tightly coupled to the suite's core and, therefore, challenges filled. Being interconnected and indivisible is typical of monolithic software, not composable software.</p><p>I call that approach compostable architecture.</p><h2 id=\"the-mach-monolith\">The MACH monolith</h2><p>We’re seeing a couple of patterns over and over again.</p><p><img alt=\"MACH Monolith\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fp3gnzgd3unj8tbvru3c.png\" width=\"1280\"></p><p>If the separation of concerns is not respected, software vendors create an indivisible and interconnected bundle of best-of-breed tools—a complicated scenario that makes it tough to discern what’s connected to what, not to mention that you have created your very own vendor lock-in. Things work in only one way, and only the original build team understands how they work. Onboarding of new team members becomes complicated and burdensome, leading to frustration among developers.</p><p>Separately, contextual composition data is often stored in the CMS and mixed with the clean data model you started with, such as adding a checkbox to spotlight an item on a page, which is a design decision for the item in a specific context. What if that context changes when the item is shown in a different place on the website? Composing pages with specific user contexts is problematic in a CMS, invariably generating dirty data over time. Instead, page composition in the context of a user must occur in the front end or a composition platform.</p><p>Another approach is not to fully interconnect the systems. That’s a great start, but where does that connection usually occur? In the front end. As a result, the front-end application contains all the knowledge of the link to all the systems that compose your website, generating a considerable risk for maintenance and security, let alone that it’s not future-proof. To be effective, a front end must be \"stupid\" and \"stateless\" for updates.</p><p>Besides, business problems also exist:</p><ul><li>What if the architecture does not behave the way it’s supposed to? Determining where it went wrong is complicated.</li><li>Who do you seek help after pinpointing the issue? The best-of-breed tool, your team who made architecture decisions, or the agency that built the system? Businesses with a failing architecture that can’t point the liability finger eventually replatform and start the process from scratch. The MACH monolith thus ends up being much more inferior to the traditional suite with only one vendor.</li></ul><h2 id=\"the-solution\">The solution</h2><p>What businesses need is an opinionless platform that does the following:</p><ul><li>Orchestrates best-of-breed tools.</li><li>Offers a user-friendly interface to developers and practitioners alike.</li><li>Offers an entirely tech-agnostic SDK.</li><li>Offers no-code tools for practitioners to work with in such a way that they do not notice they are composting pages with different headless sources.</li></ul><p>Even though the paradigm shift to truly composable architectures is still ongoing, the platform described above already exists. Enter <a href=\"https://uniform.dev\" rel=\"nofollow\">Uniform</a>, on which developers and marketers have complete control of their digital-experience stack, and I’m proud to run its developer relations team. Uniform is slated to solve many issues developers, architects, and practitioners will face in the coming years.</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "a-paradigm-shift",
          "text": "A paradigm shift"
        }
      },
      {
        "toc": {
          "html_id": "monolith-like-features-from-headless-first-products",
          "text": "Monolith-like features from headless-first products"
        }
      },
      {
        "toc": {
          "html_id": "hybrid-headless-and-pretend-composability-from-suites",
          "text": "Hybrid headless and pretend composability from suites"
        }
      },
      {
        "toc": {
          "html_id": "the-mach-monolith",
          "text": "The MACH monolith"
        }
      },
      {
        "toc": {
          "html_id": "the-solution",
          "text": "The solution"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2023-03-13T20:20:45Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_the-future-of-jamstack-is-composable": {
    "date": "2022-02-23T13:04:08Z",
    "title": "The future of jamstack is composable",
    "canonical_url": "",
    "description": "This post is either for developers who want an “at-scale” overview of modern architecture or for...",
    "url": "/writing/the-future-of-jamstack-is-composable",
    "image": "https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so0lvl9w5rea6i7sfp6u.jpeg",
    "reading_time": "8 min read",
    "uid": "article_entry_uid_the-future-of-jamstack-is-composable",
    "locale": "en-us",
    "tags": [
      "jamstack",
      "architecture",
      "composable",
      "orchestration"
    ],
    "created_at": "2022-02-23T13:04:08Z",
    "updated_at": "2022-02-23T13:04:08Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<blockquote><p>This post is either for developers who want an “at-scale” overview of modern architecture or for technical decision-makers looking at a great way to build a digital pipeline in this new composable world.</p></blockquote><p>In modern web architecture, we are faced with the daunting task of composing headless sources together into a cohesive experience that feels like one system for all stakeholders. Many consider the roadblocks to be technical, but they are also organisational. This is mainly because there is no more centre of the universe - the origin server - that controls everything. Headless sources are API-first and need to be integrated to create a website or app. Without an origin server, content editors, marketers and developers alike need to connect to different systems to get things done. Mildly put, this is a struggle and, in the words of actual people I’ve worked with: a dumpster fire.</p><h2 id=\"in-this-article\">In this article</h2><p>You will learn about the two things you need to create high quality, easy to manage, secure and performant front-ends that don't make a bespoke architecture or a monolith of modern tech.</p><ol><li>Use the Jamstack with your favourite framework and host on your favourite CDN.</li><li>Behind it all, you have an orchestration platform that is vendor agnostic, has a killer SDK and gives all team members the ability to compose content without bothering developers.</li></ol><p>Combining these two things will make your digital pipeline run smoothly and future proof the investments made. You can add legacy platforms as data sources if you have the right orchestration platform. You can slowly but surely transition away from them without doing a big-bang change offering big brands a safe path into the future.</p><h2 id=\"the-jamstack-why-it-sits-front-and-centre-in-modern-architectures\">The Jamstack: why it sits front and centre in modern architectures</h2><p>Sites built with the Jamstack approach are a combination of static files generated by the CI/CD pipeline of your choice. Most dynamic stuff happens in the generation step, where the codebase reaches out to APIs and services to render all pages statically.</p><p><img alt=\"Jamstack: build time vs runtime\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpp5kpu4k3wxs91wne0b.png\" width=\"1280\"></p><p>The performance gains alone justify this approach. There is no runtime page generation, and the app doesn’t have to connect to an origin server to figure out what content to serve. If you want to scale up for Black Friday, just put the static files in more places on the CDN edge, and all is well. Next to the performance gains, you also have a much more secure system. If your architecture has an origin server with all the knowledge of the system, that is a weak point for security.</p><p><img alt=\"Traditional web vs Jamstack\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pp86io6058n938u4dw70.png\" width=\"1280\"></p><p>You can add dynamic data as well. CDN providers have built the ability to run code on the edge, implementing serverless functions and edge workers.</p><p>A serverless function is a service that lets you run code without provisioning or managing servers. Serverless functions tend to be simple and do not have a state. They require an input, and they will give an output. After use, they will not stay up unless you request them to do that. The benefit is that the cost is low and that these functions are not running if not needed - consuming less energy. You can use them when compiling your Jamstack site, but they also work well at runtime.</p><p>Edge workers (as Cloudflare calls them) are pieces of code that live on the CDN edge close to the user and execute when a user visits a URL. This is ideal for reading cookie values and changing the stream of HTML that the CDN renders for that page. With this approach, you can dynamically manipulate what the user sees in their context while still serving a static page initially created by your Jamstack site. This approach is excellent for rendering personalised content based on user actions without the need for JavaScript hydration or an origin server.</p><p><img alt=\"Add dynamic parts to the Jamstack with serverless and edge compute\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfn819631e7mvnau8mwl.png\" width=\"1280\"></p><h2 id=\"the-orchestration-how-to-cable-manage-your-architecture\">The orchestration: how to cable manage your architecture</h2><p>How you connect things up before the site is rendered is vital for the platform you are building. There are many technical and organisational problems to address when you scale a composed architecture to big organisations.</p><ul><li>Choices, choices, choices: CMS, Commerce, CDN, Marketing clouds, DAM, Personalization, A/B testing, CRM, etc.</li><li>Integration is complex, and orchestration is hard to build.</li><li>Often there is a lack of intuitive tools for non-devs to build and manage experiences.</li><li>Early implementation decisions can limit the ability to change and evolve.</li><li>Wrong choices can create developer bottlenecks and hinder time to market and agility.</li></ul><p>The bigger the organisation, the more critical this statement becomes: <em>To achieve true value, you need to orchestrate technology, people, and processes.</em></p><p>The digital pipeline can be stalled at many places. You’ll need a platform to help you orchestrate the whole architecture into a usable system for all stakeholders. A cohesive system has the ability for multiple systems to work together as one - for each system to have an awareness of what the other systems are doing. This same story goes for the practitioners in the system. From developers to content editors and from marketers to data analysts. All these people play a vital role in your online success.</p><h3 id=\"the-platform-we-need\">The platform we need</h3><p>The platform we need has to be “opinionless” and technology agnostic. Its primary goal is to cater to all stakeholders and prevent re-platforming.</p><blockquote><p>Services integrators or agencies often use the “re-platform” model. Out with the old monolith and in with the new monolith. This way, they can sell their business transformation story and do a big bang release. The drawback here is that re-platforming takes a long time and is costly. It is also the complete opposite of an agile approach to a project. Agencies tend to be \"platform partners\" and sell in a platform first solution rather than a specific value solution to a brand. This is logical as they can hire specialists that retain their value project after project. However, modern architectures demand making choices for the business's needs, not what the agency or software vendors want to sell in. Square pegs and round holes could work for a while until it’s too hard to manage, and then you re-platform. Again…</p></blockquote><p>The orchestration platform should support end-to-end delivery of digital products:</p><ul><li><strong>Development</strong>: developers build components that incorporate content from multiple sources without building custom integrations.</li><li><strong>Authoring</strong>: practitioners build personalised digital experiences using no-code tools, including instant preview without involving developers.</li><li><strong>Deployment</strong>: developer and practitioner activities automatically trigger deployments to your CDN of choice to ensure digital experiences are always current.</li><li><strong>Delivery</strong>: Personalization and experimentation is delivered from the edge for the fastest possible performance.</li></ul><p>The key is the “power of choice” for the tech stack, hosting / CDN, data fetching and what integrations are used. The point is that you as a technical stakeholder can choose when to add, remove or scale something without being held back by the system. There is no vendor lock-in, roadmap constraints, and re-platforming (swap an integration, migrate the data, and change some data mapping code).</p><p><img alt=\"What a composable orchestration platform looks like\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvs9u5inctpg4f7iiu9h.png\" width=\"1280\"></p><h3 id=\"data-fetching-approaches\">Data fetching approaches</h3><p>Flexibility in how data is fetched from different sources is vital for the longevity of an orchestration platform. The platform SDK should not apply any opinion on how data is fetched. It offers an SDK that helps developers fetch it the way they want.</p><p>It’s essential that page compositions only point to data sources and that the platform itself does not store anything except for the identification of the component it references. The benefits are:</p><ol><li>the platform doesn’t store potentially sensitive data;</li><li>the platform doesn’t duplicate content;</li><li>the platform doesn’t have to know when data changes in the external source;</li><li>The platform does not have to serve the data and ingest the SLA provided by the source data it delivers.</li></ol><p>It’s up to the developer to use the platform SDK to retrieve the compositional data and use platform provided helper tools to query the different API endpoints. The beauty of this approach is that the SDK and how the data is fetched can live anywhere. From the local codebase to an external middleware layer or a serverless function. There are some benefits to positioning the data fetching outside of your codebase:</p><ol><li>You can hire separate developers who only focus on the API and the data mapping to the desired format. This separates concerns between disciplines, and back-end developers now have a place where they can feel at home.</li><li>The front-end application doesn’t need to know what external sources are queried. It queries one endpoint that returns the desired format for the front-end components to render.</li></ol><p>A standalone front-end without knowledge of what external APIs feed it is highly flexible, future-proof, and hard to hack. Imagine a design system full of components with excellent documentation of what properties they need and a simple SDK to query data and map it directly to these properties. If you have to switch CMS or commerce engine, it’s a matter of remapping the data to the component properties and you are done.</p><p><img alt=\"Data fetching in a composable orchestration platform\" loading=\"lazy\" provider=\"cloudinaryFetch\" sizes=\"sm:100vw\" src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u75kbivciz0ayqg3t7fd.png\" width=\"1280\"></p><h2 id=\"concluding\">Concluding</h2><p>To successfully manage your digital pipeline, we need orchestration that adds structure to the stack, making it easier to align API first sources toward the same business goal and empowering all of the various teams contributing to the end product - developers, content authors and marketers. To keep the digital pipeline productive as new technologies emerge, you need orchestration that gives freedom of choice in every aspect of the architecture both today and tomorrow.</p><p>Imagine if marketers and developers could be friends again and work together to create the best experience for their website visitors?</p>",
    "tocs": [
      {
        "toc": {
          "html_id": "in-this-article",
          "text": "In this article"
        }
      },
      {
        "toc": {
          "html_id": "the-jamstack-why-it-sits-front-and-centre-in-modern-architectures",
          "text": "The Jamstack: why it sits front and centre in modern architectures"
        }
      },
      {
        "toc": {
          "html_id": "the-orchestration-how-to-cable-manage-your-architecture",
          "text": "The orchestration: how to cable manage your architecture"
        }
      },
      {
        "toc": {
          "html_id": "concluding",
          "text": "Concluding"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2022-02-23T13:04:08Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_create-a-performant-youtube-embed-with-a-native-web-component": {
    "date": "2021-05-20T13:05:48Z",
    "title": "Create a performant YouTube embed with a native web component",
    "canonical_url": "https://cloudinary.com/blog/guest_post/create-a-performant-youtube-embed-with-a-native-web-component",
    "description": "In this Media Jam you will learn how to create a native web component that replaces the default YouTube iframe embed.",
    "url": "/writing/create-a-performant-youtube-embed-with-a-native-web-component",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1719585541/website/native-yt-player.png",
    "reading_time": "3 min read",
    "uid": "article_entry_uid_create-a-performant-youtube-embed-with-a-native-web-component",
    "locale": "en-us",
    "tags": [
      "webdev",
      "video",
      "web component"
    ],
    "created_at": "2021-05-20T13:05:48Z",
    "updated_at": "2021-05-20T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<p>In this Media Jam, you will learn how to create a native web component that replaces the default YouTube iframe embed. We do this in order to avoid wasting resources while embedding an unused video embed. Many visitors might not watch the video, so why load all the stuff from the YouTube iframe? Let’s be conscious of performance, and the carbon emissions your website produces. Less data over the wire is always better.</p><p>This component creates the real YouTube iframe embed when the user clicks on the poster. Before it has been clicked, it looks like a real embed, and it only needs the YouTube video ID to work.</p><h2 id=\"a-native-web-component\">A native web component</h2><p>Native web components have been around for a while, but they don’t seem to be used too often. Frameworks like Vue and React do such a great job that most developers stick with them. This YouTube embed, however, uses a native web component. This way, you can drop it in any website or SPA, and it just works.</p><p>This is a simple version of a potentially much bigger concept, through which iframe embeds can always be loaded through native web components to conserve bandwidth. Use this method if you don’t want to use the loading=\"lazy\" HTML attribute that always loads the iframe when you scroll within a certain distance of it.</p><p>There are some amazing implementations out there (Paul Irish did one close to this one) where they preload (and pre-connect) potential assets the embed will use. Options galore!</p><h2 id=\"lets-keep-it-simple\">Let’s keep it simple</h2><p>In this Jam, the code exemplifies the concept of using a native web component to create the embed. It is completely usable and ready for production, but it is simpler than the code you may be working with.</p><p>To create a native web component, you need to extend the HTMLElement class. In this case:</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"class youtubeEmbed extends HTMLElement {\n  // do stuff\n}\n\nwindow.customElements.define(&#x22;youtube-embed&#x22;, youtubeEmbed);\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">class</span><span style=\"--shiki-default:#B392F0\"> youtubeEmbed</span><span style=\"--shiki-default:#F97583\"> extends</span><span style=\"--shiki-default:#B392F0\"> HTMLElement</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#6A737D\">  // do stuff\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"4\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">window.customElements.</span><span style=\"--shiki-default:#B392F0\">define</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed\"</span><span style=\"--shiki-default:#E1E4E8\">, youtubeEmbed);\n</span></span></code></pre><p>That’s it! You created a Native Web Component.</p><p>To hook into the lifecycle of the custom element, we use the connectedCallback() function and start creating DOM nodes and event listeners.</p><p>The this property represents the DOM node just defined. In our case: <code class=\"\">&#x3C;youtube-embed></code>.</p><h2 id=\"how-to-mimic-the-youtube-embed\">How to mimic the YouTube embed</h2><p>A YouTube embed, at the very least, has a poster image, a play button and works in a 16:9 ratio. These three things are achievable by a bit of vanilla JavaScript and some simple CSS.</p><p>Let’s first make sure the poster and the play button show up. To create the poster URL, we need the YouTube video ID. The video ID can be passed as an HTML attribute on the custom element.</p><pre class=\"language-html shiki shiki-themes github-dark\" code=\"<youtube-embed videoid=&#x22;6Ub_k4uvz20&#x22;></youtube-embed>\n\" language=\"html\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">youtube-embed</span><span style=\"--shiki-default:#B392F0\"> videoid</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"6Ub_k4uvz20\"</span><span style=\"--shiki-default:#E1E4E8\">>&#x3C;/</span><span style=\"--shiki-default:#85E89D\">youtube-embed</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>Now that the attribute is added, you can retrieve it like you always do in vanilla JS: <code class=\"\">this.getAttribute('videoid')</code>. With the video ID, you can now concatenate the poster URL, and add it as the background of the <code class=\"\">youtube-embed</code> element. CSS is used to style it properly.</p><p>The play button is added by creating it, and appending it to the DOM of the <code class=\"\">youtube-embed</code>.</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"class youtubeEmbed extends HTMLElement {\n  connectedCallback() {\n    this.videoId = this.getAttribute(&#x22;videoid&#x22;);\n    this.posterUrl = &#x60;https://i.ytimg.com/vi/${this.videoId}/maxresdefault.jpg&#x60;;\n    this.style.backgroundImage = &#x60;url(&#x22;${this.posterUrl}&#x22;)&#x60;;\n\n    const playBtnEl = document.createElement(&#x22;button&#x22;);\n    playBtnEl.classList.add(&#x22;youtube-embed-play&#x22;);\n    this.append(playBtnEl);\n  }\n}\n\nwindow.customElements.define(&#x22;youtube-embed&#x22;, youtubeEmbed);\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">class</span><span style=\"--shiki-default:#B392F0\"> youtubeEmbed</span><span style=\"--shiki-default:#F97583\"> extends</span><span style=\"--shiki-default:#B392F0\"> HTMLElement</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#B392F0\">  connectedCallback</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.videoId </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">getAttribute</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"videoid\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.posterUrl </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#9ECBFF\"> `https://i.ytimg.com/vi/${</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#9ECBFF\">.</span><span style=\"--shiki-default:#E1E4E8\">videoId</span><span style=\"--shiki-default:#9ECBFF\">}/maxresdefault.jpg`</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.style.backgroundImage </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#9ECBFF\"> `url(\"${</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#9ECBFF\">.</span><span style=\"--shiki-default:#E1E4E8\">posterUrl</span><span style=\"--shiki-default:#9ECBFF\">}\")`</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"6\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#F97583\">    const</span><span style=\"--shiki-default:#79B8FF\"> playBtnEl</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#E1E4E8\"> document.</span><span style=\"--shiki-default:#B392F0\">createElement</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"button\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    playBtnEl.classList.</span><span style=\"--shiki-default:#B392F0\">add</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed-play\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">append</span><span style=\"--shiki-default:#E1E4E8\">(playBtnEl);\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">  }\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"12\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">window.customElements.</span><span style=\"--shiki-default:#B392F0\">define</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed\"</span><span style=\"--shiki-default:#E1E4E8\">, youtubeEmbed);\n</span></span></code></pre><p>The only thing left to do is to create the real embed iframe when the user clicks the poster or the play button. The way to do that is to add an <code class=\"\">addEventListener</code> function to the whole <code class=\"\">youtube-embed</code> element.</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"class youtubeEmbed extends HTMLElement {\n  connectedCallback() {\n    this.videoId = this.getAttribute(&#x22;videoid&#x22;);\n    this.posterUrl = &#x60;https://i.ytimg.com/vi/${this.videoId}/maxresdefault.jpg&#x60;;\n    this.style.backgroundImage = &#x60;url(&#x22;${this.posterUrl}&#x22;)&#x60;;\n\n    const playBtnEl = document.createElement(&#x22;button&#x22;);\n    playBtnEl.classList.add(&#x22;youtube-embed-play&#x22;);\n    this.append(playBtnEl);\n\n    this.addEventListener(&#x22;click&#x22;, () => {\n      const iframeEl = document.createElement(&#x22;iframe&#x22;);\n      iframeEl.width = 560;\n      iframeEl.height = 315;\n      iframeEl.allow =\n        &#x22;accelerometer autoplay encrypted-media gyroscope picture-in-picture&#x22;;\n      iframeEl.allowFullscreen = true;\n      iframeEl.src = &#x60;https://www.youtube.com/embed/${this.videoId}&#x60;;\n      this.append(iframeEl);\n      this.classList.add(&#x22;youtube-embed-ready&#x22;);\n      this.querySelector(&#x22;iframe&#x22;).focus();\n    });\n  }\n}\n\nwindow.customElements.define(&#x22;youtube-embed&#x22;, youtubeEmbed);\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">class</span><span style=\"--shiki-default:#B392F0\"> youtubeEmbed</span><span style=\"--shiki-default:#F97583\"> extends</span><span style=\"--shiki-default:#B392F0\"> HTMLElement</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#B392F0\">  connectedCallback</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.videoId </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">getAttribute</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"videoid\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.posterUrl </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#9ECBFF\"> `https://i.ytimg.com/vi/${</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#9ECBFF\">.</span><span style=\"--shiki-default:#E1E4E8\">videoId</span><span style=\"--shiki-default:#9ECBFF\">}/maxresdefault.jpg`</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.style.backgroundImage </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#9ECBFF\"> `url(\"${</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#9ECBFF\">.</span><span style=\"--shiki-default:#E1E4E8\">posterUrl</span><span style=\"--shiki-default:#9ECBFF\">}\")`</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"6\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#F97583\">    const</span><span style=\"--shiki-default:#79B8FF\"> playBtnEl</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#E1E4E8\"> document.</span><span style=\"--shiki-default:#B392F0\">createElement</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"button\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    playBtnEl.classList.</span><span style=\"--shiki-default:#B392F0\">add</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed-play\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">append</span><span style=\"--shiki-default:#E1E4E8\">(playBtnEl);\n</span></span><span class=\"line\" line=\"10\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">addEventListener</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"click\"</span><span style=\"--shiki-default:#E1E4E8\">, () </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#F97583\">      const</span><span style=\"--shiki-default:#79B8FF\"> iframeEl</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#E1E4E8\"> document.</span><span style=\"--shiki-default:#B392F0\">createElement</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"iframe\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">      iframeEl.width </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> 560</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#E1E4E8\">      iframeEl.height </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> 315</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">      iframeEl.allow </span><span style=\"--shiki-default:#F97583\">=\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#9ECBFF\">        \"accelerometer autoplay encrypted-media gyroscope picture-in-picture\"</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">      iframeEl.allowFullscreen </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> true</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">      iframeEl.src </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#9ECBFF\"> `https://www.youtube.com/embed/${</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#9ECBFF\">.</span><span style=\"--shiki-default:#E1E4E8\">videoId</span><span style=\"--shiki-default:#9ECBFF\">}`</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">append</span><span style=\"--shiki-default:#E1E4E8\">(iframeEl);\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.classList.</span><span style=\"--shiki-default:#B392F0\">add</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed-ready\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">querySelector</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"iframe\"</span><span style=\"--shiki-default:#E1E4E8\">).</span><span style=\"--shiki-default:#B392F0\">focus</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">    });\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">  }\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"25\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">window.customElements.</span><span style=\"--shiki-default:#B392F0\">define</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\"youtube-embed\"</span><span style=\"--shiki-default:#E1E4E8\">, youtubeEmbed);\n</span></span></code></pre><p>On click, an iframe is created, the source URL is concatenated, and the iframe is appended to the DOM of the <code class=\"\">youtube-embed</code> element.</p><p>Once clicked, a CSS classname is added to hide the play button and the newly created iframe is focused.</p><h2 id=\"conclusion\">Conclusion</h2><p>As written earlier, this is a simple but solid approach to creating a YouTube embed that only embeds itself when the user clicks on it. It is framework agnostic and can be added in any codebase. Saving bandwidth is good for performance, but also for the environment.</p><p>Happy coding!</p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>",
    "tocs": [
      {
        "toc": {
          "html_id": "a-native-web-component",
          "text": "A native web component"
        }
      },
      {
        "toc": {
          "html_id": "lets-keep-it-simple",
          "text": "Let’s keep it simple"
        }
      },
      {
        "toc": {
          "html_id": "how-to-mimic-the-youtube-embed",
          "text": "How to mimic the YouTube embed"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2021-05-20T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  },
  "article_entry_uid_creating-a-custom-video-player-in-vue": {
    "date": "2021-05-18T13:05:48Z",
    "title": "Creating a custom video player in Vue.js",
    "canonical_url": "https://cloudinary.com/blog/guest_post/creating-a-custom-video-player-in-vue",
    "description": "In this Media Jam you will learn how to create a video player with custom controls and event handling in Vue.js.",
    "url": "/writing/creating-a-custom-video-player-in-vue",
    "image": "https://res.cloudinary.com/dwfcofnrd/image/upload/v1719585541/website/vue-video-player-poster.png",
    "reading_time": "7 min read",
    "uid": "article_entry_uid_creating-a-custom-video-player-in-vue",
    "locale": "en-us",
    "tags": [
      "webdev",
      "video",
      "vue"
    ],
    "created_at": "2021-05-18T13:05:48Z",
    "updated_at": "2021-05-18T13:05:48Z",
    "created_by": "cs6c7ee2bd00ff9f69",
    "updated_by": "cs6c7ee2bd00ff9f69",
    "content_type_uid": "article",
    "body": "<blockquote><p>Beware: this post is from 2021 and will show Vue.js options API code.</p></blockquote><p>In this Media Jam you will learn how to create a video player with custom controls and event handling in Vue.js. This Jam does not use any pre-build video libraries, you will learn to code directly against the native video API in the browser.</p><p>Vue.js has great features to make components communicate together. In this Jam, you will learn how to use scoped slots, and how to pass information between different components.</p><p>The video player is split up into multiple files:</p><ol><li><code class=\"\">Videoplayer.vue</code> contains the basics and wraps the native HTML5 video player in Vue code. It exposes video events, and its controls, so they are accessible for the other Vue components in the Jam.</li><li><code class=\"\">videoplayer-track.vue</code> listens to the <code class=\"\">timeupdate</code> event, and based on the video duration, calculates the percentage played.</li><li>And finally <code class=\"\">app.vue</code>. This is the file where everything comes together. From custom controls to listening to native events, to showing the state of the video in the custom controls.</li></ol><h2 id=\"wrapping-native-html5-video-in-vuejs\">Wrapping native HTML5 video in Vue.js</h2><p>The native HTML5 video tag is constructed in ‘videoplayer.vue’. It is able to receive props (the ones we add in <code class=\"\">app.vue</code>), and is able to pass these along to the video tag.</p><pre class=\"language-vue shiki shiki-themes github-dark\" code=\"<template>\n  <video\n    :src=&#x22;src&#x22;\n    :muted=&#x22;muted&#x22;\n    :autoplay=&#x22;autoplay&#x22;\n    :controls=&#x22;controls&#x22;\n    :loop=&#x22;loop&#x22;\n    :width=&#x22;width&#x22;\n    :height=&#x22;height&#x22;\n    :poster=&#x22;poster&#x22;\n    :preload=&#x22;preload&#x22;\n    :playsinline=&#x22;true&#x22;\n    ref=&#x22;player&#x22;\n  />\n</template>\n<script>\nexport default {\n  name: &#x22;Videoplayer&#x22;,\n  props: {\n    src: { type: String, required: true },\n    controls: { type: Boolean, required: false, default: false },\n    loop: { type: Boolean, required: false, default: false },\n    width: { type: Number, required: false, default: 500 },\n    height: { type: Number, required: false, default: 281 },\n    autoplay: { type: Boolean, required: false, default: false },\n    muted: { type: Boolean, required: false, default: false },\n    poster: { type: String, required: false },\n    preload: { type: String, required: false, default: &#x22;auto&#x22; },\n  },\n}\n</script>\n\n\" language=\"vue\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">video\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">src</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">src</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">muted</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">muted</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">autoplay</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">autoplay</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">controls</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">controls</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">loop</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">loop</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">width</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">width</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">height</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">height</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">poster</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">poster</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">preload</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">preload</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">    :</span><span style=\"--shiki-default:#B392F0\">playsinline</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#B392F0\">    ref</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"player\"\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#FDAEB7;--shiki-default-font-style:italic\">  /</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">  name: </span><span style=\"--shiki-default:#9ECBFF\">\"Videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">  props: {\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">    src: { type: String, required: </span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">    controls: { type: Boolean, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">    loop: { type: Boolean, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">    width: { type: Number, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">500</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    height: { type: Number, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">281</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">    autoplay: { type: Boolean, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">    muted: { type: Boolean, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#E1E4E8\">    poster: { type: String, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"28\"><span style=\"--shiki-default:#E1E4E8\">    preload: { type: String, required: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">, default: </span><span style=\"--shiki-default:#9ECBFF\">\"auto\"</span><span style=\"--shiki-default:#E1E4E8\"> },\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>As you can see above, the default properties that the native HTML5 video tag has been passed through with Vue.js.</p><p>Notice the <code class=\"\">ref=\"player\"</code> prop on the video tag. This allows you to reference the native HTML tag in Vue.js like so: <code class=\"\">this.$refs.player</code>.</p><p>The player <code class=\"\">ref</code> is used to send actions and to listen to events for the HTML5 video tag in Vue.</p><h2 id=\"methods-to-send-actions-to-the-player\">Methods to send actions to the player</h2><p>The <code class=\"\">videoplayer.vue</code> component has a bunch of functions to control the state of the native HTML5 player. Let’s start with the basics: <code class=\"\">play()</code>, <code class=\"\">pause()</code>, <code class=\"\">togglePlay()</code>, <code class=\"\">mute()</code>, <code class=\"\">unmute()</code> and <code class=\"\">toggleMute()</code>.</p><p><em>Note that some of the earlier code around the props has been omitted to keep the below code simple and focused on the basic functions.</em></p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"export default {\n  name: &#x22;Videoplayer&#x22;,\n  // keeping the state \n  data() {\n    return {\n      playing: false,\n      videoMuted: false,\n    };\n  },\n methods: {\n    play() {\n      this.$refs.player.play();\n      this.setPlaying(true);\n    },\n\n    pause() {\n      this.$refs.player.pause();\n      this.setPlaying(false);\n    },\n\n    togglePlay() {\n      if (this.playing) {\n        this.pause();\n      } else {\n        this.play();\n      }\n    },\n\n    setPlaying(state) {\n      this.playing = state;\n    },\n    \n    mute() {\n      this.$refs.player.muted = true;\n      this.setMuted(true);\n    },\n\n    unmute() {\n      this.$refs.player.muted = false;\n      this.setMuted(false);\n    },\n\n    toggleMute() {\n      if (this.videoMuted) {\n        this.unmute();\n      } else {\n        this.mute();\n      }\n    },\n\n    setMuted(state) {\n      this.videoMuted = state;\n    }\n  }\n}\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  name: </span><span style=\"--shiki-default:#9ECBFF\">\"Videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#6A737D\">  // keeping the state \n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#B392F0\">  data</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#F97583\">    return</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">      playing: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">      videoMuted: </span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    };\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\"> methods: {\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#B392F0\">    play</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player.</span><span style=\"--shiki-default:#B392F0\">play</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"15\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#B392F0\">    pause</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player.</span><span style=\"--shiki-default:#B392F0\">pause</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"20\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#B392F0\">    togglePlay</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#F97583\">      if</span><span style=\"--shiki-default:#E1E4E8\"> (</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#E1E4E8\">.playing) {\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">pause</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">      } </span><span style=\"--shiki-default:#F97583\">else</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">play</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">      }\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"28\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#B392F0\">    setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#FFAB70\">state</span><span style=\"--shiki-default:#E1E4E8\">) {\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.playing </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#E1E4E8\"> state;\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#E1E4E8\">    \n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#B392F0\">    mute</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"34\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player.muted </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> true</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"35\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">setMuted</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"36\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"37\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"38\"><span style=\"--shiki-default:#B392F0\">    unmute</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"39\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player.muted </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#79B8FF\"> false</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"40\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">setMuted</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"41\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"42\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"43\"><span style=\"--shiki-default:#B392F0\">    toggleMute</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"44\"><span style=\"--shiki-default:#F97583\">      if</span><span style=\"--shiki-default:#E1E4E8\"> (</span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#E1E4E8\">.videoMuted) {\n</span></span><span class=\"line\" line=\"45\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">unmute</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"46\"><span style=\"--shiki-default:#E1E4E8\">      } </span><span style=\"--shiki-default:#F97583\">else</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"47\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">mute</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"48\"><span style=\"--shiki-default:#E1E4E8\">      }\n</span></span><span class=\"line\" line=\"49\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"50\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"51\"><span style=\"--shiki-default:#B392F0\">    setMuted</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#FFAB70\">state</span><span style=\"--shiki-default:#E1E4E8\">) {\n</span></span><span class=\"line\" line=\"52\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.videoMuted </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#E1E4E8\"> state;\n</span></span><span class=\"line\" line=\"53\"><span style=\"--shiki-default:#E1E4E8\">    }\n</span></span><span class=\"line\" line=\"54\"><span style=\"--shiki-default:#E1E4E8\">  }\n</span></span><span class=\"line\" line=\"55\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span></code></pre><p>Some of this code looks a little redundant, especially the <code class=\"\">setPlaying</code> and <code class=\"\">setMuted</code> functions. But, these “setter” functions will be needed when you want to set the state of the player from another component while listening to video events.</p><h2 id=\"controlling-the-player-from-another-component\">Controlling the player from another component</h2><p>By creating a base video player which sends events, and does simple actions, you can potentially create many video player instances with different feature sets without bloating the player code itself. In this Jam, the code is using a “scoped slot” to pass information and actions from the native video player to the code added into the slot. The controls, video track, and duration are created separately and put into the slot where the player is instantiated.</p><p>This way you can make one player instance with just a play button, and another with a toggle play, a progress track, and a mute button.</p><p>This is how you pass functions and other info into the slot:</p><pre class=\"language-vue shiki shiki-themes github-dark\" code=\"<template>\n  <div>\n    <video\n      :src=&#x22;src&#x22;\n      :muted=&#x22;muted&#x22;\n      :autoplay=&#x22;autoplay&#x22;\n      :controls=&#x22;controls&#x22;\n      :loop=&#x22;loop&#x22;\n      :width=&#x22;width&#x22;\n      :height=&#x22;height&#x22;\n      :poster=&#x22;poster&#x22;\n      :preload=&#x22;preload&#x22;\n      :playsinline=&#x22;true&#x22;\n      ref=&#x22;player&#x22;\n    />\n    <slot\n      name=&#x22;controls&#x22;\n      *:play=&#x22;play&#x22;\n      :pause=&#x22;pause&#x22;\n      :playing=&#x22;playing&#x22;\n      :toggle-play=&#x22;togglePlay&#x22;\n      :video-muted=&#x22;videoMuted&#x22;\n      :toggle-mute=&#x22;toggleMute&#x22;*\n    ></slot>\n  </div>\n</template>\n\" language=\"vue\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;</span><span style=\"--shiki-default:#85E89D\">video\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">src</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">src</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">muted</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">muted</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">autoplay</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">autoplay</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">controls</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">controls</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">loop</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">loop</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">width</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">width</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">height</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">height</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">poster</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">poster</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">preload</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">preload</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">playsinline</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#B392F0\">      ref</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"player\"\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#FDAEB7;--shiki-default-font-style:italic\">    /</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;</span><span style=\"--shiki-default:#85E89D\">slot\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#B392F0\">      name</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"controls\"\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#B392F0\">      *:play</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"play\"\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">pause</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">pause</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">playing</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">playing</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">toggle-play</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">togglePlay</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">video-muted</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">videoMuted</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">      :</span><span style=\"--shiki-default:#B392F0\">toggle-mute</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">toggleMute</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#B392F0\">*\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    >&#x3C;/</span><span style=\"--shiki-default:#85E89D\">slot</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;/</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>In the example above the functions and state created earlier are passed into the slot called “controls”. When the slot is used by another component, that component receives all these properties and functions.</p><p>Use it like this:</p><pre class=\"language-vue shiki shiki-themes github-dark\" code=\"<template>\n  <videoplayer src=&#x22;https://res.cloudinary.com/demo/video/upload/dog.mp4&#x22;>\n    <template v-slot:controls=&#x22;{ togglePlay, toggleMute, playing, videoMuted }&#x22;>\n      <div class=&#x22;videoplayer-controls&#x22;>\n        <button @click=&#x22;togglePlay()&#x22;>{{ playing ? &#x22;pause&#x22; : &#x22;play&#x22; }}</button>\n        <button @click=&#x22;toggleMute()&#x22;>{{ videoMuted ? &#x22;unmute&#x22; : &#x22;mute&#x22; }}</button>\n      </div>\n    </template>\n  </videoplayer>\n</template>\n\n<script>\nimport videoplayer from &#x22;./components/videoplayer&#x22;;\nexport default {\n  components: {\n    videoplayer,\n  },\n}\n</script>\n\n\" language=\"vue\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">videoplayer</span><span style=\"--shiki-default:#B392F0\"> src</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"https://res.cloudinary.com/demo/video/upload/dog.mp4\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#B392F0\"> v-slot</span><span style=\"--shiki-default:#E1E4E8\">:</span><span style=\"--shiki-default:#B392F0\">controls</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">{ togglePlay, toggleMute, playing, videoMuted }</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#B392F0\"> class</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"videoplayer-controls\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">button</span><span style=\"--shiki-default:#E1E4E8\"> @</span><span style=\"--shiki-default:#B392F0\">click</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#B392F0\">togglePlay</span><span style=\"--shiki-default:#E1E4E8\">()</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>{{ playing </span><span style=\"--shiki-default:#F97583\">?</span><span style=\"--shiki-default:#9ECBFF\"> \"pause\"</span><span style=\"--shiki-default:#F97583\"> :</span><span style=\"--shiki-default:#9ECBFF\"> \"play\"</span><span style=\"--shiki-default:#E1E4E8\"> }}&#x3C;/</span><span style=\"--shiki-default:#85E89D\">button</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">button</span><span style=\"--shiki-default:#E1E4E8\"> @</span><span style=\"--shiki-default:#B392F0\">click</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#B392F0\">toggleMute</span><span style=\"--shiki-default:#E1E4E8\">()</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>{{ videoMuted </span><span style=\"--shiki-default:#F97583\">?</span><span style=\"--shiki-default:#9ECBFF\"> \"unmute\"</span><span style=\"--shiki-default:#F97583\"> :</span><span style=\"--shiki-default:#9ECBFF\"> \"mute\"</span><span style=\"--shiki-default:#E1E4E8\"> }}&#x3C;/</span><span style=\"--shiki-default:#85E89D\">button</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;/</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;/</span><span style=\"--shiki-default:#85E89D\">videoplayer</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"11\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#F97583\">import</span><span style=\"--shiki-default:#E1E4E8\"> videoplayer </span><span style=\"--shiki-default:#F97583\">from</span><span style=\"--shiki-default:#9ECBFF\"> \"./components/videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">  components: {\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">    videoplayer,\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><h2 id=\"sending-events-from-the-native-video-to-the-player-implementation\">Sending events from the native video to the player implementation</h2><p>Now that the “scoped slot” is working, you can use the Vue.js event emitter to send native video events to the <code class=\"\">app.vue</code> which implements <code class=\"\">videoplayer.vue</code>.</p><p>These are the most interesting events in most cases:</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"const EVENTS = [\n  &#x22;play&#x22;,\n  &#x22;pause&#x22;,\n  &#x22;ended&#x22;,\n  &#x22;loadeddata&#x22;,\n  &#x22;waiting&#x22;,\n  &#x22;playing&#x22;,\n  &#x22;timeupdate&#x22;,\n  &#x22;canplay&#x22;,\n  &#x22;canplaythrough&#x22;,\n  &#x22;statechanged&#x22;,\n];\n\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">const</span><span style=\"--shiki-default:#79B8FF\"> EVENTS</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#E1E4E8\"> [\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#9ECBFF\">  \"play\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#9ECBFF\">  \"pause\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#9ECBFF\">  \"ended\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#9ECBFF\">  \"loadeddata\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#9ECBFF\">  \"waiting\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#9ECBFF\">  \"playing\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#9ECBFF\">  \"timeupdate\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#9ECBFF\">  \"canplay\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#9ECBFF\">  \"canplaythrough\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#9ECBFF\">  \"statechanged\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">];\n</span></span></code></pre><p>In the <code class=\"\">mounted</code> hook of the Vue component, when the video tag exists in the DOM, you can loop over these events, and start listening to them. <em>Some code is omitted to make the example more clear. For the full code see the CodeSandBox link.</em></p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"const EVENTS = [\n  &#x22;play&#x22;,\n  &#x22;pause&#x22;,\n  &#x22;ended&#x22;,\n  &#x22;loadeddata&#x22;,\n  &#x22;waiting&#x22;,\n  &#x22;playing&#x22;,\n  &#x22;timeupdate&#x22;,\n  &#x22;canplay&#x22;,\n  &#x22;canplaythrough&#x22;,\n  &#x22;statechanged&#x22;,\n];\n\nexport default {\n  name: &#x22;Videoplayer&#x22;,\n  mounted() {\n    this.bindEvents();\n  },\n  methods: {\n    bindEvents() {\n      EVENTS.forEach((event) => {\n        this.bindVideoEvent(event);\n      });\n    },\n\n    bindVideoEvent(which) {\n      const player = this.$refs.player;\n\n      player.addEventListener(\n        which,\n        (event) => {\n          this.$emit(which, { event, player: this });\n        }\n      );\n    },\n  }\n}\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#F97583\">const</span><span style=\"--shiki-default:#79B8FF\"> EVENTS</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#E1E4E8\"> [\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#9ECBFF\">  \"play\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#9ECBFF\">  \"pause\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#9ECBFF\">  \"ended\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#9ECBFF\">  \"loadeddata\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#9ECBFF\">  \"waiting\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#9ECBFF\">  \"playing\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#9ECBFF\">  \"timeupdate\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#9ECBFF\">  \"canplay\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#9ECBFF\">  \"canplaythrough\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#9ECBFF\">  \"statechanged\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">];\n</span></span><span class=\"line\" line=\"13\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">  name: </span><span style=\"--shiki-default:#9ECBFF\">\"Videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#B392F0\">  mounted</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#79B8FF\">    this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">bindEvents</span><span style=\"--shiki-default:#E1E4E8\">();\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">  methods: {\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#B392F0\">    bindEvents</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#79B8FF\">      EVENTS</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">forEach</span><span style=\"--shiki-default:#E1E4E8\">((</span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">bindVideoEvent</span><span style=\"--shiki-default:#E1E4E8\">(event);\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">      });\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"25\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#B392F0\">    bindVideoEvent</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#FFAB70\">which</span><span style=\"--shiki-default:#E1E4E8\">) {\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#F97583\">      const</span><span style=\"--shiki-default:#79B8FF\"> player</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#79B8FF\"> this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player;\n</span></span><span class=\"line\" line=\"28\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#E1E4E8\">      player.</span><span style=\"--shiki-default:#B392F0\">addEventListener</span><span style=\"--shiki-default:#E1E4E8\">(\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">        which,\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">        (</span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#79B8FF\">          this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">$emit</span><span style=\"--shiki-default:#E1E4E8\">(which, { event, player: </span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#E1E4E8\"> });\n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#E1E4E8\">        }\n</span></span><span class=\"line\" line=\"34\"><span style=\"--shiki-default:#E1E4E8\">      );\n</span></span><span class=\"line\" line=\"35\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"36\"><span style=\"--shiki-default:#E1E4E8\">  }\n</span></span><span class=\"line\" line=\"37\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span></code></pre><p>On <code class=\"\">mounted</code> the <code class=\"\">bindEvents()</code> function loops over the list of pre-defined events and it fires off a <code class=\"\">bindVideoEvent()</code> function which, in turn, takes the video DOM node from <code class=\"\">this.$refs.player</code>, and adds an <code class=\"\">addEventListener</code> function for the event.</p><p>Now that the code is listening to the events from the native player, it uses the Vue event emitter to send events. It sends the native event data to itself <em>and</em> the player instance. This is handy for the component implementing the video player.</p><p>This is how to listen to the events from the other side:</p><pre class=\"language-vue shiki shiki-themes github-dark\" code=\"<template>\n  <videoplayer\n    src=&#x22;https://res.cloudinary.com/demo/video/upload/dog.mp4&#x22;\n    @play=&#x22;onPlayerPlay&#x22;\n    @pause=&#x22;onPlayerPause&#x22;\n    @ended=&#x22;onPlayerEnded&#x22;\n    @loadeddata=&#x22;onPlayerLoadeddata&#x22;\n    @waiting=&#x22;onPlayerWaiting&#x22;\n    @playing=&#x22;onPlayerPlaying&#x22;\n    @timeupdate=&#x22;onPlayerTimeupdate&#x22;\n    @canplay=&#x22;onPlayerCanplay&#x22;\n    @canplaythrough=&#x22;onPlayerCanplaythrough&#x22;\n    @statechanged=&#x22;playerStateChanged&#x22;>\n\n  <!-- slot related stuff -->\n\n  </videoplayer>\n</template>\n\n<script>\nimport videoplayer from &#x22;./components/videoplayer&#x22;;\nexport default {\n  components: {\n    videoplayer,\n  },\n  methods: {\n    onPlayerPlay({ event, player }) {\n      console.log(event.type);\n      player.setPlaying(true);\n    },\n    onPlayerPause({ event, player }) {\n      console.log(event.type);\n      player.setPlaying(false);\n    },\n    onPlayerEnded({ event, player }) {\n      console.log(event.type);\n      player.setPlaying(false);\n    },\n    onPlayerLoadeddata({ event }) {\n      console.log(event.type);\n    },\n    onPlayerWaiting({ event }) {\n      console.log(event.type);\n    },\n    onPlayerPlaying({ event }) {\n      console.log(event.type);\n    },\n    onPlayerTimeupdate({ event }) {\n      console.log({ event: event.type, time: event.target.currentTime });\n    },\n    onPlayerCanplay({ event }) {\n      console.log(event.type);\n    },\n    onPlayerCanplaythrough({ event }) {\n      console.log(event.type);\n    },\n\n    playerStateChanged({ event }) {\n      console.log(event.type);\n    },\n  },\n};\n</script>\n\" language=\"vue\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">videoplayer\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#B392F0\">    src</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"https://res.cloudinary.com/demo/video/upload/dog.mp4\"\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">play</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerPlay</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">pause</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerPause</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">ended</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerEnded</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">loadeddata</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerLoadeddata</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">waiting</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerWaiting</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">playing</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerPlaying</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">timeupdate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerTimeupdate</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">canplay</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerCanplay</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">canplaythrough</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerCanplaythrough</span><span style=\"--shiki-default:#9ECBFF\">\"\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">statechanged</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">playerStateChanged</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"14\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#6A737D\">  &#x3C;!-- slot related stuff -->\n</span></span><span class=\"line\" line=\"16\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;/</span><span style=\"--shiki-default:#85E89D\">videoplayer</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"19\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#F97583\">import</span><span style=\"--shiki-default:#E1E4E8\"> videoplayer </span><span style=\"--shiki-default:#F97583\">from</span><span style=\"--shiki-default:#9ECBFF\"> \"./components/videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#E1E4E8\">  components: {\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">    videoplayer,\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">  methods: {\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#B392F0\">    onPlayerPlay</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#FFAB70\">player</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"28\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#E1E4E8\">      player.</span><span style=\"--shiki-default:#B392F0\">setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">true</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#B392F0\">    onPlayerPause</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#FFAB70\">player</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#E1E4E8\">      player.</span><span style=\"--shiki-default:#B392F0\">setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"34\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"35\"><span style=\"--shiki-default:#B392F0\">    onPlayerEnded</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#FFAB70\">player</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"36\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"37\"><span style=\"--shiki-default:#E1E4E8\">      player.</span><span style=\"--shiki-default:#B392F0\">setPlaying</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#79B8FF\">false</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"38\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"39\"><span style=\"--shiki-default:#B392F0\">    onPlayerLoadeddata</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"40\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"41\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"42\"><span style=\"--shiki-default:#B392F0\">    onPlayerWaiting</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"43\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"44\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"45\"><span style=\"--shiki-default:#B392F0\">    onPlayerPlaying</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"46\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"47\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"48\"><span style=\"--shiki-default:#B392F0\">    onPlayerTimeupdate</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"49\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">({ event: event.type, time: event.target.currentTime });\n</span></span><span class=\"line\" line=\"50\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"51\"><span style=\"--shiki-default:#B392F0\">    onPlayerCanplay</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"52\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"53\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"54\"><span style=\"--shiki-default:#B392F0\">    onPlayerCanplaythrough</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"55\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"56\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"57\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"58\"><span style=\"--shiki-default:#B392F0\">    playerStateChanged</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"59\"><span style=\"--shiki-default:#E1E4E8\">      console.</span><span style=\"--shiki-default:#B392F0\">log</span><span style=\"--shiki-default:#E1E4E8\">(event.type);\n</span></span><span class=\"line\" line=\"60\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"61\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"62\"><span style=\"--shiki-default:#E1E4E8\">};\n</span></span><span class=\"line\" line=\"63\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>By combining the “scoped slot” and the event listeners, you can do anything you need in order to ensure that the player looks and behaves the way you want each time you implement it.</p><h2 id=\"lets-add-a-time-indicator\">Let’s add a time indicator</h2><p>Now that all tools are in place, let’s add a time indicator. For the time indicator, you need the current time of the video and the duration of the video. On top of that, you also need a function to convert seconds to a duration.</p><p>In <code class=\"\">app.vue</code>, you ask for the video <code class=\"\">duration</code> and the <code class=\"\">convertTimeToDuration</code> function. You also have to listen to the <code class=\"\">timeupdate</code> event of the <a href=\"https://cloudinary.com/glossary/native-video\" rel=\"nofollow\">native video</a> to get the <code class=\"\">currentTime</code> of the video.</p><p><em>Note that all other code is removed so the example stays simple.</em></p><pre class=\"language-vue shiki shiki-themes github-dark\" code=\"<template>\n  <videoplayer \n    src=&#x22;https://res.cloudinary.com/demo/video/upload/dog.mp4&#x22;\n    @timeupdate=&#x22;onPlayerTimeupdate&#x22;>\n    <template v-slot:controls=&#x22;{ duration, convertTimeToDuration }&#x22;>\n      <div class=&#x22;videoplayer-controls&#x22;>\n        <div class=&#x22;videoplayer-controls-time&#x22;>\n          {{ convertTimeToDuration(time) }} /\n          {{ convertTimeToDuration(duration) }}\n        </div>\n      </div>\n    </template>\n  </videoplayer>\n</template>\n\n<script>\nimport videoplayer from &#x22;./components/videoplayer&#x22;;\nexport default {\n  components: {\n    videoplayer,\n  },\n  data() {\n    return {\n      time: 0,\n    };\n  },\n  methods: {\n    onPlayerTimeupdate({ event }) {\n      this.time = event.target.currentTime;\n    },\n  }\n}\n</script>\n\" language=\"vue\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;</span><span style=\"--shiki-default:#85E89D\">videoplayer</span><span style=\"--shiki-default:#E1E4E8\"> \n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#B392F0\">    src</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"https://res.cloudinary.com/demo/video/upload/dog.mp4\"\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">    @</span><span style=\"--shiki-default:#B392F0\">timeupdate</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">onPlayerTimeupdate</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#B392F0\"> v-slot</span><span style=\"--shiki-default:#E1E4E8\">:</span><span style=\"--shiki-default:#B392F0\">controls</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">{ duration, convertTimeToDuration }</span><span style=\"--shiki-default:#9ECBFF\">\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#B392F0\"> class</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"videoplayer-controls\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#B392F0\"> class</span><span style=\"--shiki-default:#E1E4E8\">=</span><span style=\"--shiki-default:#9ECBFF\">\"videoplayer-controls-time\"</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#E1E4E8\">          {{ </span><span style=\"--shiki-default:#B392F0\">convertTimeToDuration</span><span style=\"--shiki-default:#E1E4E8\">(time) }} /\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">          {{ </span><span style=\"--shiki-default:#B392F0\">convertTimeToDuration</span><span style=\"--shiki-default:#E1E4E8\">(duration) }}\n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">        &#x3C;/</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">      &#x3C;/</span><span style=\"--shiki-default:#85E89D\">div</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">    &#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#E1E4E8\">  &#x3C;/</span><span style=\"--shiki-default:#85E89D\">videoplayer</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">template</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"15\"><span emptyLinePlaceholder>\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#F97583\">import</span><span style=\"--shiki-default:#E1E4E8\"> videoplayer </span><span style=\"--shiki-default:#F97583\">from</span><span style=\"--shiki-default:#9ECBFF\"> \"./components/videoplayer\"</span><span style=\"--shiki-default:#E1E4E8\">;\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#F97583\">export</span><span style=\"--shiki-default:#F97583\"> default</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#E1E4E8\">  components: {\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">    videoplayer,\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#B392F0\">  data</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"23\"><span style=\"--shiki-default:#F97583\">    return</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"24\"><span style=\"--shiki-default:#E1E4E8\">      time: </span><span style=\"--shiki-default:#79B8FF\">0</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"25\"><span style=\"--shiki-default:#E1E4E8\">    };\n</span></span><span class=\"line\" line=\"26\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"27\"><span style=\"--shiki-default:#E1E4E8\">  methods: {\n</span></span><span class=\"line\" line=\"28\"><span style=\"--shiki-default:#B392F0\">    onPlayerTimeupdate</span><span style=\"--shiki-default:#E1E4E8\">({ </span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\"> }) {\n</span></span><span class=\"line\" line=\"29\"><span style=\"--shiki-default:#79B8FF\">      this</span><span style=\"--shiki-default:#E1E4E8\">.time </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#E1E4E8\"> event.target.currentTime;\n</span></span><span class=\"line\" line=\"30\"><span style=\"--shiki-default:#E1E4E8\">    },\n</span></span><span class=\"line\" line=\"31\"><span style=\"--shiki-default:#E1E4E8\">  }\n</span></span><span class=\"line\" line=\"32\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span><span class=\"line\" line=\"33\"><span style=\"--shiki-default:#E1E4E8\">&#x3C;/</span><span style=\"--shiki-default:#85E89D\">script</span><span style=\"--shiki-default:#E1E4E8\">>\n</span></span></code></pre><p>In <code class=\"\">videoplayer.vue</code>, you need to manage to get the <code class=\"\">duration</code> and create the code for the <code class=\"\">convertTimeToDuration</code> function.</p><p>For the <code class=\"\">duration</code>, update the <code class=\"\">bindVideoEvent</code> function from earlier. When the <code class=\"\">loadeddata</code> event hits the video, ‘duration’ becomes available.</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"data() {\n  return {\n    duration: 0,\n  };\n},\nmethods: {\n  bindVideoEvent(which) {\n    const player = this.$refs.player;\n  \n    player.addEventListener(\n      which,\n      (event) => {\n        if (which === &#x22;loadeddata&#x22;) {\n          this.duration = player.duration;\n        }\n  \n        this.$emit(which, { event, player: this });\n      },\n      true\n    );\n  },\n}\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#B392F0\">data</span><span style=\"--shiki-default:#E1E4E8\">() {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#F97583\">  return</span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    duration: </span><span style=\"--shiki-default:#79B8FF\">0</span><span style=\"--shiki-default:#E1E4E8\">,\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">  };\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">},\n</span></span><span class=\"line\" line=\"6\"><span style=\"--shiki-default:#B392F0\">methods</span><span style=\"--shiki-default:#E1E4E8\">: {\n</span></span><span class=\"line\" line=\"7\"><span style=\"--shiki-default:#B392F0\">  bindVideoEvent</span><span style=\"--shiki-default:#E1E4E8\">(which) {\n</span></span><span class=\"line\" line=\"8\"><span style=\"--shiki-default:#F97583\">    const</span><span style=\"--shiki-default:#79B8FF\"> player</span><span style=\"--shiki-default:#F97583\"> =</span><span style=\"--shiki-default:#79B8FF\"> this</span><span style=\"--shiki-default:#E1E4E8\">.$refs.player;\n</span></span><span class=\"line\" line=\"9\"><span style=\"--shiki-default:#E1E4E8\">  \n</span></span><span class=\"line\" line=\"10\"><span style=\"--shiki-default:#E1E4E8\">    player.</span><span style=\"--shiki-default:#B392F0\">addEventListener</span><span style=\"--shiki-default:#E1E4E8\">(\n</span></span><span class=\"line\" line=\"11\"><span style=\"--shiki-default:#E1E4E8\">      which,\n</span></span><span class=\"line\" line=\"12\"><span style=\"--shiki-default:#E1E4E8\">      (</span><span style=\"--shiki-default:#FFAB70\">event</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">=></span><span style=\"--shiki-default:#E1E4E8\"> {\n</span></span><span class=\"line\" line=\"13\"><span style=\"--shiki-default:#F97583\">        if</span><span style=\"--shiki-default:#E1E4E8\"> (which </span><span style=\"--shiki-default:#F97583\">===</span><span style=\"--shiki-default:#9ECBFF\"> \"loadeddata\"</span><span style=\"--shiki-default:#E1E4E8\">) {\n</span></span><span class=\"line\" line=\"14\"><span style=\"--shiki-default:#79B8FF\">          this</span><span style=\"--shiki-default:#E1E4E8\">.duration </span><span style=\"--shiki-default:#F97583\">=</span><span style=\"--shiki-default:#E1E4E8\"> player.duration;\n</span></span><span class=\"line\" line=\"15\"><span style=\"--shiki-default:#E1E4E8\">        }\n</span></span><span class=\"line\" line=\"16\"><span style=\"--shiki-default:#E1E4E8\">  \n</span></span><span class=\"line\" line=\"17\"><span style=\"--shiki-default:#79B8FF\">        this</span><span style=\"--shiki-default:#E1E4E8\">.</span><span style=\"--shiki-default:#B392F0\">$emit</span><span style=\"--shiki-default:#E1E4E8\">(which, { event, player: </span><span style=\"--shiki-default:#79B8FF\">this</span><span style=\"--shiki-default:#E1E4E8\"> });\n</span></span><span class=\"line\" line=\"18\"><span style=\"--shiki-default:#E1E4E8\">      },\n</span></span><span class=\"line\" line=\"19\"><span style=\"--shiki-default:#79B8FF\">      true\n</span></span><span class=\"line\" line=\"20\"><span style=\"--shiki-default:#E1E4E8\">    );\n</span></span><span class=\"line\" line=\"21\"><span style=\"--shiki-default:#E1E4E8\">  },\n</span></span><span class=\"line\" line=\"22\"><span style=\"--shiki-default:#E1E4E8\">}\n</span></span></code></pre><p>This is a simple function, used to parse seconds, and turn them into a duration. Add this one to your methods object in <code class=\"\">videoplayer.vue</code>:</p><pre class=\"language-js shiki shiki-themes github-dark\" code=\"convertTimeToDuration(seconds) {\n  return [parseInt((seconds / 60) % 60, 10), parseInt(seconds % 60, 10)]\n    .join(&#x22;:&#x22;)\n    .replace(/\\b(\\d)\\b/g, &#x22;0$1&#x22;);\n},\n\" language=\"js\" meta=\"\" style=\"\"><code __ignoreMap=\"\"><span class=\"line\" line=\"1\"><span style=\"--shiki-default:#B392F0\">convertTimeToDuration</span><span style=\"--shiki-default:#E1E4E8\">(seconds) {\n</span></span><span class=\"line\" line=\"2\"><span style=\"--shiki-default:#F97583\">  return</span><span style=\"--shiki-default:#E1E4E8\"> [</span><span style=\"--shiki-default:#B392F0\">parseInt</span><span style=\"--shiki-default:#E1E4E8\">((seconds </span><span style=\"--shiki-default:#F97583\">/</span><span style=\"--shiki-default:#79B8FF\"> 60</span><span style=\"--shiki-default:#E1E4E8\">) </span><span style=\"--shiki-default:#F97583\">%</span><span style=\"--shiki-default:#79B8FF\"> 60</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#79B8FF\">10</span><span style=\"--shiki-default:#E1E4E8\">), </span><span style=\"--shiki-default:#B392F0\">parseInt</span><span style=\"--shiki-default:#E1E4E8\">(seconds </span><span style=\"--shiki-default:#F97583\">%</span><span style=\"--shiki-default:#79B8FF\"> 60</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#79B8FF\">10</span><span style=\"--shiki-default:#E1E4E8\">)]\n</span></span><span class=\"line\" line=\"3\"><span style=\"--shiki-default:#E1E4E8\">    .</span><span style=\"--shiki-default:#B392F0\">join</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">\":\"</span><span style=\"--shiki-default:#E1E4E8\">)\n</span></span><span class=\"line\" line=\"4\"><span style=\"--shiki-default:#E1E4E8\">    .</span><span style=\"--shiki-default:#B392F0\">replace</span><span style=\"--shiki-default:#E1E4E8\">(</span><span style=\"--shiki-default:#9ECBFF\">/</span><span style=\"--shiki-default:#F97583\">\\b</span><span style=\"--shiki-default:#DBEDFF\">(</span><span style=\"--shiki-default:#79B8FF\">\\d</span><span style=\"--shiki-default:#DBEDFF\">)</span><span style=\"--shiki-default:#F97583\">\\b</span><span style=\"--shiki-default:#9ECBFF\">/</span><span style=\"--shiki-default:#F97583\">g</span><span style=\"--shiki-default:#E1E4E8\">, </span><span style=\"--shiki-default:#9ECBFF\">\"0$1\"</span><span style=\"--shiki-default:#E1E4E8\">);\n</span></span><span class=\"line\" line=\"5\"><span style=\"--shiki-default:#E1E4E8\">},\n</span></span></code></pre><h2 id=\"conclusion\">Conclusion</h2><p>Now that all conditions of working in the architecture are in place, it becomes clear it is very flexible, and adding the video player track component should be easy. Check the CodeSandBox link for the full example.</p><p>Happy coding!</p><style>html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}</style>",
    "tocs": [
      {
        "toc": {
          "html_id": "wrapping-native-html5-video-in-vuejs",
          "text": "Wrapping native HTML5 video in Vue.js"
        }
      },
      {
        "toc": {
          "html_id": "methods-to-send-actions-to-the-player",
          "text": "Methods to send actions to the player"
        }
      },
      {
        "toc": {
          "html_id": "controlling-the-player-from-another-component",
          "text": "Controlling the player from another component"
        }
      },
      {
        "toc": {
          "html_id": "sending-events-from-the-native-video-to-the-player-implementation",
          "text": "Sending events from the native video to the player implementation"
        }
      },
      {
        "toc": {
          "html_id": "lets-add-a-time-indicator",
          "text": "Let’s add a time indicator"
        }
      },
      {
        "toc": {
          "html_id": "conclusion",
          "text": "Conclusion"
        }
      }
    ],
    "publish_details": [
      {
        "environment": "development",
        "locale": "en-us",
        "time": "2021-05-18T13:05:48Z"
      }
    ],
    "ACL": {},
    "_version": 1,
    "_in_progress": false
  }
}